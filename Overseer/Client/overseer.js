angular.module("overseer",["ngRoute","ngAnimate","ngMaterial","pascalprecht.translate"]),angular.module("overseer").config(["$routeProvider","$mdThemingProvider","$httpProvider",function($routeProvider,$mdThemingProvider,$httpProvider){"use strict";$routeProvider.when("/",{templateUrl:"views/index.html",controller:"indexController",controllerAs:"ctrl"}).when("/configuration",{templateUrl:"views/configuration/index.html",controller:"configurationController",controllerAs:"ctrl"}).when("/configuration/printers/add",{templateUrl:"views/configuration/add.html",controller:"addPrinterController",controllerAs:"ctrl"}).when("/configuration/printers/edit/:id",{templateUrl:"views/configuration/edit.html",controller:"editPrinterController",controllerAs:"ctrl"}).when("/configuration/users/add",{templateUrl:"views/configuration/addUser.html",controller:"addUserController",controllerAs:"ctrl"}).when("/configuration/users/edit/:id",{templateUrl:"views/configuration/editUser.html",controller:"editUserController",controllerAs:"ctrl"}).when("/login",{templateUrl:"views/login.html",controller:"loginController",controllerAs:"ctrl"}).otherwise("/"),$mdThemingProvider.definePalette("overseerPalette",{50:"e6f0fd",100:"c1d9fa",200:"97c0f6",300:"6da6f2",400:"4e93f0",500:"2f80ed",600:"2a78eb",700:"236de8",800:"1d63e5",900:"1250e0",A100:"ffffff",A200:"dbe5ff",A400:"a8bfff",A700:"8facff",contrastDefaultColor:"light",contrastDarkColors:["50","100","200","300","400","A100","A200","A400","A700"],contrastLightColors:["500","600","700","800","900"]}),$mdThemingProvider.theme("default").primaryPalette("overseerPalette",{default:"500"}).accentPalette("overseerPalette",{default:"800"}).dark(),$mdThemingProvider.enableBrowserColor(),$httpProvider.interceptors.push(["$q","$location",function($q,$location){function startLoader(){0===activeRequest&&(NProgress.start(),timeout=setTimeout(function(){activeRequest=0,stopLoader()},3e4)),activeRequest++}function stopLoader(){--activeRequest<=0&&(timeout&&clearTimeout(timeout),activeRequest=0,NProgress.done())}var timeout,activeRequest=0;return{request:function(config){if(startLoader(),window.localStorage.activeUser){var user=JSON.parse(window.localStorage.activeUser);config.headers.Authorization="Bearer "+user.token}return config},response:function(response){return stopLoader(),response},responseError:function(response){return stopLoader(),401!==response.status&&403!==response.status||(delete window.localStorage.activeUser,$location.path("/login")),$q.reject(response)}}}])}]).controller("appCtrl",["$rootScope","$location","authentication","configuration",function($rootScope,$location,authentication,configuration){"use strict";function unsubscribeFromStatusUpdates(){$.connection.hub&&(monitoringEnabled=!1,$.connection.hub.stop())}function subscribeToStatusUpdates(){monitoringEnabled||$.connection.hub.start().done(function(){var token=authentication.activeUser?authentication.activeUser.token:"";$.connection.statusHub.server.startMonitoring(token).then(function(enabled){monitoringEnabled=enabled})})}var monitoringEnabled,self=this;Object.defineProperties(self,{showMenu:{get:function(){return authentication.authToken}}}),self.logout=function(){authentication.logout(),$location.path("/login")},$.connection.hub.url="/push",$.connection.statusHub.client.statusUpdate=function(status){$rootScope.$broadcast("$StatusUpdate$",status)},$rootScope.$watch(function(){return authentication.authToken},function(current,previous){current?subscribeToStatusUpdates():previous&&(configuration.clearCache(),unsubscribeFromStatusUpdates())}),subscribeToStatusUpdates()}]);
angular.module("overseer").config(["$translateProvider",function($translateProvider){"use strict";$translateProvider.translations("en",{add:"Add",edit:"Edit",editing:"Editing",save:"Save",cancel:"Cancel",delete:"Delete",confirm:"Confirm",dismiss:"Dismiss",printers:"Printers",noPrinter:"There are no printers configured or all printers are disabled.",noPrinters:"No Printers Configured",noUsers:"No Users Configured",noPrintersAddPrinter:"Add New Printer",noPrintersEditPrinters:"Edit Existing Printers",generalSettings:"General Settings",settings:"Settings",pollInterval:"Poll Interval",pollIntervalTitle:"How often the printers will be polled for updates",seconds:"Seconds",localPort:"Local Port (Requires Restart)",localPortTitle:"The local port where the Overseer web app will be hosted.",hideUnmonitored:"Hide Printers When Monitoring Is Disabled",hideUnmonitoredTitle:"When enabled printers with monitoring disabled will not be visible on the home page.",name:"Name",printerType:"Printer Type",monitoringDisabled:"Monitoring Disabled",monitoringEnabled:"Monitoring Enabled",disableMonitoring:"Disable Monitoring",disableMonitoringTitle:"When monitoring is disabled the application will not poll for update for this printer.",url:"Url",webcamUrl:"Webcam Url",snapshotUrl:"Snapshot Url",username:"Username",password:"Password",passwordEdit:"Password (At least 8 characters)",confirmPassword:"Confirm Password",requiresPassword:"Requires Password",apiKey:"Api Key",profile:"Profile",profileTitle:"The profile that will be used when interacting with Octoprint.",addPrinter:"Add Printer",openWebsite:"Open Website",status:"Status",progress:"Progress",elapsed:"Elapsed",estimated:"Estimated",feedRate:"Feed Rate",fanSpeed:"Fan Speed",flowRate:"Flow Rate",remaining:"Remaining",connecting:"Connecting...",disabled:"Disabled",bed:"Bed",Offline:"Offline",Idle:"Idle",Printing:"Printing",Paused:"Paused",Octoprint:"Octoprint",RepRap:"RepRap Firmware (Duet Web Control)",requiresAuthenticationTitle:"When enabled anonymous access to the application is not allowed.",requiresAuthentication:"Require User Logins",requiresAutnenticationPrompt:"At least one user must be added before enabling 'Require User Logins'",sessionLifetimeTitle:"Specifies how long the user will remain logged into the application before needing to re-authenticate. Leave blank to remain logged in indefinitely.",sessionLifetime:"Login Session Duration",days:"Days",indefinite:"Indefinite",login:"Sign In",logout:"Sign Out",user:"User",users:"Users",addUser:"Add User",isLoggedIn:"Logged In?",isLoggedInTitle:"Specifies if a user has a active login",warning:"Warning!",yes:"Yes",no:"No",deletePrinterPrompt:"Are you sure you want remove this printer?",deleteUserPrompt:"Are you sure you want remove this user?",deleteLastUserPrompt:"At least one user must exist when 'Require User Logins' is enabled. To remove this user disable 'Require User Logins' or add another user."}).preferredLanguage("en")}]);
angular.module("overseer").directive("printer",function(){"use strict";return{restrict:"E",scope:!0,replace:!0,templateUrl:"directives/printer.html",bindToController:{model:"="},controller:["$q","$scope","controlService","$mdDialog","tuneModal",function($q,$scope,controlService,$mdDialog,tuneModal){function getTemp(tool,tempProperty){return self.status&&self.status.temperatures?self.status.temperatures[tool][tempProperty]:0}var self=this;self.connecting=!0,self.cacheBuster=Date.now(),Object.defineProperties(self,{isPrinting:{get:function(){if(self.status)return"Printing"===self.status.state}},isPaused:{get:function(){if(self.status)return"Paused"===self.status.state}},isIdle:{get:function(){if(self.status)return"Idle"===self.status.state}},isDisconnected:{get:function(){return!self.status||(!self.isDisabled&&"Disconnected"===self.status.state||"Offline"===self.status.state)}},isDisabled:{get:function(){return!self.connecting&&self.model.disabled}},webcamUrl:{get:function(){var url=self.model.config.webCamUrl;return url+(url.indexOf("?")>=0?"&":"?")+"cb="+self.cacheBuster}}}),$scope.$on("$StatusUpdate$",function(event,status){self.connecting=!1;var printerStatus=status[self.model.id];printerStatus&&(self.status=printerStatus,$scope.$digest())}),self.toggleZoom=function(){self.zoom=!self.zoom},self.tune=function(){tuneModal.open(self.model,self.status)},self.pause=function(){self.isPrinting&&controlService.pause(self.model.id)},self.resume=function(){self.isPaused&&controlService.resume(self.model.id)},self.cancel=function(){if(self.isPrinting){var confirm=$mdDialog.confirm().title("Cancel Print").textContent("Are you sure you want to cancel this print?").ok("Yes").cancel("No");$mdDialog.show(confirm).then(function(){controlService.cancel(self.model.id)},function(){})}},self.getActualTemp=function(tool){return getTemp(tool,"actual")},self.getTargetTemp=function(tool){return getTemp(tool,"target")}}],controllerAs:"printerCtrl"}});
angular.module("overseer").directive("resizer",["$window",function($window){"use strict";return{restict:"E",transclude:!0,template:"<div ng-transclude></div>",replace:!0,scope:{count:"=",output:"="},link:function(scope){function calculate(){var header=$window.document.getElementById("header"),availableHeight=body.clientHeight-Math.max(header.clientHeight,64),ratio=window.devicePixelRatio||1;if(body.clientWidth/ratio<960)width=100,height=body.clientWidth/(4/3);else{var rows=1;scope.count>2&&scope.count<=4?rows=2:scope.count>4&&(rows=Math.floor(scope.count/4)+(scope.count%4>0?1:0));var columns=Math.ceil(scope.count/rows);width=100/columns,height=rows>4?body.width/columns/(16/9):availableHeight/rows}}function onResize(){calculate(),scope.$digest()}var width,height,body=$window.document.body;scope.output={},Object.defineProperties(scope.output,{width:{get:function(){return width}},height:{get:function(){return height}}}),$window.addEventListener("resize",onResize),scope.$on("$destroy",function(){$window.removeEventListener("resize",onResize)}),calculate()}}}]);
angular.module("overseer").directive("match",function(){"use strict";return{require:["match","ngModel"],bindToController:{match:"="},link:function(scope,elem,attrs,ctrls){function validate(value){var isValid=ctrl.match===value;return ngModel.$setValidity("match",isValid),isValid?value:void 0}var ctrl=ctrls[0],ngModel=ctrls[1];ngModel.$parsers.unshift(validate),scope.$watch(function(){return ctrl.match},function(){validate(ngModel.$viewValue)})},controller:function(){}}});
angular.module("overseer").filter("duration",function(){"use strict";return function(value){if(!value)return"00:00:00";var d=Number(value),h=Math.floor(d/3600),m=Math.floor(d%3600/60),s=Math.floor(d%3600%60);return(h<100?("0"+h).slice(-2):h)+":"+("0"+m).slice(-2)+":"+("0"+s).slice(-2)}});
angular.module("overseer").service("authentication",["$q","$http","configuration",function($q,$http,configuration){"use strict";var self=this;Object.defineProperties(self,{activeUser:{get:function(){if(window.localStorage.activeUser)return JSON.parse(window.localStorage.activeUser)},set:function(value){value?window.localStorage.activeUser=JSON.stringify(value):delete window.localStorage.activeUser}},authToken:{get:function(){if(self.activeUser)return"Bearer "+self.activeUser.token}}}),self.login=function(user){return $q(function(resolve,reject){$http.post("/services/auth",user).then(function(result){self.activeUser=result.data,resolve()},function(error){reject(400===error.status?error.data:"An unknown error occurred.")})})},self.logout=function(){return $http.delete("/services/auth/logout").then(function(){self.activeUser=void 0,configuration.clearCache()})}}]);
angular.module("overseer").service("configuration",["$q","$http",function($q,$http){"use strict";function handleUserError(e){return 400===e.status&&e.data&&e.data.error?$q.reject(e.data.error):$q.reject("An Unknown Error Occurred")}var self=this,endpoint="/services/config",cache={printers:{}};self.clearCache=function(){cache={printers:{}}},self.getConfiguration=function(){return $http.get(endpoint+"/configuration").then(function(result){return angular.forEach(result.data.printers,function(printer){cache.printers[printer.id]=printer}),cache.settings=result.data.settings,cache.users=result.data.users,result.data})},self.getPrinters=function(){if(Object.keys(cache.printers).length){var printers=[];return angular.forEach(cache.printers,function(printer){printers.push(printer)}),$q.resolve(printers)}return $http.get(endpoint).then(function(result){return angular.forEach(result.data,function(printer){cache.printers[printer.id]=printer}),result.data})},self.getPrinter=function(printerId){return cache.printers[printerId]?$q.resolve(cache.printers[printerId]):$http.get(endpoint+"/"+printerId).then(function(result){return result.data})},self.createPrinter=function(printer){return $http.put(endpoint,printer).then(function(result){return cache.printers[result.data.id]=result.data,result.data})},self.updatePrinter=function(printer){return $http.post(endpoint,printer).then(function(result){return cache.printers[result.data.id]=result.data,result.data})},self.deletePrinter=function(printer){return $http.delete(endpoint+"/"+printer.id).then(function(){delete cache.printers[printer.id]})},self.getSettings=function(){return cache.settings?$q.resolve(cache.settings):$http.get(endpoint+"/settings").then(function(result){return cache.settings=result.data,result.data})},self.updateSettings=function(settings){return $http.post(endpoint+"/settings",settings).then(function(result){return cache.settings=result.data,result.data})},self.getUsers=function(){return cache.users&&$q.resolve(cache.users),$http.get(endpoint+"/users").then(function(result){return cache.users=result.data,result.data})},self.addUser=function(user){return $http.put(endpoint+"/users",user).then(function(result){return cache.users.push(result.data),result.data},handleUserError)},self.changeUserPassword=function(user){return $http.post(endpoint+"/users",user).then(function(result){return result.data},handleUserError)},self.removeUser=function(userId){return $http.delete(endpoint+"/users/"+userId).then(function(){var users=[];angular.forEach(cache.users,function(u){u.id!==userId&&users.push(u)}),cache.users=users})},self.logoutUser=function(userId){return $http.post(endpoint+"/logout/"+userId).then(function(result){for(var user=result.data,i=0;i<cache.users.length;i++){var u=cache.users[i];if(u.id===user.id)return angular.copy(user,u),u}})}}]);
angular.module("overseer").service("controlService",["$http",function($http){"use strict";var self=this,endpoint="/services/control/";self.pause=function(printerId){return $http.get(endpoint+printerId+"/pause")},self.resume=function(printerId){return $http.get(endpoint+printerId+"/resume")},self.cancel=function(printerId){return $http.get(endpoint+printerId+"/cancel")},self.setTemperature=function(printerId,tool,temp){return $http.get(endpoint+printerId+"/temp/"+tool+"/"+temp)},self.setFeedRate=function(printerId,feedRate){return $http.get(endpoint+printerId+"/feed/"+feedRate)},self.setFlowRate=function(printerId,tool,flowRate){return $http.get(endpoint+printerId+"/flow/"+tool+"/"+flowRate)},self.setFanSpeed=function(printerId,speed){return $http.get(endpoint+printerId+"/fan/"+speed)}}]);
angular.module("overseer").service("tuneModal",["$mdDialog",function($mdDialog){"use strict";this.open=function(printer,status){$mdDialog.show({controllerAs:"ctrl",controller:"tuneModalController",templateUrl:"modals/tune.html",clickOutsideToClose:!0,locals:{printer:printer,status:status}})}}]).controller("tuneModalController",["$scope","$mdDialog","controlService","printer","status",function($scope,$mdDialog,controlService,printer,status){"use strict";function lockUi(promise){return self.busy=!0,promise.then(function(){self.busy=!1})}var self=this;self.printer=printer,self.status=status,self.fanSpeed=0,self.feedRate=100,self.flowRates=_.map(printer.config.tools,function(){return 100}),self.ngModelOptions={debounce:400},$scope.$on("$StatusUpdate$",function(event,status){var printerStatus=status[self.printer.id];printerStatus&&(self.status=printerStatus,$scope.$digest())}),self.pause=function(){lockUi(controlService.pause(printer.id))},self.resume=function(){lockUi(controlService.resume(printer.id))},self.cancel=function(){var confirm=$mdDialog.confirm().title("Cancel Print").textContent("Are you sure you want to cancel this print?").ok("Yes").cancel("No").multiple(!0);$mdDialog.show(confirm).then(function(){lockUi(controlService.cancel(printer.id)).then(function(){self.hide()})},function(){})},self.increaseTemp=function(toolName){var tool=_.find(status.temperatures,{name:toolName});tool.target+=1,lockUi(controlService.setTemperature(printer.id,toolName,tool.target))},self.decreaseTemp=function(toolName){var tool=_.find(status.temperatures,{name:toolName});tool.target-=1,lockUi(controlService.setTemperature(printer.id,toolName,tool.target))},self.setFeedRate=function(){lockUi(controlService.setFeedRate(printer.id,self.feedRate))},self.setFlowRate=function(index){var toolName=self.printer.config.tools[index];lockUi(controlService.setFlowRate(printer.id,toolName,self.flowRates[index]))},self.setFanSpeed=function(){lockUi(controlService.setFanSpeed(printer.id,self.fanSpeed))},self.hide=function(){$mdDialog.hide()}}]);
angular.module("overseer").controller("indexController",["$q","$scope","configuration",function($q,$scope,configuration){"use strict";var self=this;self.loading=!0,$q.all({printers:configuration.getPrinters(),settings:configuration.getSettings()}).then(function(results){self.loading=!1,self.settings=results.settings,self.printers=self.settings.hideDisabledPrinters?_.filter(results.printers,{disabled:!1}):results.printers})}]);
angular.module("overseer").controller("loginController",["$location","authentication",function($location,authentication){"use strict";var self=this;self.user={},self.login=function(){self.loading=!0,self.error=void 0,authentication.login(self.user).then(function(){self.loading=!1,$location.path("/")},function(error){self.loading=!1,self.error=error})}}]);
angular.module("overseer").controller("addPrinterController",["$location","$mdToast","configuration",function($location,$mdToast,configuration){"use strict";var self=this;self.printerTypes=["Octoprint","RepRap"],self.model={},Object.defineProperty(self,"configTemplateUrl",{get:function(){if(self.model.printerType)return"views/configuration/"+self.model.printerType+".html"}}),self.addPrinter=function(){self.loading=!0,self.model.config.printerType=self.model.printerType,configuration.createPrinter(self.model).then(function(){self.loading=!1,$location.path("/configuration")},function(response){var toast=$mdToast.simple().textContent(response.data.error).position("bottom right").hideDelay(3e3).toastClass("toast-error");$mdToast.show(toast)})}}]);
angular.module("overseer").controller("addUserController",["$scope","$location","configuration",function($scope,$location,configuration){"use strict";var self=this;self.user={},self.lifetimes=[null,1,7,30,90],self.addUser=function(){self.loading=!0,configuration.addUser(self.user).then(function(){$location.path("/configuration")},function(e){self.error=e}).finally(function(){self.loading=!1})}}]);
angular.module("overseer").controller("editPrinterController",["$scope","$location","$routeParams","$mdDialog","$translate","configuration",function($scope,$location,$routeParams,$mdDialog,$translate,configurationService){"use strict";var self=this;self.loading=!0,configurationService.getPrinter($routeParams.id).then(function(printer){self.model=angular.copy(printer),self.currentName=printer.name,self.configTemplateUrl="views/configuration/"+self.model.printerType+".html",self.loading=!1}),self.updatePrinter=function(){self.loading=!0,configurationService.updatePrinter(self.model).then(function(){$location.path("/configuration")})},self.deletePrinter=function(){var confirm=$mdDialog.confirm().title($translate.instant("warning")).textContent($translate.instant("deletePrinterPrompt")).ok($translate.instant("yes")).cancel($translate.instant("no"));$mdDialog.show(confirm).then(function(){configurationService.deletePrinter(self.model).then(function(){$location.path("/configuration")})},function(){})}}]);
angular.module("overseer").controller("editUserController",["$location","$routeParams","$mdDialog","$translate","configuration","authentication",function($location,$routeParams,$mdDialog,$translate,configuration,authentication){"use strict";function gotoConfiguration(){$location.path("/configuration")}function handleError(e){self.error=e}function cancelLoading(){self.loading=!1}var self=this;self.loading=!0,self.lifetimes=[null,1,7,30,90],configuration.getSettings().then(function(settings){self.settings=settings}),configuration.getUsers().then(function(users){self.users=users;for(var i=0;i<users.length;i++){var user=users[i];if(user.id==$routeParams.id)return void(self.user=user)}}).finally(cancelLoading),self.logout=function(){self.user.id===authentication.activeUser.id?(authentication.logout(),$location.path("/login")):configuration.logoutUser(self.user.id).then(function(user){self.user=user})},self.changePassword=function(){return self.loading=!0,configuration.changePassword(self.user).then(gotoConfiguration,handleError).finally(cancelLoading)},self.deleteUser=function(){if(1===self.users.length&&self.settings.requiresAuthentication){var alert=$mdDialog.alert().title($translate.instant("warning")).textContent($translate.instant("deleteLastUserPrompt")).ok($translate.instant("dismiss"));$mdDialog.show(alert)}else{var confirm=$mdDialog.confirm().title($translate.instant("warning")).textContent($translate.instant("deleteUserPrompt")).ok($translate.instant("yes")).cancel($translate.instant("no"));$mdDialog.show(confirm).then(function(){return self.loading=!0,configuration.removeUser(self.user.id).then(gotoConfiguration,handleError).finally(cancelLoading)})}}}]);
angular.module("overseer").controller("configurationController",["$scope","$q","$mdDialog","$location","$translate","configuration","authentication",function($scope,$q,$mdDialog,$location,$translate,configurationService,authentication){"use strict";var self=this;self.intervals=[1e3,5e3,1e4,15e3,2e4],self.loading=!0,self.ready=!1,configurationService.getConfiguration().then(function(configuration){self.loading=!1,self.ready=!0,self.settingsPristine=configuration.settings,self.settings=angular.copy(configuration.settings),self.printers=configuration.printers,self.users=configuration.users}),self.updateSettings=function(){if(self.settings.requiresAuthentication&&!self.users.length){var confirm=$mdDialog.confirm().title($translate.instant("warning")).textContent($translate.instant("requiresAutnenticationPrompt")).ok($translate.instant("addUser")).cancel($translate.instant("cancel"));$mdDialog.show(confirm).then(function(){$location.path("/configuration/users/add")},function(){self.revertSettings()})}else self.loading=!0,configurationService.updateSettings(self.settings).then(function(updatedSettings){self.loading=!1,!self.settingsPristine.requiresAuthentication||updatedSettings.requiresAuthentication?self.settingsPristine.requiresAuthentication||!updatedSettings.requiresAuthentication?(self.settingsPristine=updatedSettings,self.settings=angular.copy(updatedSettings),self.settingsForm.$setPristine()):$location.path("/login"):authentication.logout()})},self.revertSettings=function(){self.settings=angular.copy(self.settingsPristine),self.settingsForm.$setPristine()}}]);
angular.module("overseer").run(["$templateCache",function($templateCache){$templateCache.put("directives/printer.html",'<div class="printer" ng-class="{ zoomed: printerCtrl.zoom }">\r\n    <div class="webcam" ng-if="printerCtrl.model.config.webCamUrl" ng-click="printerCtrl.toggleZoom()" style="background-image: url(\'{{printerCtrl.webcamUrl}}\');" />\r\n    <div class="content">\r\n        <md-progress-linear md-mode="determinate" value="{{ printerCtrl.status.progress }}" title="{{ printerCtrl.status.progress | number : 1 }}%"></md-progress-linear>\r\n        <div class="status">\r\n            <h2 ng-bind="printerCtrl.model.name"></h2>\r\n            <span class="state" ng-if="printerCtrl.connecting">\r\n                <span translate="connecting"></span>\r\n            </span>\r\n            <span class="state" ng-if="!printerCtrl.connecting && printerCtrl.model.disabled">\r\n                <span translate="disabled"></span>\r\n            </span>\r\n            <span class="state" ng-if="printerCtrl.status">\r\n                <span translate="{{ printerCtrl.status.state }}"></span>\r\n                <span ng-if="printerCtrl.isPrinting">\r\n                    (<span translate="remaining"></span>: <span ng-bind="printerCtrl.status.estimatedTimeRemaining | duration"></span>)\r\n                </span>\r\n            </span>\r\n        </div>\r\n        <div class="controls {{ printerCtrl.status.state }}" ng-class="{ active: printerCtrl.isPrinting || printerCtrl.isPaused }">\r\n            <md-button class="md-raised md-primary resume small" ng-click="printerCtrl.resume()">\r\n                <i class="fa fa-play"></i>\r\n            </md-button>\r\n            <md-button class="md-raised md-warn pause small" ng-click="printerCtrl.pause()">\r\n                <i class="fa fa-pause"></i>\r\n            </md-button>\r\n            <md-button class="md-raised cancel small dark" ng-click="printerCtrl.cancel()">\r\n                <i class="fa fa-stop"></i>\r\n            </md-button>\r\n            <md-button class="md-raised tune small dark" ng-click="printerCtrl.tune()">\r\n                <i class="fa fa-wrench"></i>\r\n            </md-button>\r\n        </div>\r\n        <div class="controls" ng-class="{ active: printerCtrl.isIdle || printerCtrl.isDisconnected }">\r\n            <md-button class="md-raised web-access small dark" href="{{ printerCtrl.model.config.url }}" target="_blank" title="{{ \'openWebsite\' | translate }}">\r\n                <i class="fa fa-external-link"></i>\r\n            </md-button>\r\n        </div>\r\n        <div class="controls" ng-class="{ active: printerCtrl.isDisabled }">\r\n            <md-button class="md-raised web-access small dark" href="/#!/configuration/edit/{{printerCtrl.model.id}}" title="{{ \'edit\' | translate }}">\r\n                <i class="fa fa-gear"></i>\r\n            </md-button>\r\n        </div>\r\n    </div>\r\n    <div class="temps" ng-if="!printerCtrl.isDisconnected">\r\n        <table class="temp-table" ng-repeat="tool in printerCtrl.model.config.tools">\r\n            <tbody>\r\n                <tr>\r\n                    <td ng-bind="tool"></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <span ng-bind="printerCtrl.getActualTemp(tool) | number : 0"></span> &deg;C /\r\n                        <span ng-bind="printerCtrl.getTargetTemp(tool) | number : 0"></span> &deg;C\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <table class="temp-table" ng-if="printerCtrl.model.config.heatedBed">\r\n            <tbody>\r\n                <tr>\r\n                    <td translate="bed"></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <span ng-bind="printerCtrl.getActualTemp(\'bed\') | number : 0"></span> &deg;C /\r\n                        <span ng-bind="printerCtrl.getTargetTemp(\'bed\') | number : 0"></span> &deg;C\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</div>'),$templateCache.put("modals/tune.html",'<md-dialog class="tune" flex-gt-md="40" flex="80">\r\n    <md-toolbar class="md-hue-2">\r\n        <div class="md-toolbar-tools">\r\n            <div flex>\r\n                <h2>{{ ctrl.printer.name }}</h2>\r\n                <span class="status" translate="{{ ctrl.status.state }}"></span>\r\n            </div>\r\n            <a class="action-button" ng-if="ctrl.printer.config.url" href="{{ ctrl.printer.config.url }}" target="_blank">\r\n                <span translate="openWebsite"></span>\r\n                <i class="fa fa-external-link"></i>\r\n            </a>\r\n        </div>\r\n    </md-toolbar>\r\n    <md-dialog-content>\r\n        <div layout="row" class="progress">\r\n            <div flex>\r\n                <h5 translate="Progress"></h5>\r\n                <md-progress-linear md-mode="determinate" value="{{ ctrl.status.progress }}" title="{{ ctrl.status.progress }}%"></md-progress-linear>\r\n                <div layout>\r\n                    <span class="elapsed-time" flex="50">\r\n                        <span class="time-label"><span translate="elapsed"></span>:</span>\r\n                        {{ ctrl.status.elapsedPrintTime | duration }}\r\n                    </span>\r\n                    <span class="estimated-time" flex="50">\r\n                        <span class="time-label"><span translate="estimated"></span>: </span>                        \r\n                        {{ ctrl.status.estimatedTimeRemaining | duration }}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <div class="print-actions">\r\n                <md-button class="md-raised md-primary small" ng-if="ctrl.status.state === \'Paused\'" ng-click="ctrl.resume()">\r\n                    <i class="fa fa-play"></i>\r\n                </md-button>\r\n                <md-button class="md-raised md-warn small" ng-if="ctrl.status.state === \'Printing\'" ng-click="ctrl.pause()">\r\n                    <i class="fa fa-pause"></i>\r\n                </md-button>\r\n                <md-button class="md-raised small light" ng-click="ctrl.cancel()">\r\n                    <i class="fa fa-stop"></i>\r\n                </md-button>\r\n            </div>\r\n        </div>\r\n        <div layout-gt-sm="row" layout-xs="column">\r\n            <div flex flex-sm="100">\r\n                <table class="temp-table">\r\n                    <tbody>\r\n                        <tr ng-repeat="temp in ctrl.status.temperatures">\r\n                            <th ng-bind="temp.name"></th>\r\n                            <td class="actual-temp" ng-class="{ warm: (temp.actual / temp.target > 0.5), hot: (temp.actual / temp.target > 0.85) }">\r\n                                {{ temp.actual | number : 1 }} &deg;C\r\n                            </td>\r\n                            <td>\r\n                                <md-button class="md-raised smaller" ng-click="ctrl.decreaseTemp(temp.name)">\r\n                                    <i class="fa fa-minus"></i>\r\n                                </md-button>\r\n                                <span class="target-temp">\r\n                                    {{ temp.target | number : 0 }} &deg;C\r\n                                </span> \r\n                                <md-button class="md-raised smaller" ng-click="ctrl.increaseTemp(temp.name)">\r\n                                    <i class="fa fa-plus"></i>\r\n                                </md-button>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div flex flex-sm="100" class="controls">\r\n                <table>\r\n                    <tbody>\r\n                    <tr>\r\n                        <th translate="fanSpeed"></th>\r\n                        <td>\r\n                            <md-slider class="md-primary" flex md-discrete ng-model="ctrl.fanSpeed" ng-model-options="ctrl.ngModelOptions" ng-change="ctrl.setFanSpeed()" step="1" min="0" max="100"></md-slider>\r\n                        </td>\r\n                        <td>\r\n                            {{ ctrl.fanSpeed }}%\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th translate="feedRate"></th>\r\n                        <td>                            \r\n                            <md-slider class="md-primary" flex md-discrete ng-model="ctrl.feedRate" ng-model-options="ctrl.ngModelOptions" ng-change="ctrl.setFeedRate()" step="1" min="50" max="150"></md-slider>\r\n                        </td>\r\n                        <td>\r\n                            {{ ctrl.feedRate }}%\r\n                        </td>\r\n                    </tr>\r\n                    <tr ng-repeat="tool in ctrl.printer.config.tools">\r\n                        <th>\r\n                            <span translate="flowRate"></span> <span class="tool-name" ng-if="ctrl.printer.config.tools.length > 1">" {{tool}}</span>\r\n                        </th>\r\n                        <td>\r\n                            <md-slider class="md-primary" flex md-discrete ng-model="ctrl.flowRates[$index]" ng-model-options="ctrl.ngModelOptions" ng-change="ctrl.setFlowRate($index)" step="1" min="75" max="125"></md-slider>\r\n                        </td>\r\n                        <td>\r\n                            {{ ctrl.flowRates[$index] }}%\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    </md-dialog-content>\r\n    <md-dialog-actions layout="row" layout-align="end center">\r\n        <md-button ng-click="ctrl.hide()">\r\n            <span translate="dismiss"></span>\r\n        </md-button>\r\n    </md-dialog-actions>\r\n</md-dialog>'),$templateCache.put("views/index.html",'<div>\r\n    <div ng-if="!ctrl.loading && ctrl.printers.length">\r\n        <resizer count="ctrl.printers.length" output="ctrl.resizer">\r\n            <printer ng-repeat="printer in ctrl.printers" model="printer" style="width: {{ ctrl.resizer.width }}%; height: {{ ctrl.resizer.height }}px"></printer>\r\n        </resizer>\r\n    </div>\r\n    <div class="no-printers" ng-if="!ctrl.loading && !ctrl.printers.length">\r\n        <p translate="noPrinter"></p>\r\n        <p>\r\n            <md-button href="/#!/configuration/printers/add">\r\n                <span translate="noPrintersAddPrinter"></span>                \r\n            </md-button>\r\n            <md-button href="/#!/configuration">\r\n                <span translate="noPrintersEditPrinters"></span>\r\n            </md-button>\r\n        </p>\r\n    </div>\r\n</div>'),$templateCache.put("views/login.html",'<form name="loginForm" ng-disabled="ctrl.loading" novalidate>\r\n    <md-card flex-gt-sm="50" flex-offset-gt-sm="25">\r\n        <md-card-title>\r\n            <md-card-title-text>\r\n                <span class="md-headline" translate="login"></span>\r\n            </md-card-title-text>\r\n        </md-card-title>\r\n        <md-card-content>\r\n            <md-input-container ng-if="ctrl.error">\r\n                <div class="error" ng-bind="ctrl.error"></div>\r\n            </md-input-container>            \r\n            <md-input-container class="md-block">\r\n                <label translate="username"></label>\r\n                <input ng-model="ctrl.user.username" title="{{ username | translate }}" required/>\r\n            </md-input-container>\r\n            <md-input-container class="md-block">\r\n                <label translate="password"></label>\r\n                <input type="password" ng-model="ctrl.user.password" title="{{ password | translate }}" required/>\r\n            </md-input-container>\r\n        </md-card-content>\r\n        <md-card-actions layout="row" layout-align="end center">\r\n            <md-button type="submit" class="md-primary" ng-click="ctrl.login()" ng-disabled="ctrl.loading || loginForm.$pristine || loginForm.$invalid">\r\n                <span translate="login"></span>\r\n            </md-button>\r\n        </md-card-actions>\r\n    </md-card>\r\n</form>'),$templateCache.put("views/configuration/add.html",'\r\n<form name="ctrl.addForm" class="form-vertical" novalidate>\r\n    <md-card flex-gt-sm="50" flex-offset-gt-sm="25">\r\n        <md-card-title>\r\n            <md-card-title-text>\r\n                <span class="md-headline" translate="addPrinter"></span>\r\n            </md-card-title-text>\r\n        </md-card-title>\r\n        <md-card-content>\r\n            <md-input-container class="md-block">\r\n                <label translate="printerType"></label>\r\n                <md-select ng-model="ctrl.model.printerType" ng-disabled="ctrl.printerTypes.length === 1" required>\r\n                    <md-option ng-repeat="type in ctrl.printerTypes" value="{{type}}">\r\n                        {{ type | translate }}\r\n                    </md-option>\r\n                </md-select>\r\n            </md-input-container>\r\n            <md-input-container class="md-block" ng-if="ctrl.model.printerType">\r\n                <label translate="name"></label>\r\n                <input ng-model="ctrl.model.name" required />\r\n            </md-input-container>\r\n            <ng-include ng-if="ctrl.configTemplateUrl" src="ctrl.configTemplateUrl"></ng-include>\r\n        </md-card-content>\r\n        <md-card-actions layout="row" layout-align="end center">\r\n            <md-button href="/#!/configuration" translate="cancel"></md-button>\r\n            <md-button type="submit" class="md-primary" ng-click="ctrl.addPrinter()" ng-disabled="ctrl.addForm.$pristine || ctrl.addForm.$invalid" translate="save"></md-button>\r\n        </md-card-actions>\r\n    </md-card>\r\n</form>'),$templateCache.put("views/configuration/addUser.html",'<form name="ctrl.addForm" novalidate>\r\n    <md-card flex-gt-sm="50" flex-offset-gt-sm="25">\r\n        <md-card-title>\r\n            <md-card-title-text>\r\n                <span class="md-headline">\r\n                    {{ \'add\' | translate }} {{ \'user\' | translate }}\r\n                </span>\r\n            </md-card-title-text>\r\n        </md-card-title>\r\n        <md-card-content>\r\n            <md-input-container ng-if="ctrl.error">\r\n                <div class="error" ng-bind="ctrl.error"></div>\r\n            </md-input-container>\r\n            <md-input-container class="md-block">\r\n                <label translate="username"></label>\r\n                <input type="text" ng-model="ctrl.user.username" min="8" required />\r\n            </md-input-container>\r\n            <md-input-container class="md-block">\r\n                <label translate="passwordEdit"></label>\r\n                <input type="password" ng-model="ctrl.user.password" min="8" required />\r\n            </md-input-container>\r\n            <md-input-container class="md-block">\r\n                <label translate="confirmPassword"></label>\r\n                <input type="password" ng-model="ctrl.user.passwordMatch" match="ctrl.user.password" required />\r\n            </md-input-container> \r\n            <md-input-container class="md-block">\r\n                <label translate="sessionLifetime"></label>\r\n                <md-select ng-model="ctrl.user.sessionLifetime" title="{{ sessionLifetimeTitle | translate }}">\r\n                    <md-option ng-repeat="lifetime in ctrl.lifetimes" ng-value="lifetime">\r\n                        <text ng-if="lifetime">{{ lifetime }} {{ \'days\' | translate }}</text>\r\n                        <text ng-if="!lifetime">{{ \'indefinite\' | translate }}</text>\r\n                    </md-option>\r\n                </md-select>\r\n            </md-input-container> \r\n        </md-card-content>\r\n        <md-card-actions layout="row" layout-align="end center">\r\n            <md-button href="/#!/configuration" translate="cancel"></md-button>\r\n            <md-button type="submit" class="md-primary" ng-click="ctrl.addUser()" ng-disabled="ctrl.addForm.$pristine || ctrl.addForm.$invalid || ctrl.loading" translate="save"></md-button>\r\n        </md-card-actions>\r\n    </md-card>\r\n</form>'),$templateCache.put("views/configuration/edit.html",'<form name="editForm" novalidate>\r\n    <md-card flex-gt-sm="50" flex-offset-gt-sm="25">\r\n        <md-card-title>\r\n            <md-card-title-text>\r\n                <span class="md-headline">{{ \'editing\' | translate }} {{ ctrl.currentName }}</span>\r\n            </md-card-title-text>\r\n        </md-card-title>\r\n        <md-card-content>\r\n            <md-input-container class="md-block">\r\n                <label translate="name"></label>\r\n                <input ng-model="ctrl.model.name" required />\r\n            </md-input-container>\r\n\r\n            <ng-include src="ctrl.configTemplateUrl"></ng-include>\r\n\r\n            <md-input-container class="md-block">\r\n                <md-switch class="md-primary" ng-model="ctrl.model.disabled" title="{{ \'disableMonitoringTitle\' | translate }}">\r\n                    <span translate="disableMonitoring"></span>\r\n                </md-switch>\r\n            </md-input-container>\r\n        </md-card-content>\r\n        <md-card-actions layout="row" layout-align="end center">\r\n            <div flex>\r\n                <md-button flex class="md-raised md-warn md-hue-2" ng-click="ctrl.deletePrinter()">\r\n                    <span translate="delete"></span>\r\n                </md-button>\r\n            </div>\r\n            <md-button href="/#!/configuration"><span translate="cancel"></span></md-button>\r\n            <md-button type="submit" class="md-primary" ng-click="ctrl.updatePrinter()" ng-disabled="editForm.$pristine || editForm.$invalid">\r\n                <span translate="save"></span>\r\n            </md-button>\r\n        </md-card-actions>\r\n    </md-card>\r\n</form>\r\n'),$templateCache.put("views/configuration/editUser.html",'<form name="ctrl.addForm" novalidate>\r\n    <md-card flex-gt-sm="50" flex-offset-gt-sm="25">\r\n        <md-card-title>\r\n            <md-card-title-text>\r\n                <span class="md-headline">\r\n                    {{ \'editing\' | translate }} {{ \'user\' | translate }} \'{{ ctrl.user.username }}\'\r\n                </span>\r\n            </md-card-title-text>\r\n        </md-card-title>\r\n\r\n        <md-card-content>\r\n            <md-input-container ng-if="ctrl.error">\r\n                <div class="error" ng-bind="ctrl.error"></div>\r\n            </md-input-container>\r\n            <md-input-container class="md-block">\r\n                <label translate="passwordEdit"></label>\r\n                <input type="password" ng-model="ctrl.user.password" min="8" />\r\n            </md-input-container>\r\n            <md-input-container class="md-block">\r\n                <label translate="confirmPassword"></label>\r\n                <input type="password" ng-model="ctrl.user.passwordMatch" match="ctrl.user.password" />\r\n            </md-input-container>\r\n            <md-input-container class="md-block">\r\n                <label translate="sessionLifetime"></label>\r\n                <md-select ng-model="ctrl.user.sessionLifetime" title="{{ sessionLifetimeTitle | translate }}">\r\n                    <md-option ng-repeat="lifetime in ctrl.lifetimes" ng-value="lifetime">\r\n                        <text ng-if="lifetime">{{ lifetime }} {{ \'days\' | translate }}</text>\r\n                        <text ng-if="!lifetime">{{ \'indefinite\' | translate }}</text>\r\n                    </md-option>\r\n                </md-select>\r\n            </md-input-container>\r\n        </md-card-content>\r\n\r\n        <md-card-actions layout="row" layout-align="end center">\r\n            <div flex>\r\n                <md-button flex class="md-raised md-warn md-hue-2" ng-click="ctrl.deleteUser()">\r\n                    <span translate="delete"></span>\r\n                </md-button>\r\n                <md-button ng-if="ctrl.user.isLoggedIn" ng-click="ctrl.logout()" translate="logout"></md-button>\r\n            </div>\r\n            <md-button href="/#!/configuration" translate="cancel"></md-button>\r\n            <md-button type="submit" class="md-primary" ng-click="ctrl.changePassword()" ng-disabled="ctrl.addForm.$pristine || ctrl.addForm.$invalid || ctrl.loading" translate="save"></md-button>\r\n        </md-card-actions>\r\n    </md-card>\r\n</form>'),$templateCache.put("views/configuration/index.html",'<md-card class="configuration" ng-if="ctrl.ready" flex-gt-sm="50" flex-offset-gt-sm="25">\r\n    <md-card-content>\r\n        <md-tabs md-dynamic-height md-border-bottom>\r\n            <md-tab label="{{ \'generalSettings\' | translate }}">\r\n                <form name="ctrl.settingsForm" ng-disabled="ctrl.loading">\r\n                    <br />\r\n                    <md-input-container class="md-block">\r\n                        <label translate="pollInterval"></label>\r\n                        <md-select ng-model="ctrl.settings.interval" required title="{{ \'pollIntervalTitle\' | translate }}">\r\n                            <md-option ng-repeat="interval in ctrl.intervals" ng-value="interval">\r\n                                {{ interval / 1000 }} {{ \'seconds\' | translate }}\r\n                            </md-option>\r\n                        </md-select>\r\n                    </md-input-container>\r\n                    <md-input-container class="md-block">\r\n                        <label translate="localPort"></label>\r\n                        <input type="number" required ng-model="ctrl.settings.localPort" title="{{ \'localPortTitle\' | translate }}"/>\r\n                    </md-input-container>\r\n                    <md-input-container class="md-block">\r\n                        <md-switch class="md-primary" ng-model="ctrl.settings.hideDisabledPrinters" title="{{ \'hideUnmonitoredTitle\' | translate }}">\r\n                            <span translate="hideUnmonitored"></span>\r\n                        </md-switch>\r\n                    </md-input-container>\r\n                    <md-input-container class="md-block">\r\n                        <md-switch class="md-primary" ng-model="ctrl.settings.requiresAuthentication" title="{{ \'requiresAuthenticationTitle\' | translate }}">\r\n                            <span translate="requiresAuthentication"></span>\r\n                        </md-switch>\r\n                    </md-input-container>\r\n                    <div class="actions" layout="row" layout-align="end center">\r\n                        <md-button class="" ng-click="ctrl.revertSettings()" ng-disabled="ctrl.settingsForm.$pristine">\r\n                            <span translate="cancel"></span>\r\n                        </md-button>\r\n                        <md-button type="submit" class="md-primary" ng-click="ctrl.updateSettings()" ng-disabled="ctrl.settingsForm.$pristine || ctrl.settingsForm.$invalid">\r\n                            <span translate="save"></span>\r\n                        </md-button>\r\n                    </div>\r\n                </form>\r\n            </md-tab>\r\n            <md-tab label="{{ \'users\' | translate }}">\r\n                <table class="user-table">\r\n                    <thead>\r\n                        <tr>\r\n                            <th translate="username"></th>\r\n                            <th translate="sessionLifetime"></th>\r\n                            <th translate="isLoggedIn"></th>\r\n                            <th>\r\n                                <md-button href="/#!/configuration/users/add">\r\n                                    <i class="fa fa-plus"></i>\r\n                                    <span translate="add"></span>\r\n                                </md-button>\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr ng-repeat="user in ctrl.users">\r\n                            <td ng-bind="user.username"></td>\r\n                            <td>\r\n                                <span ng-if="user.sessionLifetime">{{ user.sessionLifetime }} <span translate="days"></span></span>\r\n                                <span ng-if="!user.sessionLifetime" translate="indefinite"></span>\r\n                            </td>\r\n                            <td>\r\n                                <i ng-if="user.isLoggedIn" class="fa fa-check" title="{{ \'isLoggedInTitle\' | translate }}"></i>\r\n                            </td>                            \r\n                            <td>\r\n                                <md-button href="/#!/configuration/users/edit/{{ user.id }}">\r\n                                    <i class="fa fa-edit"></i>\r\n                                    <span translate="edit"></span>\r\n                                </md-button>\r\n                            </td>\r\n                        </tr>\r\n                        <tr class="empty-row" ng-if="!ctrl.users.length">\r\n                            <td colspan="3" translate="noUsers"></td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </md-tab>\r\n            <md-tab label="{{ \'printers\' | translate }}">\r\n                <table class="printers-table">\r\n                    <thead>\r\n                        <tr>\r\n                            <th translate="name"></th>\r\n                            <th translate="printerType"></th>\r\n                            <th translate="monitoringEnabled"></th>\r\n                            <th>\r\n                                <md-button href="/#!/configuration/printers/add">\r\n                                    <i class="fa fa-plus"></i>\r\n                                    <span translate="add"></span>\r\n                                </md-button>\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr ng-repeat="printer in ctrl.printers">\r\n                            <td ng-bind="printer.name"></td>\r\n                            <td ng-bind="printer.printerType"></td>\r\n                            <td>\r\n                                <i ng-if="printer.disabled" class="fa fa-exclamation-triangle" title="{{ \'monitoringDisabled\' | translate }}"></i>\r\n                                <i ng-if="!printer.disabled" class="fa fa-check" title="{{ \'monitoringEnabled\' | translate }}"></i>\r\n                            </td>\r\n                            <td>\r\n                                <md-button href="/#!/configuration/printers/edit/{{printer.id}}">\r\n                                    <i class="fa fa-edit"></i>\r\n                                    <span translate="edit"></span>\r\n                                </md-button>\r\n                            </td>\r\n                        </tr>\r\n                        <tr class="empty-row" ng-if="!ctrl.printers.length">\r\n                            <td colspan="4" translate="noPrinters"></td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </md-tab>\r\n        </md-tabs>\r\n    </md-card-content>\r\n</md-card>'),$templateCache.put("views/configuration/Octoprint.html",'<md-input-container class="md-block">\r\n    <label translate="url"></label>\r\n    <input ng-model="ctrl.model.config.url" required />\r\n</md-input-container>\r\n<md-input-container class="md-block">\r\n    <label translate="apiKey"></label>\r\n    <input ng-model="ctrl.model.config.apiKey" required />\r\n</md-input-container>\r\n\r\n\x3c!-- \r\n    If there is an ID the user is editing\r\n    Allow the user to select a profile (currently not used)\r\n    Also expose the webcam and snapshot (currently not used) urls so the user can resolve potential parse errors. \r\n--\x3e\r\n<md-input-container class="md-block" ng-if="ctrl.model.id">\r\n    <label translate="profile"></label>\r\n    <md-select ng-model="ctrl.model.config.profile" ng-model-options="{trackBy: \'$value.id\'}" required title="{{ \'profileTitle\' | translate }}">\r\n        <md-option ng-repeat="profile in ctrl.model.config.availableProfiles" ng-value="profile">\r\n            {{ profile.name }}\r\n        </md-option>\r\n    </md-select>\r\n</md-input-container>\r\n\r\n<md-input-container class="md-block" ng-if="ctrl.model.id">\r\n    <label translate="webcamUrl"></label>\r\n    <input ng-model="ctrl.model.config.webCamUrl" required />\r\n</md-input-container>\r\n\r\n<md-input-container class="md-block" ng-if="ctrl.model.id">\r\n    <label translate="snapshotUrl"></label>\r\n    <input ng-model="ctrl.model.config.snapshotUrl" required />\r\n</md-input-container>'),$templateCache.put("views/configuration/RepRap.html",'<md-input-container class="md-block">\r\n    <label translate="url"></label>\r\n    <input ng-model="ctrl.model.config.url" required />\r\n</md-input-container>\r\n\r\n<md-input-container class="md-block">\r\n    <label translate="webcamUrl"></label>\r\n    <input ng-model="ctrl.model.config.webCamUrl" required />\r\n</md-input-container>\r\n\r\n<md-input-container class="md-block">\r\n    <label translate="snapshotUrl"></label>\r\n    <input ng-model="ctrl.model.config.snapshotUrl" required />\r\n</md-input-container>\r\n\r\n\x3c!--<md-input-container ng-if="ctrl.requiresRepRapPassword" class="md-block">\r\n    <label translate="password"></label>\r\n    <input type="password" ng-model="ctrl.model.config.password" required />\r\n</md-input-container>\r\n<md-input-container class="md-block">\r\n    <md-switch class="md-primary" ng-model="ctrl.requiresRepRapPassword">\r\n        <span translate="requiresPassword"></span>\r\n    </md-switch>\r\n</md-input-container>--\x3e\r\n')}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImxvY2FsZXMuanMiLCJkaXJlY3RpdmVzL3ByaW50ZXIuanMiLCJkaXJlY3RpdmVzL3Jlc2l6ZXIuanMiLCJkaXJlY3RpdmVzL3ZhbGlkYXRvcnMuanMiLCJmaWx0ZXJzL2R1cmF0aW9uLmpzIiwic2VydmljZXMvYXV0aGVudGljYXRpb24uanMiLCJzZXJ2aWNlcy9jb25maWd1cmF0aW9uLmpzIiwic2VydmljZXMvY29udHJvbC5qcyIsIm1vZGFscy90dW5lLmpzIiwidmlld3MvaW5kZXguanMiLCJ2aWV3cy9sb2dpbi5qcyIsInZpZXdzL2NvbmZpZ3VyYXRpb24vYWRkLmpzIiwidmlld3MvY29uZmlndXJhdGlvbi9hZGRVc2VyLmpzIiwidmlld3MvY29uZmlndXJhdGlvbi9lZGl0LmpzIiwidmlld3MvY29uZmlndXJhdGlvbi9lZGl0VXNlci5qcyIsInZpZXdzL2NvbmZpZ3VyYXRpb24vaW5kZXguanMiLCJ0ZW1wbGF0ZXMuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwiJG1kVGhlbWluZ1Byb3ZpZGVyIiwiJGh0dHBQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJjb250cm9sbGVyQXMiLCJvdGhlcndpc2UiLCJkZWZpbmVQYWxldHRlIiwiNTAiLCIxMDAiLCIyMDAiLCIzMDAiLCI0MDAiLCI1MDAiLCI2MDAiLCI3MDAiLCI4MDAiLCI5MDAiLCJBMTAwIiwiQTIwMCIsIkE0MDAiLCJBNzAwIiwiY29udHJhc3REZWZhdWx0Q29sb3IiLCJjb250cmFzdERhcmtDb2xvcnMiLCJjb250cmFzdExpZ2h0Q29sb3JzIiwidGhlbWUiLCJwcmltYXJ5UGFsZXR0ZSIsImRlZmF1bHQiLCJhY2NlbnRQYWxldHRlIiwiZGFyayIsImVuYWJsZUJyb3dzZXJDb2xvciIsImludGVyY2VwdG9ycyIsInB1c2giLCIkcSIsIiRsb2NhdGlvbiIsInN0YXJ0TG9hZGVyIiwiYWN0aXZlUmVxdWVzdCIsIk5Qcm9ncmVzcyIsInN0YXJ0IiwidGltZW91dCIsInNldFRpbWVvdXQiLCJzdG9wTG9hZGVyIiwiY2xlYXJUaW1lb3V0IiwiZG9uZSIsInJlcXVlc3QiLCJ3aW5kb3ciLCJsb2NhbFN0b3JhZ2UiLCJhY3RpdmVVc2VyIiwidXNlciIsIkpTT04iLCJwYXJzZSIsImhlYWRlcnMiLCJBdXRob3JpemF0aW9uIiwidG9rZW4iLCJyZXNwb25zZSIsInJlc3BvbnNlRXJyb3IiLCJzdGF0dXMiLCJwYXRoIiwicmVqZWN0IiwiJHJvb3RTY29wZSIsImF1dGhlbnRpY2F0aW9uIiwiY29uZmlndXJhdGlvbiIsInVuc3Vic2NyaWJlRnJvbVN0YXR1c1VwZGF0ZXMiLCIkIiwiY29ubmVjdGlvbiIsImh1YiIsIm1vbml0b3JpbmdFbmFibGVkIiwic3RvcCIsInN1YnNjcmliZVRvU3RhdHVzVXBkYXRlcyIsInN0YXR1c0h1YiIsInNlcnZlciIsInN0YXJ0TW9uaXRvcmluZyIsInRoZW4iLCJlbmFibGVkIiwic2VsZiIsInRoaXMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0aWVzIiwic2hvd01lbnUiLCJnZXQiLCJhdXRoVG9rZW4iLCJsb2dvdXQiLCJ1cmwiLCJjbGllbnQiLCJzdGF0dXNVcGRhdGUiLCIkYnJvYWRjYXN0IiwiJHdhdGNoIiwiY3VycmVudCIsInByZXZpb3VzIiwiY2xlYXJDYWNoZSIsIiR0cmFuc2xhdGVQcm92aWRlciIsInRyYW5zbGF0aW9ucyIsImFkZCIsImVkaXQiLCJlZGl0aW5nIiwic2F2ZSIsImNhbmNlbCIsImRlbGV0ZSIsImNvbmZpcm0iLCJkaXNtaXNzIiwicHJpbnRlcnMiLCJub1ByaW50ZXIiLCJub1ByaW50ZXJzIiwibm9Vc2VycyIsIm5vUHJpbnRlcnNBZGRQcmludGVyIiwibm9QcmludGVyc0VkaXRQcmludGVycyIsImdlbmVyYWxTZXR0aW5ncyIsInNldHRpbmdzIiwicG9sbEludGVydmFsIiwicG9sbEludGVydmFsVGl0bGUiLCJzZWNvbmRzIiwibG9jYWxQb3J0IiwibG9jYWxQb3J0VGl0bGUiLCJoaWRlVW5tb25pdG9yZWQiLCJoaWRlVW5tb25pdG9yZWRUaXRsZSIsIm5hbWUiLCJwcmludGVyVHlwZSIsIm1vbml0b3JpbmdEaXNhYmxlZCIsImRpc2FibGVNb25pdG9yaW5nIiwiZGlzYWJsZU1vbml0b3JpbmdUaXRsZSIsIndlYmNhbVVybCIsInNuYXBzaG90VXJsIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInBhc3N3b3JkRWRpdCIsImNvbmZpcm1QYXNzd29yZCIsInJlcXVpcmVzUGFzc3dvcmQiLCJhcGlLZXkiLCJwcm9maWxlIiwicHJvZmlsZVRpdGxlIiwiYWRkUHJpbnRlciIsIm9wZW5XZWJzaXRlIiwicHJvZ3Jlc3MiLCJlbGFwc2VkIiwiZXN0aW1hdGVkIiwiZmVlZFJhdGUiLCJmYW5TcGVlZCIsImZsb3dSYXRlIiwicmVtYWluaW5nIiwiY29ubmVjdGluZyIsImRpc2FibGVkIiwiYmVkIiwiT2ZmbGluZSIsIklkbGUiLCJQcmludGluZyIsIlBhdXNlZCIsIk9jdG9wcmludCIsIlJlcFJhcCIsInJlcXVpcmVzQXV0aGVudGljYXRpb25UaXRsZSIsInJlcXVpcmVzQXV0aGVudGljYXRpb24iLCJyZXF1aXJlc0F1dG5lbnRpY2F0aW9uUHJvbXB0Iiwic2Vzc2lvbkxpZmV0aW1lVGl0bGUiLCJzZXNzaW9uTGlmZXRpbWUiLCJkYXlzIiwiaW5kZWZpbml0ZSIsImxvZ2luIiwidXNlcnMiLCJhZGRVc2VyIiwiaXNMb2dnZWRJbiIsImlzTG9nZ2VkSW5UaXRsZSIsIndhcm5pbmciLCJ5ZXMiLCJubyIsImRlbGV0ZVByaW50ZXJQcm9tcHQiLCJkZWxldGVVc2VyUHJvbXB0IiwiZGVsZXRlTGFzdFVzZXJQcm9tcHQiLCJwcmVmZXJyZWRMYW5ndWFnZSIsImRpcmVjdGl2ZSIsInJlc3RyaWN0Iiwic2NvcGUiLCJyZXBsYWNlIiwiYmluZFRvQ29udHJvbGxlciIsIm1vZGVsIiwiJHNjb3BlIiwiY29udHJvbFNlcnZpY2UiLCIkbWREaWFsb2ciLCJ0dW5lTW9kYWwiLCJnZXRUZW1wIiwidG9vbCIsInRlbXBQcm9wZXJ0eSIsInRlbXBlcmF0dXJlcyIsImNhY2hlQnVzdGVyIiwiRGF0ZSIsIm5vdyIsImlzUHJpbnRpbmciLCJzdGF0ZSIsImlzUGF1c2VkIiwiaXNJZGxlIiwiaXNEaXNjb25uZWN0ZWQiLCJpc0Rpc2FibGVkIiwid2ViQ2FtVXJsIiwiaW5kZXhPZiIsIiRvbiIsImV2ZW50IiwicHJpbnRlclN0YXR1cyIsImlkIiwiJGRpZ2VzdCIsInRvZ2dsZVpvb20iLCJ6b29tIiwidHVuZSIsIm9wZW4iLCJwYXVzZSIsInJlc3VtZSIsInRpdGxlIiwidGV4dENvbnRlbnQiLCJvayIsInNob3ciLCJnZXRBY3R1YWxUZW1wIiwiZ2V0VGFyZ2V0VGVtcCIsIiR3aW5kb3ciLCJyZXN0aWN0IiwidHJhbnNjbHVkZSIsInRlbXBsYXRlIiwiY291bnQiLCJvdXRwdXQiLCJsaW5rIiwiY2FsY3VsYXRlIiwiaGVhZGVyIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImF2YWlsYWJsZUhlaWdodCIsImJvZHkiLCJjbGllbnRIZWlnaHQiLCJNYXRoIiwibWF4IiwicmF0aW8iLCJkZXZpY2VQaXhlbFJhdGlvIiwiY2xpZW50V2lkdGgiLCJ3aWR0aCIsImhlaWdodCIsInJvd3MiLCJmbG9vciIsImNvbHVtbnMiLCJjZWlsIiwib25SZXNpemUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlcXVpcmUiLCJtYXRjaCIsImVsZW0iLCJhdHRycyIsImN0cmxzIiwidmFsaWRhdGUiLCJ2YWx1ZSIsImlzVmFsaWQiLCJjdHJsIiwibmdNb2RlbCIsIiRzZXRWYWxpZGl0eSIsInVuZGVmaW5lZCIsIiRwYXJzZXJzIiwidW5zaGlmdCIsIiR2aWV3VmFsdWUiLCJmaWx0ZXIiLCJkIiwiTnVtYmVyIiwiaCIsIm0iLCJzIiwic2xpY2UiLCJzZXJ2aWNlIiwiJGh0dHAiLCJzZXQiLCJzdHJpbmdpZnkiLCJyZXNvbHZlIiwicG9zdCIsInJlc3VsdCIsImRhdGEiLCJlcnJvciIsImVuZHBvaW50IiwiaGFuZGxlVXNlckVycm9yIiwiZSIsImNhY2hlIiwiZ2V0Q29uZmlndXJhdGlvbiIsImZvckVhY2giLCJwcmludGVyIiwiZ2V0UHJpbnRlcnMiLCJrZXlzIiwibGVuZ3RoIiwiZ2V0UHJpbnRlciIsInByaW50ZXJJZCIsImNyZWF0ZVByaW50ZXIiLCJwdXQiLCJ1cGRhdGVQcmludGVyIiwiZGVsZXRlUHJpbnRlciIsImdldFNldHRpbmdzIiwidXBkYXRlU2V0dGluZ3MiLCJnZXRVc2VycyIsImNoYW5nZVVzZXJQYXNzd29yZCIsInJlbW92ZVVzZXIiLCJ1c2VySWQiLCJ1IiwibG9nb3V0VXNlciIsImkiLCJjb3B5Iiwic2V0VGVtcGVyYXR1cmUiLCJ0ZW1wIiwic2V0RmVlZFJhdGUiLCJzZXRGbG93UmF0ZSIsInNldEZhblNwZWVkIiwic3BlZWQiLCJjbGlja091dHNpZGVUb0Nsb3NlIiwibG9jYWxzIiwibG9ja1VpIiwicHJvbWlzZSIsImJ1c3kiLCJmbG93UmF0ZXMiLCJfIiwibWFwIiwidG9vbHMiLCJuZ01vZGVsT3B0aW9ucyIsImRlYm91bmNlIiwibXVsdGlwbGUiLCJoaWRlIiwiaW5jcmVhc2VUZW1wIiwidG9vbE5hbWUiLCJmaW5kIiwidGFyZ2V0IiwiZGVjcmVhc2VUZW1wIiwiaW5kZXgiLCJsb2FkaW5nIiwiYWxsIiwicmVzdWx0cyIsImhpZGVEaXNhYmxlZFByaW50ZXJzIiwiJG1kVG9hc3QiLCJwcmludGVyVHlwZXMiLCJkZWZpbmVQcm9wZXJ0eSIsInRvYXN0Iiwic2ltcGxlIiwicG9zaXRpb24iLCJoaWRlRGVsYXkiLCJ0b2FzdENsYXNzIiwibGlmZXRpbWVzIiwiZmluYWxseSIsIiRyb3V0ZVBhcmFtcyIsIiR0cmFuc2xhdGUiLCJjb25maWd1cmF0aW9uU2VydmljZSIsImN1cnJlbnROYW1lIiwiY29uZmlnVGVtcGxhdGVVcmwiLCJpbnN0YW50IiwiZ290b0NvbmZpZ3VyYXRpb24iLCJoYW5kbGVFcnJvciIsImNhbmNlbExvYWRpbmciLCJjaGFuZ2VQYXNzd29yZCIsImRlbGV0ZVVzZXIiLCJhbGVydCIsImludGVydmFscyIsInJlYWR5Iiwic2V0dGluZ3NQcmlzdGluZSIsInJldmVydFNldHRpbmdzIiwidXBkYXRlZFNldHRpbmdzIiwic2V0dGluZ3NGb3JtIiwiJHNldFByaXN0aW5lIiwicnVuIiwiJHRlbXBsYXRlQ2FjaGUiXSwibWFwcGluZ3MiOiJBQUFBQSxRQUFRQyxPQUFPLFlBQWEsVUFBVyxZQUFhLGFBQWMsMkJBRWxFRCxRQUFRQyxPQUFPLFlBQ1ZDLFFBQ0csaUJBQ0EscUJBQ0EsZ0JBQ0EsU0FBVUMsZUFBZ0JDLG1CQUFvQkMsZUFDMUMsYUFFQUYsZUFDS0csS0FBSyxLQUNGQyxZQUFhLG1CQUNiQyxXQUFZLGtCQUNaQyxhQUFjLFNBRWpCSCxLQUFLLGtCQUNGQyxZQUFhLGlDQUNiQyxXQUFZLDBCQUNaQyxhQUFjLFNBRWpCSCxLQUFLLCtCQUNGQyxZQUFhLCtCQUNiQyxXQUFZLHVCQUNaQyxhQUFjLFNBRWpCSCxLQUFLLG9DQUNGQyxZQUFhLGdDQUNiQyxXQUFZLHdCQUNaQyxhQUFjLFNBRWpCSCxLQUFLLDRCQUNGQyxZQUFhLG1DQUNiQyxXQUFZLG9CQUNaQyxhQUFjLFNBRWpCSCxLQUFLLGlDQUNGQyxZQUFhLG9DQUNiQyxXQUFZLHFCQUNaQyxhQUFjLFNBRWpCSCxLQUFLLFVBQ0ZDLFlBQWEsbUJBQ2JDLFdBQVksa0JBQ1pDLGFBQWMsU0FFakJDLFVBQVUsS0FFZk4sbUJBQW1CTyxjQUFjLG1CQUM3QkMsR0FBTSxTQUNOQyxJQUFPLFNBQ1BDLElBQU8sU0FDUEMsSUFBTyxTQUNQQyxJQUFPLFNBQ1BDLElBQU8sU0FDUEMsSUFBTyxTQUNQQyxJQUFPLFNBQ1BDLElBQU8sU0FDUEMsSUFBTyxTQUNQQyxLQUFRLFNBQ1JDLEtBQVEsU0FDUkMsS0FBUSxTQUNSQyxLQUFRLFNBQ1JDLHFCQUF3QixRQUN4QkMsb0JBQ0ksS0FDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE9BQ0EsT0FDQSxPQUNBLFFBRUpDLHFCQUNJLE1BQ0Es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QUFLaVIsaUJBQW1CRSxnQkFDeEJuUixLQUFLaUMsU0FBVy9HLFFBQVF5UyxLQUFLd0QsaUJBQzdCblIsS0FBS29SLGFBQWFDLGdCQU5kN1QsVUFBVXVCLEtBQUssVUFOZkcsZUFBZXFCLFlBaUIvQlAsS0FBS2tSLGVBQWlCLFdBQ2xCbFIsS0FBS2lDLFNBQVcvRyxRQUFReVMsS0FBSzNOLEtBQUtpUixrQkFDbENqUixLQUFLb1IsYUFBYUM7QUNuRTlCblcsUUFBUUMsT0FBTyxZQUFZbVcsS0FBSyxpQkFBa0IsU0FBU0MsZ0JBQWlCQSxlQUFleEUsSUFBSSwwQkFBMEIsdzdIQUN6SHdFLGVBQWV4RSxJQUFJLG1CQUFtQixpd0xBQ3RDd0UsZUFBZXhFLElBQUksbUJBQW1CLHkwQkFDdEN3RSxlQUFleEUsSUFBSSxtQkFBbUIsKzRDQUN0Q3dFLGVBQWV4RSxJQUFJLCtCQUErQix1akRBQ2xEd0UsZUFBZXhFLElBQUksbUNBQW1DLHl6RUFDdER3RSxlQUFleEUsSUFBSSxnQ0FBZ0MsbXBEQUNuRHdFLGVBQWV4RSxJQUFJLG9DQUFvQywyOEVBQ3ZEd0UsZUFBZXhFLElBQUksaUNBQWlDLG92TkFDcER3RSxlQUFleEUsSUFBSSxxQ0FBcUMsZzdDQUN4RHdFLGVBQWV4RSxJQUFJLGtDQUFrQyIsImZpbGUiOiJvdmVyc2Vlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKFwib3ZlcnNlZXJcIiwgW1wibmdSb3V0ZVwiLCBcIm5nQW5pbWF0ZVwiLCBcIm5nTWF0ZXJpYWxcIiwgXCJwYXNjYWxwcmVjaHQudHJhbnNsYXRlXCJdKTtcclxuXHJcbmFuZ3VsYXIubW9kdWxlKFwib3ZlcnNlZXJcIilcclxuICAgIC5jb25maWcoW1xyXG4gICAgICAgIFwiJHJvdXRlUHJvdmlkZXJcIixcclxuICAgICAgICBcIiRtZFRoZW1pbmdQcm92aWRlclwiLFxyXG4gICAgICAgIFwiJGh0dHBQcm92aWRlclwiLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkcm91dGVQcm92aWRlciwgJG1kVGhlbWluZ1Byb3ZpZGVyLCAkaHR0cFByb3ZpZGVyKSB7XHJcbiAgICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgICAgICAgICAgJHJvdXRlUHJvdmlkZXJcclxuICAgICAgICAgICAgICAgIC53aGVuKFwiL1wiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwidmlld3MvaW5kZXguaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwiaW5kZXhDb250cm9sbGVyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiBcImN0cmxcIlxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC53aGVuKFwiL2NvbmZpZ3VyYXRpb25cIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcInZpZXdzL2NvbmZpZ3VyYXRpb24vaW5kZXguaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwiY29uZmlndXJhdGlvbkNvbnRyb2xsZXJcIixcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6IFwiY3RybFwiXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLndoZW4oXCIvY29uZmlndXJhdGlvbi9wcmludGVycy9hZGRcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcInZpZXdzL2NvbmZpZ3VyYXRpb24vYWRkLmh0bWxcIixcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBcImFkZFByaW50ZXJDb250cm9sbGVyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiBcImN0cmxcIlxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC53aGVuKFwiL2NvbmZpZ3VyYXRpb24vcHJpbnRlcnMvZWRpdC86aWRcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcInZpZXdzL2NvbmZpZ3VyYXRpb24vZWRpdC5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJlZGl0UHJpbnRlckNvbnRyb2xsZXJcIixcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6IFwiY3RybFwiXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLndoZW4oXCIvY29uZmlndXJhdGlvbi91c2Vycy9hZGRcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcInZpZXdzL2NvbmZpZ3VyYXRpb24vYWRkVXNlci5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJhZGRVc2VyQ29udHJvbGxlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogXCJjdHJsXCJcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAud2hlbihcIi9jb25maWd1cmF0aW9uL3VzZXJzL2VkaXQvOmlkXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJ2aWV3cy9jb25maWd1cmF0aW9uL2VkaXRVc2VyLmh0bWxcIixcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBcImVkaXRVc2VyQ29udHJvbGxlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogXCJjdHJsXCJcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAud2hlbihcIi9sb2dpblwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwidmlld3MvbG9naW4uaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwibG9naW5Db250cm9sbGVyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiBcImN0cmxcIlxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5vdGhlcndpc2UoXCIvXCIpO1xyXG5cclxuICAgICAgICAgICAgJG1kVGhlbWluZ1Byb3ZpZGVyLmRlZmluZVBhbGV0dGUoXCJvdmVyc2VlclBhbGV0dGVcIiwge1xyXG4gICAgICAgICAgICAgICAgXCI1MFwiOiBcImU2ZjBmZFwiLFxyXG4gICAgICAgICAgICAgICAgXCIxMDBcIjogXCJjMWQ5ZmFcIixcclxuICAgICAgICAgICAgICAgIFwiMjAwXCI6IFwiOTdjMGY2XCIsXHJcbiAgICAgICAgICAgICAgICBcIjMwMFwiOiBcIjZkYTZmMlwiLFxyXG4gICAgICAgICAgICAgICAgXCI0MDBcIjogXCI0ZTkzZjBcIixcclxuICAgICAgICAgICAgICAgIFwiNTAwXCI6IFwiMmY4MGVkXCIsXHJcbiAgICAgICAgICAgICAgICBcIjYwMFwiOiBcIjJhNzhlYlwiLFxyXG4gICAgICAgICAgICAgICAgXCI3MDBcIjogXCIyMzZkZThcIixcclxuICAgICAgICAgICAgICAgIFwiODAwXCI6IFwiMWQ2M2U1XCIsXHJcbiAgICAgICAgICAgICAgICBcIjkwMFwiOiBcIjEyNTBlMFwiLFxyXG4gICAgICAgICAgICAgICAgXCJBMTAwXCI6IFwiZmZmZmZmXCIsXHJcbiAgICAgICAgICAgICAgICBcIkEyMDBcIjogXCJkYmU1ZmZcIixcclxuICAgICAgICAgICAgICAgIFwiQTQwMFwiOiBcImE4YmZmZlwiLFxyXG4gICAgICAgICAgICAgICAgXCJBNzAwXCI6IFwiOGZhY2ZmXCIsXHJcbiAgICAgICAgICAgICAgICBcImNvbnRyYXN0RGVmYXVsdENvbG9yXCI6IFwibGlnaHRcIixcclxuICAgICAgICAgICAgICAgIFwiY29udHJhc3REYXJrQ29sb3JzXCI6IFtcclxuICAgICAgICAgICAgICAgICAgICBcIjUwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCIxMDBcIixcclxuICAgICAgICAgICAgICAgICAgICBcIjIwMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiMzAwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCI0MDBcIixcclxuICAgICAgICAgICAgICAgICAgICBcIkExMDBcIixcclxuICAgICAgICAgICAgICAgICAgICBcIkEyMDBcIixcclxuICAgICAgICAgICAgICAgICAgICBcIkE0MDBcIixcclxuICAgICAgICAgICAgICAgICAgICBcIkE3MDBcIlxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIFwiY29udHJhc3RMaWdodENvbG9yc1wiOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgXCI1MDBcIixcclxuICAgICAgICAgICAgICAgICAgICBcIjYwMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiNzAwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCI4MDBcIixcclxuICAgICAgICAgICAgICAgICAgICBcIjkwMFwiXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKFwiZGVmYXVsdFwiKVxyXG4gICAgICAgICAgICAgICAgLnByaW1hcnlQYWxldHRlKFwib3ZlcnNlZXJQYWxldHRlXCIsIHsgZGVmYXVsdDogXCI1MDBcIiB9KVxyXG4gICAgICAgICAgICAgICAgLmFjY2VudFBhbGV0dGUoXCJvdmVyc2VlclBhbGV0dGVcIiwgeyBkZWZhdWx0OiBcIjgwMFwiIH0pXHJcbiAgICAgICAgICAgICAgICAuZGFyaygpO1xyXG5cclxuXHJcbiAgICAgICAgICAgICRtZFRoZW1pbmdQcm92aWRlci5lbmFibGVCcm93c2VyQ29sb3IoKTtcclxuXHJcbiAgICAgICAgICAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goW1wiJHFcIiwgXCIkbG9jYXRpb25cIiwgZnVuY3Rpb24gKCRxLCAkbG9jYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHZhciBhY3RpdmVSZXF1ZXN0ID0gMDtcclxuICAgICAgICAgICAgICAgIHZhciB0aW1lb3V0O1xyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHN0YXJ0TG9hZGVyKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmVSZXF1ZXN0ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE5Qcm9ncmVzcy5zdGFydCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlUmVxdWVzdCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9wTG9hZGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDMwICogMTAwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZVJlcXVlc3QrKztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzdG9wTG9hZGVyKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZVJlcXVlc3QtLTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlUmVxdWVzdCA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZVJlcXVlc3QgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBOUHJvZ3Jlc3MuZG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3Q6IGZ1bmN0aW9uIChjb25maWcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRMb2FkZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cubG9jYWxTdG9yYWdlLmFjdGl2ZVVzZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1c2VyID0gSlNPTi5wYXJzZSh3aW5kb3cubG9jYWxTdG9yYWdlLmFjdGl2ZVVzZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9IFwiQmVhcmVyIFwiICsgdXNlci50b2tlbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uZmlnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2U6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9wTG9hZGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlRXJyb3I6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9wTG9hZGVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3JlZGlyZWN0IHRvIGxvZ2luIGlmIHVuYXV0aG9yaXplZCBzdGF0dXMgY29kZSBpcyByZXR1cm5lZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEgfHwgcmVzcG9uc2Uuc3RhdHVzID09PSA0MDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB3aW5kb3cubG9jYWxTdG9yYWdlLmFjdGl2ZVVzZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9sb2dpblwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfV0pO1xyXG4gICAgICAgIH1cclxuICAgIF0pXHJcbiAgICAuY29udHJvbGxlcihcImFwcEN0cmxcIiwgW1xyXG4gICAgICAgIFwiJHJvb3RTY29wZVwiLCBcclxuICAgICAgICBcIiRsb2NhdGlvblwiLCBcclxuICAgICAgICBcImF1dGhlbnRpY2F0aW9uXCIsIFxyXG4gICAgICAgIFwiY29uZmlndXJhdGlvblwiLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkbG9jYXRpb24sIGF1dGhlbnRpY2F0aW9uLCBjb25maWd1cmF0aW9uKSB7XHJcbiAgICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgbW9uaXRvcmluZ0VuYWJsZWQ7XHJcblxyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzZWxmLCB7XHJcbiAgICAgICAgICAgICAgICBzaG93TWVudToge1xyXG4gICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhdXRoZW50aWNhdGlvbi5hdXRoVG9rZW47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYubG9nb3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGlvbi5sb2dvdXQoKTtcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL2xvZ2luXCIpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgJC5jb25uZWN0aW9uLmh1Yi51cmwgPSBcIi9wdXNoXCI7XHJcbiAgICAgICAgICAgICQuY29ubmVjdGlvbi5zdGF0dXNIdWIuY2xpZW50LnN0YXR1c1VwZGF0ZSA9IGZ1bmN0aW9uIChzdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdChcIiRTdGF0dXNVcGRhdGUkXCIsIHN0YXR1cyk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiBhdXRoZW50aWNhdGlvbi5hdXRoVG9rZW47IH0sIGZ1bmN0aW9uKGN1cnJlbnQsIHByZXZpb3VzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vYSB1c2VyIGxvZ2dlZCBpbiBvciB0aGUgcGFnZSBsb2FkZWQgd2l0aCBhIGxvZ2dlZCBpbiB1c2VyXHJcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlVG9TdGF0dXNVcGRhdGVzKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByZXZpb3VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9hIHVzZXIgbG9nZ2VkIG91dCwgb3IgYSByZXF1ZXN0IHJldHVybmVkIGEgNDAxIG9yIDQwM1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uY2xlYXJDYWNoZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlRnJvbVN0YXR1c1VwZGF0ZXMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHVuc3Vic2NyaWJlRnJvbVN0YXR1c1VwZGF0ZXMoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoISQuY29ubmVjdGlvbi5odWIpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICBtb25pdG9yaW5nRW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgJC5jb25uZWN0aW9uLmh1Yi5zdG9wKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHN1YnNjcmliZVRvU3RhdHVzVXBkYXRlcygpIHtcclxuICAgICAgICAgICAgICAgIGlmIChtb25pdG9yaW5nRW5hYmxlZCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgICQuY29ubmVjdGlvbi5odWIuc3RhcnQoKS5kb25lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW4gPSBhdXRoZW50aWNhdGlvbi5hY3RpdmVVc2VyID8gYXV0aGVudGljYXRpb24uYWN0aXZlVXNlci50b2tlbiA6IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgJC5jb25uZWN0aW9uLnN0YXR1c0h1Yi5zZXJ2ZXIuc3RhcnRNb25pdG9yaW5nKHRva2VuKS50aGVuKGZ1bmN0aW9uKGVuYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9uaXRvcmluZ0VuYWJsZWQgPSBlbmFibGVkO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vYXR0ZW1wdCB0byBzdWJzY3JpYmUgdG8gdXBkYXRlcy4gSWYgdXNlciBhdXRoZW50aWNhdGlvbiBpcyByZXF1aXJlZCB0aGUgc2VydmVyIHdvbid0IHNlbmQgdXBkYXRlcy5cclxuICAgICAgICAgICAgc3Vic2NyaWJlVG9TdGF0dXNVcGRhdGVzKCk7XHJcbiAgICB9XHJcbl0pOyIsImFuZ3VsYXIubW9kdWxlKFwib3ZlcnNlZXJcIikuY29uZmlnKFtcIiR0cmFuc2xhdGVQcm92aWRlclwiLCBmdW5jdGlvbigkdHJhbnNsYXRlUHJvdmlkZXIpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgICR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJlblwiLCB7ICAgICAgICAgICAgICAgICBcclxuICAgICAgICBhZGQ6IFwiQWRkXCIsXHJcbiAgICAgICAgZWRpdDogXCJFZGl0XCIsXHJcbiAgICAgICAgZWRpdGluZzogXCJFZGl0aW5nXCIsXHJcbiAgICAgICAgc2F2ZTogXCJTYXZlXCIsXHJcbiAgICAgICAgY2FuY2VsOiBcIkNhbmNlbFwiLFxyXG4gICAgICAgIGRlbGV0ZTogXCJEZWxldGVcIixcclxuICAgICAgICBjb25maXJtOiBcIkNvbmZpcm1cIixcclxuICAgICAgICBkaXNtaXNzOiBcIkRpc21pc3NcIixcclxuICAgICAgICBwcmludGVyczogXCJQcmludGVyc1wiLFxyXG4gICAgICAgIG5vUHJpbnRlcjogXCJUaGVyZSBhcmUgbm8gcHJpbnRlcnMgY29uZmlndXJlZCBvciBhbGwgcHJpbnRlcnMgYXJlIGRpc2FibGVkLlwiLFxyXG4gICAgICAgIG5vUHJpbnRlcnM6IFwiTm8gUHJpbnRlcnMgQ29uZmlndXJlZFwiLFxyXG4gICAgICAgIG5vVXNlcnM6IFwiTm8gVXNlcnMgQ29uZmlndXJlZFwiLFxyXG4gICAgICAgIG5vUHJpbnRlcnNBZGRQcmludGVyOiBcIkFkZCBOZXcgUHJpbnRlclwiLFxyXG4gICAgICAgIG5vUHJpbnRlcnNFZGl0UHJpbnRlcnM6IFwiRWRpdCBFeGlzdGluZyBQcmludGVyc1wiLFxyXG4gICAgICAgIGdlbmVyYWxTZXR0aW5nczogXCJHZW5lcmFsIFNldHRpbmdzXCIsXHJcbiAgICAgICAgc2V0dGluZ3M6IFwiU2V0dGluZ3NcIixcclxuICAgICAgICBwb2xsSW50ZXJ2YWw6IFwiUG9sbCBJbnRlcnZhbFwiLFxyXG4gICAgICAgIHBvbGxJbnRlcnZhbFRpdGxlOiBcIkhvdyBvZnRlbiB0aGUgcHJpbnRlcnMgd2lsbCBiZSBwb2xsZWQgZm9yIHVwZGF0ZXNcIixcclxuICAgICAgICBzZWNvbmRzOiBcIlNlY29uZHNcIixcclxuICAgICAgICBsb2NhbFBvcnQ6IFwiTG9jYWwgUG9ydCAoUmVxdWlyZXMgUmVzdGFydClcIixcclxuICAgICAgICBsb2NhbFBvcnRUaXRsZTogXCJUaGUgbG9jYWwgcG9ydCB3aGVyZSB0aGUgT3ZlcnNlZXIgd2ViIGFwcCB3aWxsIGJlIGhvc3RlZC5cIixcclxuICAgICAgICBoaWRlVW5tb25pdG9yZWQ6IFwiSGlkZSBQcmludGVycyBXaGVuIE1vbml0b3JpbmcgSXMgRGlzYWJsZWRcIixcclxuICAgICAgICBoaWRlVW5tb25pdG9yZWRUaXRsZTogXCJXaGVuIGVuYWJsZWQgcHJpbnRlcnMgd2l0aCBtb25pdG9yaW5nIGRpc2FibGVkIHdpbGwgbm90IGJlIHZpc2libGUgb24gdGhlIGhvbWUgcGFnZS5cIixcclxuICAgICAgICBuYW1lOiBcIk5hbWVcIixcclxuICAgICAgICBwcmludGVyVHlwZTogXCJQcmludGVyIFR5cGVcIixcclxuICAgICAgICBtb25pdG9yaW5nRGlzYWJsZWQ6IFwiTW9uaXRvcmluZyBEaXNhYmxlZFwiLFxyXG4gICAgICAgIG1vbml0b3JpbmdFbmFibGVkOiBcIk1vbml0b3JpbmcgRW5hYmxlZFwiLFxyXG4gICAgICAgIGRpc2FibGVNb25pdG9yaW5nOiBcIkRpc2FibGUgTW9uaXRvcmluZ1wiLFxyXG4gICAgICAgIGRpc2FibGVNb25pdG9yaW5nVGl0bGU6IFwiV2hlbiBtb25pdG9yaW5nIGlzIGRpc2FibGVkIHRoZSBhcHBsaWNhdGlvbiB3aWxsIG5vdCBwb2xsIGZvciB1cGRhdGUgZm9yIHRoaXMgcHJpbnRlci5cIixcclxuICAgICAgICB1cmw6IFwiVXJsXCIsXHJcbiAgICAgICAgd2ViY2FtVXJsOiBcIldlYmNhbSBVcmxcIixcclxuICAgICAgICBzbmFwc2hvdFVybDogXCJTbmFwc2hvdCBVcmxcIixcclxuICAgICAgICB1c2VybmFtZTogXCJVc2VybmFtZVwiLFxyXG4gICAgICAgIHBhc3N3b3JkOiBcIlBhc3N3b3JkXCIsXHJcbiAgICAgICAgcGFzc3dvcmRFZGl0OiBcIlBhc3N3b3JkIChBdCBsZWFzdCA4IGNoYXJhY3RlcnMpXCIsXHJcbiAgICAgICAgY29uZmlybVBhc3N3b3JkOiBcIkNvbmZpcm0gUGFzc3dvcmRcIixcclxuICAgICAgICByZXF1aXJlc1Bhc3N3b3JkOiBcIlJlcXVpcmVzIFBhc3N3b3JkXCIsXHJcbiAgICAgICAgYXBpS2V5OiBcIkFwaSBLZXlcIixcclxuICAgICAgICBwcm9maWxlOiBcIlByb2ZpbGVcIixcclxuICAgICAgICBwcm9maWxlVGl0bGU6IFwiVGhlIHByb2ZpbGUgdGhhdCB3aWxsIGJlIHVzZWQgd2hlbiBpbnRlcmFjdGluZyB3aXRoIE9jdG9wcmludC5cIixcclxuICAgICAgICBhZGRQcmludGVyOiBcIkFkZCBQcmludGVyXCIsXHJcbiAgICAgICAgb3BlbldlYnNpdGU6IFwiT3BlbiBXZWJzaXRlXCIsXHJcbiAgICAgICAgc3RhdHVzOiBcIlN0YXR1c1wiLFxyXG4gICAgICAgIHByb2dyZXNzOiBcIlByb2dyZXNzXCIsXHJcbiAgICAgICAgZWxhcHNlZDogXCJFbGFwc2VkXCIsXHJcbiAgICAgICAgZXN0aW1hdGVkOiBcIkVzdGltYXRlZFwiLFxyXG4gICAgICAgIGZlZWRSYXRlOiBcIkZlZWQgUmF0ZVwiLFxyXG4gICAgICAgIGZhblNwZWVkOiBcIkZhbiBTcGVlZFwiLFxyXG4gICAgICAgIGZsb3dSYXRlOiBcIkZsb3cgUmF0ZVwiLFxyXG4gICAgICAgIHJlbWFpbmluZzogXCJSZW1haW5pbmdcIixcclxuICAgICAgICBjb25uZWN0aW5nOiBcIkNvbm5lY3RpbmcuLi5cIixcclxuICAgICAgICBkaXNhYmxlZDogXCJEaXNhYmxlZFwiLFxyXG4gICAgICAgIGJlZDogXCJCZWRcIixcclxuICAgICAgICBPZmZsaW5lOiBcIk9mZmxpbmVcIixcclxuICAgICAgICBJZGxlOiBcIklkbGVcIixcclxuICAgICAgICBQcmludGluZzogXCJQcmludGluZ1wiLFxyXG4gICAgICAgIFBhdXNlZDogXCJQYXVzZWRcIixcclxuICAgICAgICBPY3RvcHJpbnQ6IFwiT2N0b3ByaW50XCIsXHJcbiAgICAgICAgUmVwUmFwOiBcIlJlcFJhcCBGaXJtd2FyZSAoRHVldCBXZWIgQ29udHJvbClcIixcclxuICAgICAgICByZXF1aXJlc0F1dGhlbnRpY2F0aW9uVGl0bGU6IFwiV2hlbiBlbmFibGVkIGFub255bW91cyBhY2Nlc3MgdG8gdGhlIGFwcGxpY2F0aW9uIGlzIG5vdCBhbGxvd2VkLlwiLFxyXG4gICAgICAgIHJlcXVpcmVzQXV0aGVudGljYXRpb246IFwiUmVxdWlyZSBVc2VyIExvZ2luc1wiLFxyXG4gICAgICAgIHJlcXVpcmVzQXV0bmVudGljYXRpb25Qcm9tcHQ6IFwiQXQgbGVhc3Qgb25lIHVzZXIgbXVzdCBiZSBhZGRlZCBiZWZvcmUgZW5hYmxpbmcgJ1JlcXVpcmUgVXNlciBMb2dpbnMnXCIsXHJcbiAgICAgICAgc2Vzc2lvbkxpZmV0aW1lVGl0bGU6IFwiU3BlY2lmaWVzIGhvdyBsb25nIHRoZSB1c2VyIHdpbGwgcmVtYWluIGxvZ2dlZCBpbnRvIHRoZSBhcHBsaWNhdGlvbiBiZWZvcmUgbmVlZGluZyB0byByZS1hdXRoZW50aWNhdGUuIExlYXZlIGJsYW5rIHRvIHJlbWFpbiBsb2dnZWQgaW4gaW5kZWZpbml0ZWx5LlwiLFxyXG4gICAgICAgIHNlc3Npb25MaWZldGltZTogXCJMb2dpbiBTZXNzaW9uIER1cmF0aW9uXCIsICAgICAgICBcclxuICAgICAgICBkYXlzOiBcIkRheXNcIixcclxuICAgICAgICBpbmRlZmluaXRlOiBcIkluZGVmaW5pdGVcIixcclxuICAgICAgICBsb2dpbjogXCJTaWduIEluXCIsXHJcbiAgICAgICAgbG9nb3V0OiBcIlNpZ24gT3V0XCIsXHJcbiAgICAgICAgdXNlcjogXCJVc2VyXCIsXHJcbiAgICAgICAgdXNlcnM6IFwiVXNlcnNcIixcclxuICAgICAgICBhZGRVc2VyOiBcIkFkZCBVc2VyXCIsXHJcbiAgICAgICAgaXNMb2dnZWRJbjogXCJMb2dnZWQgSW4/XCIsXHJcbiAgICAgICAgaXNMb2dnZWRJblRpdGxlOiBcIlNwZWNpZmllcyBpZiBhIHVzZXIgaGFzIGEgYWN0aXZlIGxvZ2luXCIsXHJcbiAgICAgICAgd2FybmluZzpcIldhcm5pbmchXCIsXHJcbiAgICAgICAgeWVzOiBcIlllc1wiLFxyXG4gICAgICAgIG5vOiBcIk5vXCIsXHJcbiAgICAgICAgZGVsZXRlUHJpbnRlclByb21wdDogXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgcmVtb3ZlIHRoaXMgcHJpbnRlcj9cIixcclxuICAgICAgICBkZWxldGVVc2VyUHJvbXB0OiBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCByZW1vdmUgdGhpcyB1c2VyP1wiLFxyXG4gICAgICAgIGRlbGV0ZUxhc3RVc2VyUHJvbXB0OiBcIkF0IGxlYXN0IG9uZSB1c2VyIG11c3QgZXhpc3Qgd2hlbiAnUmVxdWlyZSBVc2VyIExvZ2lucycgaXMgZW5hYmxlZC4gVG8gcmVtb3ZlIHRoaXMgdXNlciBkaXNhYmxlICdSZXF1aXJlIFVzZXIgTG9naW5zJyBvciBhZGQgYW5vdGhlciB1c2VyLlwiXHJcbiAgICB9KS5wcmVmZXJyZWRMYW5ndWFnZShcImVuXCIpO1xyXG59XSk7IiwiYW5ndWxhci5tb2R1bGUoXCJvdmVyc2VlclwiKS5kaXJlY3RpdmUoXCJwcmludGVyXCIsXHJcbiAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiBcIkVcIixcclxuICAgICAgICAgICAgc2NvcGU6IHRydWUsXHJcbiAgICAgICAgICAgIHJlcGxhY2U6IHRydWUsXHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImRpcmVjdGl2ZXMvcHJpbnRlci5odG1sXCIsXHJcbiAgICAgICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgICAgICAgICAgIG1vZGVsOiBcIj1cIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbXHJcbiAgICAgICAgICAgICAgICBcIiRxXCIsXHJcbiAgICAgICAgICAgICAgICBcIiRzY29wZVwiLFxyXG4gICAgICAgICAgICAgICAgXCJjb250cm9sU2VydmljZVwiLFxyXG4gICAgICAgICAgICAgICAgXCIkbWREaWFsb2dcIixcclxuICAgICAgICAgICAgICAgIFwidHVuZU1vZGFsXCIsXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoJHEsICRzY29wZSwgY29udHJvbFNlcnZpY2UsICRtZERpYWxvZywgdHVuZU1vZGFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY29ubmVjdGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jYWNoZUJ1c3RlciA9IERhdGUubm93KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHNlbGYsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNQcmludGluZzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLnN0YXR1cykgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnN0YXR1cy5zdGF0ZSA9PT0gXCJQcmludGluZ1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1BhdXNlZDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLnN0YXR1cykgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnN0YXR1cy5zdGF0ZSA9PT0gXCJQYXVzZWRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNJZGxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5zdGF0dXMpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5zdGF0dXMuc3RhdGUgPT09IFwiSWRsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0Rpc2Nvbm5lY3RlZDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGYuc3RhdHVzKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIXNlbGYuaXNEaXNhYmxlZCAmJiBzZWxmLnN0YXR1cy5zdGF0ZSA9PT0gXCJEaXNjb25uZWN0ZWRcIiB8fCBzZWxmLnN0YXR1cy5zdGF0ZSA9PT0gXCJPZmZsaW5lXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRGlzYWJsZWQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFzZWxmLmNvbm5lY3RpbmcgJiYgc2VsZi5tb2RlbC5kaXNhYmxlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2ViY2FtVXJsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBzZWxmLm1vZGVsLmNvbmZpZy53ZWJDYW1Vcmw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICB1cmwgKyAodXJsLmluZGV4T2YoXCI/XCIpID49IDAgPyBcIiZcIiA6IFwiP1wiKSArIFwiY2I9XCIgKyBzZWxmLmNhY2hlQnVzdGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kb24oXCIkU3RhdHVzVXBkYXRlJFwiLCBmdW5jdGlvbiAoZXZlbnQsIHN0YXR1cykgeyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25uZWN0aW5nID0gZmFsc2U7ICAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJpbnRlclN0YXR1cyA9IHN0YXR1c1tzZWxmLm1vZGVsLmlkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByaW50ZXJTdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3RhdHVzID0gcHJpbnRlclN0YXR1cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kZGlnZXN0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi50b2dnbGVab29tID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnpvb20gPSAhc2VsZi56b29tO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYudHVuZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHVuZU1vZGFsLm9wZW4oc2VsZi5tb2RlbCwgc2VsZi5zdGF0dXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYucGF1c2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5pc1ByaW50aW5nKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sU2VydmljZS5wYXVzZShzZWxmLm1vZGVsLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLmlzUGF1c2VkKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sU2VydmljZS5yZXN1bWUoc2VsZi5tb2RlbC5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5pc1ByaW50aW5nKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29uZmlybSA9ICRtZERpYWxvZy5jb25maXJtKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aXRsZShcIkNhbmNlbCBQcmludFwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRleHRDb250ZW50KFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGNhbmNlbCB0aGlzIHByaW50P1wiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9rKFwiWWVzXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2FuY2VsKFwiTm9cIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkbWREaWFsb2cuc2hvdyhjb25maXJtKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbFNlcnZpY2UuY2FuY2VsKHNlbGYubW9kZWwuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbigpe30pO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZ2V0QWN0dWFsVGVtcCA9IGZ1bmN0aW9uKHRvb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldFRlbXAodG9vbCwgXCJhY3R1YWxcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5nZXRUYXJnZXRUZW1wID0gZnVuY3Rpb24odG9vbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0VGVtcCh0b29sLCBcInRhcmdldFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRUZW1wKHRvb2wsIHRlbXBQcm9wZXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGYuc3RhdHVzIHx8ICFzZWxmLnN0YXR1cy50ZW1wZXJhdHVyZXMpIHJldHVybiAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuc3RhdHVzLnRlbXBlcmF0dXJlc1t0b29sXVt0ZW1wUHJvcGVydHldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiBcInByaW50ZXJDdHJsXCJcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4pOyIsImFuZ3VsYXIubW9kdWxlKFwib3ZlcnNlZXJcIikuZGlyZWN0aXZlKFwicmVzaXplclwiLCBbXCIkd2luZG93XCIsIGZ1bmN0aW9uKCR3aW5kb3cpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdGljdDogXCJFXCIsXHJcbiAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcclxuICAgICAgICB0ZW1wbGF0ZTogXCI8ZGl2IG5nLXRyYW5zY2x1ZGU+PC9kaXY+XCIsXHJcbiAgICAgICAgcmVwbGFjZTogdHJ1ZSxcclxuICAgICAgICBzY29wZToge1xyXG4gICAgICAgICAgICBjb3VudDogXCI9XCIsXHJcbiAgICAgICAgICAgIG91dHB1dDogXCI9XCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSkgeyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgYm9keSA9ICR3aW5kb3cuZG9jdW1lbnQuYm9keTtcclxuICAgICAgICAgICAgdmFyIHdpZHRoO1xyXG4gICAgICAgICAgICB2YXIgaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgc2NvcGUub3V0cHV0ID0ge307XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHNjb3BlLm91dHB1dCwge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IHtcclxuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBjYWxjdWxhdGUoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGVhZGVyID0gJHdpbmRvdy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImhlYWRlclwiKTtcclxuICAgICAgICAgICAgICAgIHZhciBhdmFpbGFibGVIZWlnaHQgPSBib2R5LmNsaWVudEhlaWdodCAtIE1hdGgubWF4KGhlYWRlci5jbGllbnRIZWlnaHQsIDY0KTtcclxuICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0UmF0aW8gPSAxNiAvIDk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmF0aW8gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChib2R5LmNsaWVudFdpZHRoIC8gcmF0aW8gPCA5NjApIHtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IDEwMDtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBib2R5LmNsaWVudFdpZHRoIC8gKDQvMyk7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcm93cyA9IDE7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjb3BlLmNvdW50ID4gMiAmJiBzY29wZS5jb3VudCA8PSA0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd3MgPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2NvcGUuY291bnQgPiA0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd3MgPSBNYXRoLmZsb29yKHNjb3BlLmNvdW50IC8gNCkgKyAoc2NvcGUuY291bnQgJSA0ID4gMCA/IDEgOiAwKTsgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbHVtbnMgPSBNYXRoLmNlaWwoc2NvcGUuY291bnQgLyByb3dzKTtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IDEwMCAvIGNvbHVtbnM7IFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IHJvd3MgPiA0ID8gYm9keS53aWR0aCAvIGNvbHVtbnMgLyBkZWZhdWx0UmF0aW8gOiBhdmFpbGFibGVIZWlnaHQgLyByb3dzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmdW5jdGlvbiBvblJlc2l6ZSgpIHtcclxuICAgICAgICAgICAgICAgIGNhbGN1bGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgb25SZXNpemUpO1xyXG5cclxuICAgICAgICAgICAgc2NvcGUuJG9uKFwiJGRlc3Ryb3lcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgb25SZXNpemUpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGNhbGN1bGF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1dKTsiLCJhbmd1bGFyLm1vZHVsZShcIm92ZXJzZWVyXCIpXHJcbiAgICAuZGlyZWN0aXZlKFwibWF0Y2hcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXF1aXJlOiBbXCJtYXRjaFwiLCBcIm5nTW9kZWxcIl0sXHJcbiAgICAgICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgICAgICAgICAgIG1hdGNoOiBcIj1cIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW0sIGF0dHJzLCBjdHJscykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN0cmwgPSBjdHJsc1swXTtcclxuICAgICAgICAgICAgICAgIHZhciBuZ01vZGVsID0gY3RybHNbMV07XHJcblxyXG4gICAgICAgICAgICAgICAgbmdNb2RlbC4kcGFyc2Vycy51bnNoaWZ0KHZhbGlkYXRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gY3RybC5tYXRjaDsgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlKG5nTW9kZWwuJHZpZXdWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZSh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpc1ZhbGlkID0gY3RybC5tYXRjaCA9PT0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgbmdNb2RlbC4kc2V0VmFsaWRpdHkoXCJtYXRjaFwiLCBpc1ZhbGlkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH0pOyIsImFuZ3VsYXIubW9kdWxlKFwib3ZlcnNlZXJcIikuZmlsdGVyKFwiZHVyYXRpb25cIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIGlmICghdmFsdWUpIHJldHVybiBcIjAwOjAwOjAwXCI7XHJcblxyXG4gICAgICAgIHZhciBkID0gTnVtYmVyKHZhbHVlKTtcclxuICAgICAgICB2YXIgaCA9IE1hdGguZmxvb3IoZCAvIDM2MDApO1xyXG4gICAgICAgIHZhciBtID0gTWF0aC5mbG9vcihkICUgMzYwMCAvIDYwKTtcclxuICAgICAgICB2YXIgcyA9IE1hdGguZmxvb3IoZCAlIDM2MDAgJSA2MCk7XHJcblxyXG4gICAgICAgIHJldHVybiAoaCA8IDEwMCA/IChcIjBcIiArIGgpLnNsaWNlKC0yKSA6IGgpICsgXCI6XCIgKyAoXCIwXCIgKyBtKS5zbGljZSgtMikgKyBcIjpcIiArIChcIjBcIiArIHMpLnNsaWNlKC0yKTtcclxuICAgIH07XHJcbn0pOyIsImFuZ3VsYXIubW9kdWxlKFwib3ZlcnNlZXJcIikuc2VydmljZShcImF1dGhlbnRpY2F0aW9uXCIsIFtcclxuICAgIFwiJHFcIixcclxuICAgIFwiJGh0dHBcIixcclxuICAgIFwiY29uZmlndXJhdGlvblwiLFxyXG4gICAgZnVuY3Rpb24gKCRxLCAkaHR0cCwgY29uZmlndXJhdGlvbikge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGVuZHBvaW50ID0gXCIvc2VydmljZXMvYXV0aFwiO1xyXG4gICAgICAgIFxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHNlbGYsIHtcclxuICAgICAgICAgICAgYWN0aXZlVXNlcjoge1xyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LmxvY2FsU3RvcmFnZS5hY3RpdmVVc2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHdpbmRvdy5sb2NhbFN0b3JhZ2UuYWN0aXZlVXNlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgXHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgd2luZG93LmxvY2FsU3RvcmFnZS5hY3RpdmVVc2VyO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UuYWN0aXZlVXNlciA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGF1dGhUb2tlbjoge1xyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5hY3RpdmVVc2VyKSByZXR1cm4gXCJCZWFyZXIgXCIgKyBzZWxmLmFjdGl2ZVVzZXIudG9rZW47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc2VsZi5sb2dpbiA9IGZ1bmN0aW9uICh1c2VyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5wb3N0KGVuZHBvaW50LCB1c2VyKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFjdGl2ZVVzZXIgPSByZXN1bHQuZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3Iuc3RhdHVzID09PSA0MDAgPyBlcnJvci5kYXRhIDogXCJBbiB1bmtub3duIGVycm9yIG9jY3VycmVkLlwiKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmxvZ291dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRodHRwLmRlbGV0ZShlbmRwb2ludCArIFwiL2xvZ291dFwiKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuYWN0aXZlVXNlciA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uY2xlYXJDYWNoZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5dKTsiLCJhbmd1bGFyLm1vZHVsZShcIm92ZXJzZWVyXCIpLnNlcnZpY2UoXCJjb25maWd1cmF0aW9uXCIsIFtcclxuICAgIFwiJHFcIixcclxuICAgIFwiJGh0dHBcIixcclxuICAgIGZ1bmN0aW9uICgkcSwgJGh0dHApIHtcclxuICAgICAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHZhciBlbmRwb2ludCA9IFwiL3NlcnZpY2VzL2NvbmZpZ1wiO1xyXG5cclxuICAgICAgICB2YXIgY2FjaGUgPSB7XHJcbiAgICAgICAgICAgIHByaW50ZXJzOiB7fVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgc2VsZi5jbGVhckNhY2hlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGNhY2hlID0ge1xyXG4gICAgICAgICAgICAgICAgcHJpbnRlcnM6IHt9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5nZXRDb25maWd1cmF0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoZW5kcG9pbnQgKyBcIi9jb25maWd1cmF0aW9uXCIpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gocmVzdWx0LmRhdGEucHJpbnRlcnMsIGZ1bmN0aW9uIChwcmludGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FjaGUucHJpbnRlcnNbcHJpbnRlci5pZF0gPSBwcmludGVyO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FjaGUuc2V0dGluZ3MgPSByZXN1bHQuZGF0YS5zZXR0aW5ncztcclxuICAgICAgICAgICAgICAgIGNhY2hlLnVzZXJzID0gcmVzdWx0LmRhdGEudXNlcnM7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5kYXRhO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmdldFByaW50ZXJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoY2FjaGUucHJpbnRlcnMpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHByaW50ZXJzID0gW107XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goY2FjaGUucHJpbnRlcnMsIGZ1bmN0aW9uKHByaW50ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmludGVycy5wdXNoKHByaW50ZXIpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlc29sdmUocHJpbnRlcnMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KGVuZHBvaW50KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChyZXN1bHQuZGF0YSwgZnVuY3Rpb24gKHByaW50ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWNoZS5wcmludGVyc1twcmludGVyLmlkXSA9IHByaW50ZXI7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LmRhdGE7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuZ2V0UHJpbnRlciA9IGZ1bmN0aW9uKHByaW50ZXJJZCkge1xyXG4gICAgICAgICAgICBpZiAoY2FjaGUucHJpbnRlcnNbcHJpbnRlcklkXSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlc29sdmUoY2FjaGUucHJpbnRlcnNbcHJpbnRlcklkXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoZW5kcG9pbnQgKyBcIi9cIiArIHByaW50ZXJJZCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHsgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5kYXRhO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmNyZWF0ZVByaW50ZXIgPSBmdW5jdGlvbiAocHJpbnRlcikgeyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucHV0KGVuZHBvaW50LCBwcmludGVyKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGNhY2hlLnByaW50ZXJzW3Jlc3VsdC5kYXRhLmlkXSA9IHJlc3VsdC5kYXRhO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5kYXRhO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLnVwZGF0ZVByaW50ZXIgPSBmdW5jdGlvbiAocHJpbnRlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdChlbmRwb2ludCwgcHJpbnRlcikudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGNhY2hlLnByaW50ZXJzW3Jlc3VsdC5kYXRhLmlkXSA9IHJlc3VsdC5kYXRhO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5kYXRhO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmRlbGV0ZVByaW50ZXIgPSBmdW5jdGlvbiAocHJpbnRlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZGVsZXRlKGVuZHBvaW50ICsgXCIvXCIgKyBwcmludGVyLmlkKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIGNhY2hlLnByaW50ZXJzW3ByaW50ZXIuaWRdO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmdldFNldHRpbmdzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChjYWNoZS5zZXR0aW5ncykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlc29sdmUoY2FjaGUuc2V0dGluZ3MpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KGVuZHBvaW50ICsgXCIvc2V0dGluZ3NcIikudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGNhY2hlLnNldHRpbmdzID0gcmVzdWx0LmRhdGE7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LmRhdGE7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYudXBkYXRlU2V0dGluZ3MgPSBmdW5jdGlvbihzZXR0aW5ncykge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdChlbmRwb2ludCArIFwiL3NldHRpbmdzXCIsIHNldHRpbmdzKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgY2FjaGUuc2V0dGluZ3MgPSByZXN1bHQuZGF0YTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuZGF0YTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5nZXRVc2VycyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoY2FjaGUudXNlcnMpIHtcclxuICAgICAgICAgICAgICAgICRxLnJlc29sdmUoY2FjaGUudXNlcnMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KGVuZHBvaW50ICsgXCIvdXNlcnNcIikudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGNhY2hlLnVzZXJzID0gcmVzdWx0LmRhdGE7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LmRhdGE7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZVVzZXJFcnJvcihlKSB7XHJcbiAgICAgICAgICAgIGlmIChlLnN0YXR1cyA9PT0gNDAwICYmIGUuZGF0YSAmJiBlLmRhdGEuZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoZS5kYXRhLmVycm9yKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoXCJBbiBVbmtub3duIEVycm9yIE9jY3VycmVkXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxmLmFkZFVzZXIgPSBmdW5jdGlvbih1c2VyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wdXQoZW5kcG9pbnQgKyBcIi91c2Vyc1wiLCB1c2VyKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgY2FjaGUudXNlcnMucHVzaChyZXN1bHQuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LmRhdGE7XHJcbiAgICAgICAgICAgIH0sIGhhbmRsZVVzZXJFcnJvcik7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5jaGFuZ2VVc2VyUGFzc3dvcmQgPSBmdW5jdGlvbih1c2VyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KGVuZHBvaW50ICsgXCIvdXNlcnNcIiwgdXNlcikudGhlbihmdW5jdGlvbihyZXN1bHQpIHsgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuZGF0YTtcclxuICAgICAgICAgICAgfSwgaGFuZGxlVXNlckVycm9yKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLnJlbW92ZVVzZXIgPSBmdW5jdGlvbih1c2VySWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRodHRwLmRlbGV0ZShlbmRwb2ludCArIFwiL3VzZXJzL1wiICsgdXNlcklkKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHVzZXJzID0gW107XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goY2FjaGUudXNlcnMsIGZ1bmN0aW9uKHUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodS5pZCAhPT0gdXNlcklkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJzLnB1c2godSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FjaGUudXNlcnMgPSB1c2VycztcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5sb2dvdXRVc2VyID0gZnVuY3Rpb24gKHVzZXJJZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdChlbmRwb2ludCArIFwiL2xvZ291dC9cIiArIHVzZXJJZCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB1c2VyID0gcmVzdWx0LmRhdGE7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhY2hlLnVzZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHUgPSBjYWNoZS51c2Vyc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodS5pZCA9PT0gdXNlci5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmNvcHkodXNlciwgdSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXSk7IiwiYW5ndWxhci5tb2R1bGUoXCJvdmVyc2VlclwiKS5zZXJ2aWNlKFwiY29udHJvbFNlcnZpY2VcIiwgW1wiJGh0dHBcIiwgZnVuY3Rpb24oJGh0dHApIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHZhciBlbmRwb2ludCA9IFwiL3NlcnZpY2VzL2NvbnRyb2wvXCI7XHJcblxyXG4gICAgc2VsZi5wYXVzZSA9IGZ1bmN0aW9uKHByaW50ZXJJZCkge1xyXG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoZW5kcG9pbnQgKyBwcmludGVySWQgKyBcIi9wYXVzZVwiKTtcclxuICAgIH07XHJcblxyXG4gICAgc2VsZi5yZXN1bWUgPSBmdW5jdGlvbihwcmludGVySWQpIHtcclxuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KGVuZHBvaW50ICsgcHJpbnRlcklkICsgXCIvcmVzdW1lXCIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzZWxmLmNhbmNlbCA9IGZ1bmN0aW9uKHByaW50ZXJJZCkge1xyXG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoZW5kcG9pbnQgKyBwcmludGVySWQgKyBcIi9jYW5jZWxcIik7XHJcbiAgICB9O1xyXG5cclxuICAgIHNlbGYuc2V0VGVtcGVyYXR1cmUgPSBmdW5jdGlvbihwcmludGVySWQsIHRvb2wsIHRlbXApIHtcclxuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KGVuZHBvaW50ICsgcHJpbnRlcklkICsgXCIvdGVtcC9cIiArIHRvb2wgKyBcIi9cIiArIHRlbXApO1xyXG4gICAgfTtcclxuXHJcbiAgICBzZWxmLnNldEZlZWRSYXRlID0gZnVuY3Rpb24ocHJpbnRlcklkLCBmZWVkUmF0ZSkge1xyXG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoZW5kcG9pbnQgKyBwcmludGVySWQgKyBcIi9mZWVkL1wiICsgZmVlZFJhdGUpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzZWxmLnNldEZsb3dSYXRlID0gZnVuY3Rpb24ocHJpbnRlcklkLCB0b29sLCBmbG93UmF0ZSkge1xyXG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoZW5kcG9pbnQgKyBwcmludGVySWQgKyBcIi9mbG93L1wiICsgdG9vbCArIFwiL1wiICsgZmxvd1JhdGUpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzZWxmLnNldEZhblNwZWVkID0gZnVuY3Rpb24ocHJpbnRlcklkLCBzcGVlZCkge1xyXG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoZW5kcG9pbnQgKyBwcmludGVySWQgKyBcIi9mYW4vXCIgKyBzcGVlZCk7XHJcbiAgICB9O1xyXG59XSk7IiwiYW5ndWxhci5tb2R1bGUoXCJvdmVyc2VlclwiKVxyXG4gICAgLnNlcnZpY2UoXCJ0dW5lTW9kYWxcIiwgW1xyXG4gICAgICAgIFwiJG1kRGlhbG9nXCIsXHJcbiAgICAgICAgZnVuY3Rpb24gKCRtZERpYWxvZykge1xyXG4gICAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub3BlbiA9IGZ1bmN0aW9uKHByaW50ZXIsIHN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgJG1kRGlhbG9nLnNob3coe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogXCJjdHJsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJ0dW5lTW9kYWxDb250cm9sbGVyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwibW9kYWxzL3R1bmUuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrT3V0c2lkZVRvQ2xvc2U6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ZXI6IHByaW50ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogc3RhdHVzXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgXSlcclxuICAgIC5jb250cm9sbGVyKFwidHVuZU1vZGFsQ29udHJvbGxlclwiLCBbXHJcbiAgICAgICAgXCIkc2NvcGVcIixcclxuICAgICAgICBcIiRtZERpYWxvZ1wiLFxyXG4gICAgICAgIFwiY29udHJvbFNlcnZpY2VcIixcclxuICAgICAgICBcInByaW50ZXJcIixcclxuICAgICAgICBcInN0YXR1c1wiLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRtZERpYWxvZywgY29udHJvbFNlcnZpY2UsIHByaW50ZXIsIHN0YXR1cykge1xyXG4gICAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgc2VsZi5wcmludGVyID0gcHJpbnRlcjtcclxuICAgICAgICAgICAgc2VsZi5zdGF0dXMgPSBzdGF0dXM7XHJcbiAgICAgICAgICAgIHNlbGYuZmFuU3BlZWQgPSAwO1xyXG4gICAgICAgICAgICBzZWxmLmZlZWRSYXRlID0gMTAwO1xyXG4gICAgICAgICAgICBzZWxmLmZsb3dSYXRlcyA9IF8ubWFwKHByaW50ZXIuY29uZmlnLnRvb2xzLCBmdW5jdGlvbigpIHsgcmV0dXJuIDEwMDsgfSk7XHJcblxyXG4gICAgICAgICAgICBzZWxmLm5nTW9kZWxPcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgZGVib3VuY2U6IDQwMFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLiRvbihcIiRTdGF0dXNVcGRhdGUkXCIsIGZ1bmN0aW9uKGV2ZW50LCBzdGF0dXMpIHsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB2YXIgcHJpbnRlclN0YXR1cyA9IHN0YXR1c1tzZWxmLnByaW50ZXIuaWRdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHByaW50ZXJTdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnN0YXR1cyA9IHByaW50ZXJTdGF0dXM7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRkaWdlc3QoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmdW5jdGlvbiBsb2NrVWkocHJvbWlzZSkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5idXN5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24oKSB7IHNlbGYuYnVzeSA9IGZhbHNlOyB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2VsZi5wYXVzZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgbG9ja1VpKGNvbnRyb2xTZXJ2aWNlLnBhdXNlKHByaW50ZXIuaWQpKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYucmVzdW1lID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBsb2NrVWkoY29udHJvbFNlcnZpY2UucmVzdW1lKHByaW50ZXIuaWQpKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbmZpcm0gPSAkbWREaWFsb2cuY29uZmlybSgpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRpdGxlKFwiQ2FuY2VsIFByaW50XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRleHRDb250ZW50KFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGNhbmNlbCB0aGlzIHByaW50P1wiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vayhcIlllc1wiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYW5jZWwoXCJOb1wiKVxyXG5cdFx0XHRcdFx0Lm11bHRpcGxlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAkbWREaWFsb2cuc2hvdyhjb25maXJtKS50aGVuKGZ1bmN0aW9uICgpIHsgXHJcbiAgICAgICAgICAgICAgICAgICAgbG9ja1VpKGNvbnRyb2xTZXJ2aWNlLmNhbmNlbChwcmludGVyLmlkKSkudGhlbihmdW5jdGlvbigpe1xyXG5cdFx0XHRcdFx0XHRzZWxmLmhpZGUoKTtcclxuXHRcdFx0XHRcdH0pO1xyXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkgeyB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuaW5jcmVhc2VUZW1wID0gZnVuY3Rpb24gKHRvb2xOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdG9vbCA9IF8uZmluZChzdGF0dXMudGVtcGVyYXR1cmVzLCB7IG5hbWU6IHRvb2xOYW1lIH0pO1xyXG4gICAgICAgICAgICAgICAgdG9vbC50YXJnZXQgKz0gMTtcclxuXHJcbiAgICAgICAgICAgICAgICBsb2NrVWkoY29udHJvbFNlcnZpY2Uuc2V0VGVtcGVyYXR1cmUocHJpbnRlci5pZCwgdG9vbE5hbWUsIHRvb2wudGFyZ2V0KSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBzZWxmLmRlY3JlYXNlVGVtcCA9IGZ1bmN0aW9uICh0b29sTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRvb2wgPSBfLmZpbmQoc3RhdHVzLnRlbXBlcmF0dXJlcywgeyBuYW1lOiB0b29sTmFtZSB9KTtcclxuICAgICAgICAgICAgICAgIHRvb2wudGFyZ2V0IC09IDE7XHJcblxyXG4gICAgICAgICAgICAgICAgbG9ja1VpKGNvbnRyb2xTZXJ2aWNlLnNldFRlbXBlcmF0dXJlKHByaW50ZXIuaWQsIHRvb2xOYW1lLCB0b29sLnRhcmdldCkpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgc2VsZi5zZXRGZWVkUmF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgbG9ja1VpKGNvbnRyb2xTZXJ2aWNlLnNldEZlZWRSYXRlKHByaW50ZXIuaWQsIHNlbGYuZmVlZFJhdGUpKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuc2V0Rmxvd1JhdGUgPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0b29sTmFtZSA9IHNlbGYucHJpbnRlci5jb25maWcudG9vbHNbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgbG9ja1VpKGNvbnRyb2xTZXJ2aWNlLnNldEZsb3dSYXRlKHByaW50ZXIuaWQsIHRvb2xOYW1lLCBzZWxmLmZsb3dSYXRlc1tpbmRleF0pKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuc2V0RmFuU3BlZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGxvY2tVaShjb250cm9sU2VydmljZS5zZXRGYW5TcGVlZChwcmludGVyLmlkLCBzZWxmLmZhblNwZWVkKSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBzZWxmLmhpZGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICRtZERpYWxvZy5oaWRlKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgXSk7IiwiYW5ndWxhci5tb2R1bGUoXCJvdmVyc2VlclwiKS5jb250cm9sbGVyKFwiaW5kZXhDb250cm9sbGVyXCIsIFtcclxuICAgIFwiJHFcIixcclxuICAgIFwiJHNjb3BlXCIsXHJcbiAgICBcImNvbmZpZ3VyYXRpb25cIixcclxuICAgIGZ1bmN0aW9uICgkcSwgJHNjb3BlLCBjb25maWd1cmF0aW9uKSB7XHJcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLmxvYWRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAkcS5hbGwoe1xyXG4gICAgICAgICAgICBwcmludGVyczogY29uZmlndXJhdGlvbi5nZXRQcmludGVycygpLFxyXG4gICAgICAgICAgICBzZXR0aW5nczogY29uZmlndXJhdGlvbi5nZXRTZXR0aW5ncygpXHJcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbihyZXN1bHRzKSB7XHJcbiAgICAgICAgICAgIHNlbGYubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzZWxmLnNldHRpbmdzID0gcmVzdWx0cy5zZXR0aW5ncztcclxuICAgICAgICAgICAgc2VsZi5wcmludGVycyA9IHNlbGYuc2V0dGluZ3MuaGlkZURpc2FibGVkUHJpbnRlcnMgPyBfLmZpbHRlcihyZXN1bHRzLnByaW50ZXJzLCB7IGRpc2FibGVkOiBmYWxzZSB9KSA6IHJlc3VsdHMucHJpbnRlcnM7XHJcbiAgICAgICAgfSk7ICAgICAgICBcclxuICAgIH1cclxuXSk7IiwiYW5ndWxhci5tb2R1bGUoXCJvdmVyc2VlclwiKS5jb250cm9sbGVyKFwibG9naW5Db250cm9sbGVyXCIsIFtcIiRsb2NhdGlvblwiLCBcImF1dGhlbnRpY2F0aW9uXCIsIGZ1bmN0aW9uKCRsb2NhdGlvbiwgYXV0aGVudGljYXRpb24pIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICBzZWxmLnVzZXIgPSB7fTtcclxuXHJcbiAgICBzZWxmLmxvZ2luID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgc2VsZi5sb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICBzZWxmLmVycm9yID0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICBhdXRoZW50aWNhdGlvbi5sb2dpbihzZWxmLnVzZXIpLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHNlbGYubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9cIik7XHJcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcclxuICAgICAgICAgICAgc2VsZi5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHNlbGYuZXJyb3IgPSBlcnJvcjtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn1dKTsiLCJhbmd1bGFyLm1vZHVsZShcIm92ZXJzZWVyXCIpLmNvbnRyb2xsZXIoXCJhZGRQcmludGVyQ29udHJvbGxlclwiLCBbXHJcbiAgICBcIiRsb2NhdGlvblwiLFxyXG4gICAgXCIkbWRUb2FzdFwiLFxyXG4gICAgXCJjb25maWd1cmF0aW9uXCIsICAgXHJcbiAgICBmdW5jdGlvbigkbG9jYXRpb24sICRtZFRvYXN0LCBjb25maWd1cmF0aW9uKSB7XHJcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBcclxuICAgICAgICBzZWxmLnByaW50ZXJUeXBlcyA9IFtcIk9jdG9wcmludFwiLCBcIlJlcFJhcFwiXTsgXHJcbiAgICAgICAgc2VsZi5tb2RlbCA9IHt9OyAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCBcImNvbmZpZ1RlbXBsYXRlVXJsXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmICghc2VsZi5tb2RlbC5wcmludGVyVHlwZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBcInZpZXdzL2NvbmZpZ3VyYXRpb24vXCIgKyBzZWxmLm1vZGVsLnByaW50ZXJUeXBlICsgXCIuaHRtbFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNlbGYuYWRkUHJpbnRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2VsZi5sb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgc2VsZi5tb2RlbC5jb25maWcucHJpbnRlclR5cGUgPSBzZWxmLm1vZGVsLnByaW50ZXJUeXBlOyAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5jcmVhdGVQcmludGVyKHNlbGYubW9kZWwpLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9jb25maWd1cmF0aW9uXCIpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRvYXN0ID0gJG1kVG9hc3Quc2ltcGxlKClcclxuICAgICAgICAgICAgICAgICAgICAudGV4dENvbnRlbnQocmVzcG9uc2UuZGF0YS5lcnJvcilcclxuICAgICAgICAgICAgICAgICAgICAucG9zaXRpb24oXCJib3R0b20gcmlnaHRcIilcclxuICAgICAgICAgICAgICAgICAgICAuaGlkZURlbGF5KDMwMDApXHJcbiAgICAgICAgICAgICAgICAgICAgLnRvYXN0Q2xhc3MoXCJ0b2FzdC1lcnJvclwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkbWRUb2FzdC5zaG93KHRvYXN0KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXSk7IiwiYW5ndWxhci5tb2R1bGUoXCJvdmVyc2VlclwiKS5jb250cm9sbGVyKFwiYWRkVXNlckNvbnRyb2xsZXJcIiwgW1xyXG4gICAgXCIkc2NvcGVcIixcclxuICAgIFwiJGxvY2F0aW9uXCIsXHJcbiAgICBcImNvbmZpZ3VyYXRpb25cIixcclxuICAgIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgY29uZmlndXJhdGlvbikge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgc2VsZi51c2VyID0ge307XHJcbiAgICAgICAgc2VsZi5saWZldGltZXMgPSBbbnVsbCwgMSwgNywgMzAsIDkwXTtcclxuXHJcbiAgICAgICAgc2VsZi5hZGRVc2VyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzZWxmLmxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLmFkZFVzZXIoc2VsZi51c2VyKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL2NvbmZpZ3VyYXRpb25cIik7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmVycm9yID0gZTtcclxuICAgICAgICAgICAgfSkuZmluYWxseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXSk7IiwiYW5ndWxhci5tb2R1bGUoXCJvdmVyc2VlclwiKS5jb250cm9sbGVyKFwiZWRpdFByaW50ZXJDb250cm9sbGVyXCIsIFtcclxuICAgIFwiJHNjb3BlXCIsXHJcbiAgICBcIiRsb2NhdGlvblwiLFxyXG4gICAgXCIkcm91dGVQYXJhbXNcIixcclxuICAgIFwiJG1kRGlhbG9nXCIsXHJcbiAgICBcIiR0cmFuc2xhdGVcIixcclxuICAgIFwiY29uZmlndXJhdGlvblwiLFxyXG4gICAgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCAkcm91dGVQYXJhbXMsICRtZERpYWxvZywgJHRyYW5zbGF0ZSwgY29uZmlndXJhdGlvblNlcnZpY2UpIHtcclxuICAgICAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYubG9hZGluZyA9IHRydWU7ICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICBjb25maWd1cmF0aW9uU2VydmljZS5nZXRQcmludGVyKCRyb3V0ZVBhcmFtcy5pZCkudGhlbihmdW5jdGlvbiAocHJpbnRlcikgeyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBzZWxmLm1vZGVsID0gYW5ndWxhci5jb3B5KHByaW50ZXIpO1xyXG4gICAgICAgICAgICBzZWxmLmN1cnJlbnROYW1lID0gcHJpbnRlci5uYW1lO1xyXG4gICAgICAgICAgICBzZWxmLmNvbmZpZ1RlbXBsYXRlVXJsID0gXCJ2aWV3cy9jb25maWd1cmF0aW9uL1wiICsgc2VsZi5tb2RlbC5wcmludGVyVHlwZSArIFwiLmh0bWxcIjtcclxuICAgICAgICAgICAgc2VsZi5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNlbGYudXBkYXRlUHJpbnRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2VsZi5sb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgY29uZmlndXJhdGlvblNlcnZpY2UudXBkYXRlUHJpbnRlcihzZWxmLm1vZGVsKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL2NvbmZpZ3VyYXRpb25cIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuZGVsZXRlUHJpbnRlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgY29uZmlybSA9ICRtZERpYWxvZy5jb25maXJtKClcclxuICAgICAgICAgICAgICAgIC50aXRsZSgkdHJhbnNsYXRlLmluc3RhbnQoXCJ3YXJuaW5nXCIpKVxyXG4gICAgICAgICAgICAgICAgLnRleHRDb250ZW50KCR0cmFuc2xhdGUuaW5zdGFudChcImRlbGV0ZVByaW50ZXJQcm9tcHRcIikpXHJcbiAgICAgICAgICAgICAgICAub2soJHRyYW5zbGF0ZS5pbnN0YW50KFwieWVzXCIpKVxyXG4gICAgICAgICAgICAgICAgLmNhbmNlbCgkdHJhbnNsYXRlLmluc3RhbnQoXCJub1wiKSk7XHJcblxyXG4gICAgICAgICAgICAkbWREaWFsb2cuc2hvdyhjb25maXJtKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb25TZXJ2aWNlLmRlbGV0ZVByaW50ZXIoc2VsZi5tb2RlbCkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvY29uZmlndXJhdGlvblwiKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7IH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbl0pOyIsImFuZ3VsYXIubW9kdWxlKFwib3ZlcnNlZXJcIikuY29udHJvbGxlcihcImVkaXRVc2VyQ29udHJvbGxlclwiLCBbXHJcbiAgICBcIiRsb2NhdGlvblwiLCBcclxuICAgIFwiJHJvdXRlUGFyYW1zXCIsXHJcbiAgICBcIiRtZERpYWxvZ1wiLFxyXG4gICAgXCIkdHJhbnNsYXRlXCIsXHJcbiAgICBcImNvbmZpZ3VyYXRpb25cIiwgXHJcbiAgICBcImF1dGhlbnRpY2F0aW9uXCIsXHJcbiAgICBmdW5jdGlvbigkbG9jYXRpb24sICRyb3V0ZVBhcmFtcywgJG1kRGlhbG9nLCAkdHJhbnNsYXRlLCBjb25maWd1cmF0aW9uLCBhdXRoZW50aWNhdGlvbikge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgIHNlbGYubG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgc2VsZi5saWZldGltZXMgPSBbbnVsbCwgMSwgNywgMzAsIDkwXTtcclxuICAgICAgICBcclxuICAgICAgICBjb25maWd1cmF0aW9uLmdldFNldHRpbmdzKClcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oc2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbmZpZ3VyYXRpb24uZ2V0VXNlcnMoKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbih1c2Vycykge1xyXG4gICAgICAgICAgICAgICAgc2VsZi51c2VycyA9IHVzZXJzO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdXNlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdXNlciA9IHVzZXJzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1c2VyLmlkID09ICRyb3V0ZVBhcmFtcy5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnVzZXIgPSB1c2VyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuZmluYWxseShjYW5jZWxMb2FkaW5nKTtcclxuXHJcbiAgICAgICAgc2VsZi5sb2dvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHNlbGYudXNlci5pZCA9PT0gYXV0aGVudGljYXRpb24uYWN0aXZlVXNlci5pZCkge1xyXG4gICAgICAgICAgICAgICAgYXV0aGVudGljYXRpb24ubG9nb3V0KCk7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9sb2dpblwiKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubG9nb3V0VXNlcihzZWxmLnVzZXIuaWQpLnRoZW4oZnVuY3Rpb24odXNlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYudXNlciA9IHVzZXI7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuY2hhbmdlUGFzc3dvcmQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgc2VsZi5sb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZ3VyYXRpb24uY2hhbmdlUGFzc3dvcmQoc2VsZi51c2VyKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZ290b0NvbmZpZ3VyYXRpb24sIGhhbmRsZUVycm9yKVxyXG4gICAgICAgICAgICAgICAgLmZpbmFsbHkoY2FuY2VsTG9hZGluZyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5kZWxldGVVc2VyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLnVzZXJzLmxlbmd0aCA9PT0gMSAmJiBzZWxmLnNldHRpbmdzLnJlcXVpcmVzQXV0aGVudGljYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHZhciBhbGVydCA9ICRtZERpYWxvZy5hbGVydCgpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRpdGxlKCR0cmFuc2xhdGUuaW5zdGFudChcIndhcm5pbmdcIikpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRleHRDb250ZW50KCR0cmFuc2xhdGUuaW5zdGFudChcImRlbGV0ZUxhc3RVc2VyUHJvbXB0XCIpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vaygkdHJhbnNsYXRlLmluc3RhbnQoXCJkaXNtaXNzXCIpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkbWREaWFsb2cuc2hvdyhhbGVydCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBjb25maXJtID0gJG1kRGlhbG9nLmNvbmZpcm0oKVxyXG4gICAgICAgICAgICAgICAgLnRpdGxlKCR0cmFuc2xhdGUuaW5zdGFudChcIndhcm5pbmdcIikpXHJcbiAgICAgICAgICAgICAgICAudGV4dENvbnRlbnQoJHRyYW5zbGF0ZS5pbnN0YW50KFwiZGVsZXRlVXNlclByb21wdFwiKSlcclxuICAgICAgICAgICAgICAgIC5vaygkdHJhbnNsYXRlLmluc3RhbnQoXCJ5ZXNcIikpXHJcbiAgICAgICAgICAgICAgICAuY2FuY2VsKCR0cmFuc2xhdGUuaW5zdGFudChcIm5vXCIpKTtcclxuXHJcbiAgICAgICAgICAgICRtZERpYWxvZy5zaG93KGNvbmZpcm0pLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbmZpZ3VyYXRpb24ucmVtb3ZlVXNlcihzZWxmLnVzZXIuaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZ290b0NvbmZpZ3VyYXRpb24sIGhhbmRsZUVycm9yKVxyXG4gICAgICAgICAgICAgICAgICAgIC5maW5hbGx5KGNhbmNlbExvYWRpbmcpO1xyXG4gICAgICAgICAgICB9KTsgICAgICAgICAgICBcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBnb3RvQ29uZmlndXJhdGlvbigpIHtcclxuICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvY29uZmlndXJhdGlvblwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZUVycm9yKGUpIHtcclxuICAgICAgICAgICAgc2VsZi5lcnJvciA9IGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBjYW5jZWxMb2FkaW5nKCkge1xyXG4gICAgICAgICAgICBzZWxmLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbl0pOyIsImFuZ3VsYXIubW9kdWxlKFwib3ZlcnNlZXJcIikuY29udHJvbGxlcihcImNvbmZpZ3VyYXRpb25Db250cm9sbGVyXCIsIFtcclxuICAgIFwiJHNjb3BlXCIsXHJcbiAgICBcIiRxXCIsXHJcbiAgICBcIiRtZERpYWxvZ1wiLFxyXG4gICAgXCIkbG9jYXRpb25cIixcclxuICAgIFwiJHRyYW5zbGF0ZVwiLFxyXG4gICAgXCJjb25maWd1cmF0aW9uXCIsXHJcbiAgICBcImF1dGhlbnRpY2F0aW9uXCIsXHJcbiAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcSwgJG1kRGlhbG9nLCAkbG9jYXRpb24sICR0cmFuc2xhdGUsIGNvbmZpZ3VyYXRpb25TZXJ2aWNlLCBhdXRoZW50aWNhdGlvbikge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgc2VsZi5pbnRlcnZhbHMgPSBbMTAwMCwgNTAwMCwgMTAwMDAsIDE1MDAwLCAyMDAwMF07XHJcblxyXG4gICAgICAgIHNlbGYubG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgc2VsZi5yZWFkeSA9IGZhbHNlO1xyXG5cclxuICAgICAgICBjb25maWd1cmF0aW9uU2VydmljZS5nZXRDb25maWd1cmF0aW9uKCkudGhlbihmdW5jdGlvbiAoY29uZmlndXJhdGlvbikge1xyXG4gICAgICAgICAgICBzZWxmLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgc2VsZi5yZWFkeSA9IHRydWU7XHJcbiAgICAgICAgICAgIHNlbGYuc2V0dGluZ3NQcmlzdGluZSA9IGNvbmZpZ3VyYXRpb24uc2V0dGluZ3M7XHJcbiAgICAgICAgICAgIHNlbGYuc2V0dGluZ3MgPSBhbmd1bGFyLmNvcHkoY29uZmlndXJhdGlvbi5zZXR0aW5ncyk7XHJcbiAgICAgICAgICAgIHNlbGYucHJpbnRlcnMgPSBjb25maWd1cmF0aW9uLnByaW50ZXJzO1xyXG4gICAgICAgICAgICBzZWxmLnVzZXJzID0gY29uZmlndXJhdGlvbi51c2VycztcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc2VsZi51cGRhdGVTZXR0aW5ncyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHNlbGYuc2V0dGluZ3MucmVxdWlyZXNBdXRoZW50aWNhdGlvbiAmJiAhc2VsZi51c2Vycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb25maXJtID0gJG1kRGlhbG9nLmNvbmZpcm0oKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aXRsZSgkdHJhbnNsYXRlLmluc3RhbnQoXCJ3YXJuaW5nXCIpKVxyXG4gICAgICAgICAgICAgICAgICAgIC50ZXh0Q29udGVudCgkdHJhbnNsYXRlLmluc3RhbnQoXCJyZXF1aXJlc0F1dG5lbnRpY2F0aW9uUHJvbXB0XCIpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vaygkdHJhbnNsYXRlLmluc3RhbnQoXCJhZGRVc2VyXCIpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYW5jZWwoJHRyYW5zbGF0ZS5pbnN0YW50KFwiY2FuY2VsXCIpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkbWREaWFsb2cuc2hvdyhjb25maXJtKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9jb25maWd1cmF0aW9uL3VzZXJzL2FkZFwiKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJldmVydFNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmxvYWRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb25TZXJ2aWNlLnVwZGF0ZVNldHRpbmdzKHNlbGYuc2V0dGluZ3MpLnRoZW4oZnVuY3Rpb24gKHVwZGF0ZWRTZXR0aW5ncykge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubG9hZGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2lmIHVzZXIgYXV0aGVudGljYXRpb24gd2FzIHR1cm5lZCBvZmYgbG9nb3V0IHRoZSB1c2VyIHRoaXMgd2lsbCBwdXQgdGhlIFVJIGluIG5vbiB1c2VyIG1vZGVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5zZXR0aW5nc1ByaXN0aW5lLnJlcXVpcmVzQXV0aGVudGljYXRpb24gJiYgIXVwZGF0ZWRTZXR0aW5ncy5yZXF1aXJlc0F1dGhlbnRpY2F0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uLmxvZ291dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2lmIHVzZXIgYXV0aGVudGljYXRpb24gd2FzIHR1cm5lZCBvbiBmb3JjZSB0aGUgdXNlciB0byBsb2cgaW5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGYuc2V0dGluZ3NQcmlzdGluZS5yZXF1aXJlc0F1dGhlbnRpY2F0aW9uICYmIHVwZGF0ZWRTZXR0aW5ncy5yZXF1aXJlc0F1dGhlbnRpY2F0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL2xvZ2luXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0dGluZ3NQcmlzdGluZSA9IHVwZGF0ZWRTZXR0aW5ncztcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnNldHRpbmdzID0gYW5ndWxhci5jb3B5KHVwZGF0ZWRTZXR0aW5ncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXR0aW5nc0Zvcm0uJHNldFByaXN0aW5lKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYucmV2ZXJ0U2V0dGluZ3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHNlbGYuc2V0dGluZ3MgPSBhbmd1bGFyLmNvcHkoc2VsZi5zZXR0aW5nc1ByaXN0aW5lKTtcclxuICAgICAgICAgICAgc2VsZi5zZXR0aW5nc0Zvcm0uJHNldFByaXN0aW5lKCk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXSk7IiwiYW5ndWxhci5tb2R1bGUoJ292ZXJzZWVyJykucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkgeyR0ZW1wbGF0ZUNhY2hlLnB1dCgnZGlyZWN0aXZlcy9wcmludGVyLmh0bWwnLCc8ZGl2IGNsYXNzPVwicHJpbnRlclwiIG5nLWNsYXNzPVwieyB6b29tZWQ6IHByaW50ZXJDdHJsLnpvb20gfVwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVwid2ViY2FtXCIgbmctaWY9XCJwcmludGVyQ3RybC5tb2RlbC5jb25maWcud2ViQ2FtVXJsXCIgbmctY2xpY2s9XCJwcmludGVyQ3RybC50b2dnbGVab29tKClcIiBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6IHVybChcXCd7e3ByaW50ZXJDdHJsLndlYmNhbVVybH19XFwnKTtcIiAvPlxcclxcbiAgICA8ZGl2IGNsYXNzPVwiY29udGVudFwiPlxcclxcbiAgICAgICAgPG1kLXByb2dyZXNzLWxpbmVhciBtZC1tb2RlPVwiZGV0ZXJtaW5hdGVcIiB2YWx1ZT1cInt7IHByaW50ZXJDdHJsLnN0YXR1cy5wcm9ncmVzcyB9fVwiIHRpdGxlPVwie3sgcHJpbnRlckN0cmwuc3RhdHVzLnByb2dyZXNzIHwgbnVtYmVyIDogMSB9fSVcIj48L21kLXByb2dyZXNzLWxpbmVhcj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XCJzdGF0dXNcIj5cXHJcXG4gICAgICAgICAgICA8aDIgbmctYmluZD1cInByaW50ZXJDdHJsLm1vZGVsLm5hbWVcIj48L2gyPlxcclxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3RhdGVcIiBuZy1pZj1cInByaW50ZXJDdHJsLmNvbm5lY3RpbmdcIj5cXHJcXG4gICAgICAgICAgICAgICAgPHNwYW4gdHJhbnNsYXRlPVwiY29ubmVjdGluZ1wiPjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICA8L3NwYW4+XFxyXFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzdGF0ZVwiIG5nLWlmPVwiIXByaW50ZXJDdHJsLmNvbm5lY3RpbmcgJiYgcHJpbnRlckN0cmwubW9kZWwuZGlzYWJsZWRcIj5cXHJcXG4gICAgICAgICAgICAgICAgPHNwYW4gdHJhbnNsYXRlPVwiZGlzYWJsZWRcIj48L3NwYW4+XFxyXFxuICAgICAgICAgICAgPC9zcGFuPlxcclxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3RhdGVcIiBuZy1pZj1cInByaW50ZXJDdHJsLnN0YXR1c1wiPlxcclxcbiAgICAgICAgICAgICAgICA8c3BhbiB0cmFuc2xhdGU9XCJ7eyBwcmludGVyQ3RybC5zdGF0dXMuc3RhdGUgfX1cIj48L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgIDxzcGFuIG5nLWlmPVwicHJpbnRlckN0cmwuaXNQcmludGluZ1wiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgKDxzcGFuIHRyYW5zbGF0ZT1cInJlbWFpbmluZ1wiPjwvc3Bhbj46IDxzcGFuIG5nLWJpbmQ9XCJwcmludGVyQ3RybC5zdGF0dXMuZXN0aW1hdGVkVGltZVJlbWFpbmluZyB8IGR1cmF0aW9uXCI+PC9zcGFuPilcXHJcXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxcclxcbiAgICAgICAgICAgIDwvc3Bhbj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRyb2xzIHt7IHByaW50ZXJDdHJsLnN0YXR1cy5zdGF0ZSB9fVwiIG5nLWNsYXNzPVwieyBhY3RpdmU6IHByaW50ZXJDdHJsLmlzUHJpbnRpbmcgfHwgcHJpbnRlckN0cmwuaXNQYXVzZWQgfVwiPlxcclxcbiAgICAgICAgICAgIDxtZC1idXR0b24gY2xhc3M9XCJtZC1yYWlzZWQgbWQtcHJpbWFyeSByZXN1bWUgc21hbGxcIiBuZy1jbGljaz1cInByaW50ZXJDdHJsLnJlc3VtZSgpXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtcGxheVwiPjwvaT5cXHJcXG4gICAgICAgICAgICA8L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgICAgICA8bWQtYnV0dG9uIGNsYXNzPVwibWQtcmFpc2VkIG1kLXdhcm4gcGF1c2Ugc21hbGxcIiBuZy1jbGljaz1cInByaW50ZXJDdHJsLnBhdXNlKClcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1wYXVzZVwiPjwvaT5cXHJcXG4gICAgICAgICAgICA8L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgICAgICA8bWQtYnV0dG9uIGNsYXNzPVwibWQtcmFpc2VkIGNhbmNlbCBzbWFsbCBkYXJrXCIgbmctY2xpY2s9XCJwcmludGVyQ3RybC5jYW5jZWwoKVwiPlxcclxcbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXN0b3BcIj48L2k+XFxyXFxuICAgICAgICAgICAgPC9tZC1idXR0b24+XFxyXFxuICAgICAgICAgICAgPG1kLWJ1dHRvbiBjbGFzcz1cIm1kLXJhaXNlZCB0dW5lIHNtYWxsIGRhcmtcIiBuZy1jbGljaz1cInByaW50ZXJDdHJsLnR1bmUoKVwiPlxcclxcbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXdyZW5jaFwiPjwvaT5cXHJcXG4gICAgICAgICAgICA8L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRyb2xzXCIgbmctY2xhc3M9XCJ7IGFjdGl2ZTogcHJpbnRlckN0cmwuaXNJZGxlIHx8IHByaW50ZXJDdHJsLmlzRGlzY29ubmVjdGVkIH1cIj5cXHJcXG4gICAgICAgICAgICA8bWQtYnV0dG9uIGNsYXNzPVwibWQtcmFpc2VkIHdlYi1hY2Nlc3Mgc21hbGwgZGFya1wiIGhyZWY9XCJ7eyBwcmludGVyQ3RybC5tb2RlbC5jb25maWcudXJsIH19XCIgdGFyZ2V0PVwiX2JsYW5rXCIgdGl0bGU9XCJ7eyBcXCdvcGVuV2Vic2l0ZVxcJyB8IHRyYW5zbGF0ZSB9fVwiPlxcclxcbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLWV4dGVybmFsLWxpbmtcIj48L2k+XFxyXFxuICAgICAgICAgICAgPC9tZC1idXR0b24+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb250cm9sc1wiIG5nLWNsYXNzPVwieyBhY3RpdmU6IHByaW50ZXJDdHJsLmlzRGlzYWJsZWQgfVwiPlxcclxcbiAgICAgICAgICAgIDxtZC1idXR0b24gY2xhc3M9XCJtZC1yYWlzZWQgd2ViLWFjY2VzcyBzbWFsbCBkYXJrXCIgaHJlZj1cIi8jIS9jb25maWd1cmF0aW9uL2VkaXQve3twcmludGVyQ3RybC5tb2RlbC5pZH19XCIgdGl0bGU9XCJ7eyBcXCdlZGl0XFwnIHwgdHJhbnNsYXRlIH19XCI+XFxyXFxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtZ2VhclwiPjwvaT5cXHJcXG4gICAgICAgICAgICA8L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cInRlbXBzXCIgbmctaWY9XCIhcHJpbnRlckN0cmwuaXNEaXNjb25uZWN0ZWRcIj5cXHJcXG4gICAgICAgIDx0YWJsZSBjbGFzcz1cInRlbXAtdGFibGVcIiBuZy1yZXBlYXQ9XCJ0b29sIGluIHByaW50ZXJDdHJsLm1vZGVsLmNvbmZpZy50b29sc1wiPlxcclxcbiAgICAgICAgICAgIDx0Ym9keT5cXHJcXG4gICAgICAgICAgICAgICAgPHRyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHRkIG5nLWJpbmQ9XCJ0b29sXCI+PC90ZD5cXHJcXG4gICAgICAgICAgICAgICAgPC90cj5cXHJcXG4gICAgICAgICAgICAgICAgPHRyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHRkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIG5nLWJpbmQ9XCJwcmludGVyQ3RybC5nZXRBY3R1YWxUZW1wKHRvb2wpIHwgbnVtYmVyIDogMFwiPjwvc3Bhbj4gJmRlZztDIC9cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBuZy1iaW5kPVwicHJpbnRlckN0cmwuZ2V0VGFyZ2V0VGVtcCh0b29sKSB8IG51bWJlciA6IDBcIj48L3NwYW4+ICZkZWc7Q1xcclxcbiAgICAgICAgICAgICAgICAgICAgPC90ZD5cXHJcXG4gICAgICAgICAgICAgICAgPC90cj5cXHJcXG4gICAgICAgICAgICA8L3Rib2R5PlxcclxcbiAgICAgICAgPC90YWJsZT5cXHJcXG4gICAgICAgIDx0YWJsZSBjbGFzcz1cInRlbXAtdGFibGVcIiBuZy1pZj1cInByaW50ZXJDdHJsLm1vZGVsLmNvbmZpZy5oZWF0ZWRCZWRcIj5cXHJcXG4gICAgICAgICAgICA8dGJvZHk+XFxyXFxuICAgICAgICAgICAgICAgIDx0cj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDx0ZCB0cmFuc2xhdGU9XCJiZWRcIj48L3RkPlxcclxcbiAgICAgICAgICAgICAgICA8L3RyPlxcclxcbiAgICAgICAgICAgICAgICA8dHI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8dGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gbmctYmluZD1cInByaW50ZXJDdHJsLmdldEFjdHVhbFRlbXAoXFwnYmVkXFwnKSB8IG51bWJlciA6IDBcIj48L3NwYW4+ICZkZWc7QyAvXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gbmctYmluZD1cInByaW50ZXJDdHJsLmdldFRhcmdldFRlbXAoXFwnYmVkXFwnKSB8IG51bWJlciA6IDBcIj48L3NwYW4+ICZkZWc7Q1xcclxcbiAgICAgICAgICAgICAgICAgICAgPC90ZD5cXHJcXG4gICAgICAgICAgICAgICAgPC90cj5cXHJcXG4gICAgICAgICAgICA8L3Rib2R5PlxcclxcbiAgICAgICAgPC90YWJsZT5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9kaXY+Jyk7XG4kdGVtcGxhdGVDYWNoZS5wdXQoJ21vZGFscy90dW5lLmh0bWwnLCc8bWQtZGlhbG9nIGNsYXNzPVwidHVuZVwiIGZsZXgtZ3QtbWQ9XCI0MFwiIGZsZXg9XCI4MFwiPlxcclxcbiAgICA8bWQtdG9vbGJhciBjbGFzcz1cIm1kLWh1ZS0yXCI+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVwibWQtdG9vbGJhci10b29sc1wiPlxcclxcbiAgICAgICAgICAgIDxkaXYgZmxleD5cXHJcXG4gICAgICAgICAgICAgICAgPGgyPnt7IGN0cmwucHJpbnRlci5uYW1lIH19PC9oMj5cXHJcXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzdGF0dXNcIiB0cmFuc2xhdGU9XCJ7eyBjdHJsLnN0YXR1cy5zdGF0ZSB9fVwiPjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8YSBjbGFzcz1cImFjdGlvbi1idXR0b25cIiBuZy1pZj1cImN0cmwucHJpbnRlci5jb25maWcudXJsXCIgaHJlZj1cInt7IGN0cmwucHJpbnRlci5jb25maWcudXJsIH19XCIgdGFyZ2V0PVwiX2JsYW5rXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxzcGFuIHRyYW5zbGF0ZT1cIm9wZW5XZWJzaXRlXCI+PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLWV4dGVybmFsLWxpbmtcIj48L2k+XFxyXFxuICAgICAgICAgICAgPC9hPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgIDwvbWQtdG9vbGJhcj5cXHJcXG4gICAgPG1kLWRpYWxvZy1jb250ZW50PlxcclxcbiAgICAgICAgPGRpdiBsYXlvdXQ9XCJyb3dcIiBjbGFzcz1cInByb2dyZXNzXCI+XFxyXFxuICAgICAgICAgICAgPGRpdiBmbGV4PlxcclxcbiAgICAgICAgICAgICAgICA8aDUgdHJhbnNsYXRlPVwiUHJvZ3Jlc3NcIj48L2g1PlxcclxcbiAgICAgICAgICAgICAgICA8bWQtcHJvZ3Jlc3MtbGluZWFyIG1kLW1vZGU9XCJkZXRlcm1pbmF0ZVwiIHZhbHVlPVwie3sgY3RybC5zdGF0dXMucHJvZ3Jlc3MgfX1cIiB0aXRsZT1cInt7IGN0cmwuc3RhdHVzLnByb2dyZXNzIH19JVwiPjwvbWQtcHJvZ3Jlc3MtbGluZWFyPlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGxheW91dD5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZWxhcHNlZC10aW1lXCIgZmxleD1cIjUwXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0aW1lLWxhYmVsXCI+PHNwYW4gdHJhbnNsYXRlPVwiZWxhcHNlZFwiPjwvc3Bhbj46PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt7IGN0cmwuc3RhdHVzLmVsYXBzZWRQcmludFRpbWUgfCBkdXJhdGlvbiB9fVxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlc3RpbWF0ZWQtdGltZVwiIGZsZXg9XCI1MFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGltZS1sYWJlbFwiPjxzcGFuIHRyYW5zbGF0ZT1cImVzdGltYXRlZFwiPjwvc3Bhbj46IDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICBcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB7eyBjdHJsLnN0YXR1cy5lc3RpbWF0ZWRUaW1lUmVtYWluaW5nIHwgZHVyYXRpb24gfX1cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByaW50LWFjdGlvbnNcIj5cXHJcXG4gICAgICAgICAgICAgICAgPG1kLWJ1dHRvbiBjbGFzcz1cIm1kLXJhaXNlZCBtZC1wcmltYXJ5IHNtYWxsXCIgbmctaWY9XCJjdHJsLnN0YXR1cy5zdGF0ZSA9PT0gXFwnUGF1c2VkXFwnXCIgbmctY2xpY2s9XCJjdHJsLnJlc3VtZSgpXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXBsYXlcIj48L2k+XFxyXFxuICAgICAgICAgICAgICAgIDwvbWQtYnV0dG9uPlxcclxcbiAgICAgICAgICAgICAgICA8bWQtYnV0dG9uIGNsYXNzPVwibWQtcmFpc2VkIG1kLXdhcm4gc21hbGxcIiBuZy1pZj1cImN0cmwuc3RhdHVzLnN0YXRlID09PSBcXCdQcmludGluZ1xcJ1wiIG5nLWNsaWNrPVwiY3RybC5wYXVzZSgpXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXBhdXNlXCI+PC9pPlxcclxcbiAgICAgICAgICAgICAgICA8L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgICAgICAgICAgPG1kLWJ1dHRvbiBjbGFzcz1cIm1kLXJhaXNlZCBzbWFsbCBsaWdodFwiIG5nLWNsaWNrPVwiY3RybC5jYW5jZWwoKVwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1zdG9wXCI+PC9pPlxcclxcbiAgICAgICAgICAgICAgICA8L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBsYXlvdXQtZ3Qtc209XCJyb3dcIiBsYXlvdXQteHM9XCJjb2x1bW5cIj5cXHJcXG4gICAgICAgICAgICA8ZGl2IGZsZXggZmxleC1zbT1cIjEwMFwiPlxcclxcbiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9XCJ0ZW1wLXRhYmxlXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8dGJvZHk+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cInRlbXAgaW4gY3RybC5zdGF0dXMudGVtcGVyYXR1cmVzXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBuZy1iaW5kPVwidGVtcC5uYW1lXCI+PC90aD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwiYWN0dWFsLXRlbXBcIiBuZy1jbGFzcz1cInsgd2FybTogKHRlbXAuYWN0dWFsIC8gdGVtcC50YXJnZXQgPiAwLjUpLCBob3Q6ICh0ZW1wLmFjdHVhbCAvIHRlbXAudGFyZ2V0ID4gMC44NSkgfVwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgdGVtcC5hY3R1YWwgfCBudW1iZXIgOiAxIH19ICZkZWc7Q1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWQtYnV0dG9uIGNsYXNzPVwibWQtcmFpc2VkIHNtYWxsZXJcIiBuZy1jbGljaz1cImN0cmwuZGVjcmVhc2VUZW1wKHRlbXAubmFtZSlcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLW1pbnVzXCI+PC9pPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tZC1idXR0b24+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRhcmdldC10ZW1wXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgdGVtcC50YXJnZXQgfCBudW1iZXIgOiAwIH19ICZkZWc7Q1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPiBcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZC1idXR0b24gY2xhc3M9XCJtZC1yYWlzZWQgc21hbGxlclwiIG5nLWNsaWNrPVwiY3RybC5pbmNyZWFzZVRlbXAodGVtcC5uYW1lKVwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtcGx1c1wiPjwvaT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWQtYnV0dG9uPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxcclxcbiAgICAgICAgICAgICAgICA8L3RhYmxlPlxcclxcbiAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDxkaXYgZmxleCBmbGV4LXNtPVwiMTAwXCIgY2xhc3M9XCJjb250cm9sc1wiPlxcclxcbiAgICAgICAgICAgICAgICA8dGFibGU+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8dGJvZHk+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8dHI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHRyYW5zbGF0ZT1cImZhblNwZWVkXCI+PC90aD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZC1zbGlkZXIgY2xhc3M9XCJtZC1wcmltYXJ5XCIgZmxleCBtZC1kaXNjcmV0ZSBuZy1tb2RlbD1cImN0cmwuZmFuU3BlZWRcIiBuZy1tb2RlbC1vcHRpb25zPVwiY3RybC5uZ01vZGVsT3B0aW9uc1wiIG5nLWNoYW5nZT1cImN0cmwuc2V0RmFuU3BlZWQoKVwiIHN0ZXA9XCIxXCIgbWluPVwiMFwiIG1heD1cIjEwMFwiPjwvbWQtc2xpZGVyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBjdHJsLmZhblNwZWVkIH19JVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCB0cmFuc2xhdGU9XCJmZWVkUmF0ZVwiPjwvdGg+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1kLXNsaWRlciBjbGFzcz1cIm1kLXByaW1hcnlcIiBmbGV4IG1kLWRpc2NyZXRlIG5nLW1vZGVsPVwiY3RybC5mZWVkUmF0ZVwiIG5nLW1vZGVsLW9wdGlvbnM9XCJjdHJsLm5nTW9kZWxPcHRpb25zXCIgbmctY2hhbmdlPVwiY3RybC5zZXRGZWVkUmF0ZSgpXCIgc3RlcD1cIjFcIiBtaW49XCI1MFwiIG1heD1cIjE1MFwiPjwvbWQtc2xpZGVyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBjdHJsLmZlZWRSYXRlIH19JVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cInRvb2wgaW4gY3RybC5wcmludGVyLmNvbmZpZy50b29sc1wiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdHJhbnNsYXRlPVwiZmxvd1JhdGVcIj48L3NwYW4+IDxzcGFuIGNsYXNzPVwidG9vbC1uYW1lXCIgbmctaWY9XCJjdHJsLnByaW50ZXIuY29uZmlnLnRvb2xzLmxlbmd0aCA+IDFcIj5cIiB7e3Rvb2x9fTwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RoPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1kLXNsaWRlciBjbGFzcz1cIm1kLXByaW1hcnlcIiBmbGV4IG1kLWRpc2NyZXRlIG5nLW1vZGVsPVwiY3RybC5mbG93UmF0ZXNbJGluZGV4XVwiIG5nLW1vZGVsLW9wdGlvbnM9XCJjdHJsLm5nTW9kZWxPcHRpb25zXCIgbmctY2hhbmdlPVwiY3RybC5zZXRGbG93UmF0ZSgkaW5kZXgpXCIgc3RlcD1cIjFcIiBtaW49XCI3NVwiIG1heD1cIjEyNVwiPjwvbWQtc2xpZGVyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBjdHJsLmZsb3dSYXRlc1skaW5kZXhdIH19JVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT5cXHJcXG4gICAgICAgICAgICAgICAgPC90YWJsZT5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICA8L21kLWRpYWxvZy1jb250ZW50PlxcclxcbiAgICA8bWQtZGlhbG9nLWFjdGlvbnMgbGF5b3V0PVwicm93XCIgbGF5b3V0LWFsaWduPVwiZW5kIGNlbnRlclwiPlxcclxcbiAgICAgICAgPG1kLWJ1dHRvbiBuZy1jbGljaz1cImN0cmwuaGlkZSgpXCI+XFxyXFxuICAgICAgICAgICAgPHNwYW4gdHJhbnNsYXRlPVwiZGlzbWlzc1wiPjwvc3Bhbj5cXHJcXG4gICAgICAgIDwvbWQtYnV0dG9uPlxcclxcbiAgICA8L21kLWRpYWxvZy1hY3Rpb25zPlxcclxcbjwvbWQtZGlhbG9nPicpO1xuJHRlbXBsYXRlQ2FjaGUucHV0KCd2aWV3cy9pbmRleC5odG1sJywnPGRpdj5cXHJcXG4gICAgPGRpdiBuZy1pZj1cIiFjdHJsLmxvYWRpbmcgJiYgY3RybC5wcmludGVycy5sZW5ndGhcIj5cXHJcXG4gICAgICAgIDxyZXNpemVyIGNvdW50PVwiY3RybC5wcmludGVycy5sZW5ndGhcIiBvdXRwdXQ9XCJjdHJsLnJlc2l6ZXJcIj5cXHJcXG4gICAgICAgICAgICA8cHJpbnRlciBuZy1yZXBlYXQ9XCJwcmludGVyIGluIGN0cmwucHJpbnRlcnNcIiBtb2RlbD1cInByaW50ZXJcIiBzdHlsZT1cIndpZHRoOiB7eyBjdHJsLnJlc2l6ZXIud2lkdGggfX0lOyBoZWlnaHQ6IHt7IGN0cmwucmVzaXplci5oZWlnaHQgfX1weFwiPjwvcHJpbnRlcj5cXHJcXG4gICAgICAgIDwvcmVzaXplcj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XCJuby1wcmludGVyc1wiIG5nLWlmPVwiIWN0cmwubG9hZGluZyAmJiAhY3RybC5wcmludGVycy5sZW5ndGhcIj5cXHJcXG4gICAgICAgIDxwIHRyYW5zbGF0ZT1cIm5vUHJpbnRlclwiPjwvcD5cXHJcXG4gICAgICAgIDxwPlxcclxcbiAgICAgICAgICAgIDxtZC1idXR0b24gaHJlZj1cIi8jIS9jb25maWd1cmF0aW9uL3ByaW50ZXJzL2FkZFwiPlxcclxcbiAgICAgICAgICAgICAgICA8c3BhbiB0cmFuc2xhdGU9XCJub1ByaW50ZXJzQWRkUHJpbnRlclwiPjwvc3Bhbj4gICAgICAgICAgICAgICAgXFxyXFxuICAgICAgICAgICAgPC9tZC1idXR0b24+XFxyXFxuICAgICAgICAgICAgPG1kLWJ1dHRvbiBocmVmPVwiLyMhL2NvbmZpZ3VyYXRpb25cIj5cXHJcXG4gICAgICAgICAgICAgICAgPHNwYW4gdHJhbnNsYXRlPVwibm9QcmludGVyc0VkaXRQcmludGVyc1wiPjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICA8L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgIDwvcD5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9kaXY+Jyk7XG4kdGVtcGxhdGVDYWNoZS5wdXQoJ3ZpZXdzL2xvZ2luLmh0bWwnLCc8Zm9ybSBuYW1lPVwibG9naW5Gb3JtXCIgbmctZGlzYWJsZWQ9XCJjdHJsLmxvYWRpbmdcIiBub3ZhbGlkYXRlPlxcclxcbiAgICA8bWQtY2FyZCBmbGV4LWd0LXNtPVwiNTBcIiBmbGV4LW9mZnNldC1ndC1zbT1cIjI1XCI+XFxyXFxuICAgICAgICA8bWQtY2FyZC10aXRsZT5cXHJcXG4gICAgICAgICAgICA8bWQtY2FyZC10aXRsZS10ZXh0PlxcclxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kLWhlYWRsaW5lXCIgdHJhbnNsYXRlPVwibG9naW5cIj48L3NwYW4+XFxyXFxuICAgICAgICAgICAgPC9tZC1jYXJkLXRpdGxlLXRleHQ+XFxyXFxuICAgICAgICA8L21kLWNhcmQtdGl0bGU+XFxyXFxuICAgICAgICA8bWQtY2FyZC1jb250ZW50PlxcclxcbiAgICAgICAgICAgIDxtZC1pbnB1dC1jb250YWluZXIgbmctaWY9XCJjdHJsLmVycm9yXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlcnJvclwiIG5nLWJpbmQ9XCJjdHJsLmVycm9yXCI+PC9kaXY+XFxyXFxuICAgICAgICAgICAgPC9tZC1pbnB1dC1jb250YWluZXI+ICAgICAgICAgICAgXFxyXFxuICAgICAgICAgICAgPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz1cIm1kLWJsb2NrXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxsYWJlbCB0cmFuc2xhdGU9XCJ1c2VybmFtZVwiPjwvbGFiZWw+XFxyXFxuICAgICAgICAgICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cImN0cmwudXNlci51c2VybmFtZVwiIHRpdGxlPVwie3sgdXNlcm5hbWUgfCB0cmFuc2xhdGUgfX1cIiByZXF1aXJlZC8+XFxyXFxuICAgICAgICAgICAgPC9tZC1pbnB1dC1jb250YWluZXI+XFxyXFxuICAgICAgICAgICAgPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz1cIm1kLWJsb2NrXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxsYWJlbCB0cmFuc2xhdGU9XCJwYXNzd29yZFwiPjwvbGFiZWw+XFxyXFxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicGFzc3dvcmRcIiBuZy1tb2RlbD1cImN0cmwudXNlci5wYXNzd29yZFwiIHRpdGxlPVwie3sgcGFzc3dvcmQgfCB0cmFuc2xhdGUgfX1cIiByZXF1aXJlZC8+XFxyXFxuICAgICAgICAgICAgPC9tZC1pbnB1dC1jb250YWluZXI+XFxyXFxuICAgICAgICA8L21kLWNhcmQtY29udGVudD5cXHJcXG4gICAgICAgIDxtZC1jYXJkLWFjdGlvbnMgbGF5b3V0PVwicm93XCIgbGF5b3V0LWFsaWduPVwiZW5kIGNlbnRlclwiPlxcclxcbiAgICAgICAgICAgIDxtZC1idXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwibWQtcHJpbWFyeVwiIG5nLWNsaWNrPVwiY3RybC5sb2dpbigpXCIgbmctZGlzYWJsZWQ9XCJjdHJsLmxvYWRpbmcgfHwgbG9naW5Gb3JtLiRwcmlzdGluZSB8fCBsb2dpbkZvcm0uJGludmFsaWRcIj5cXHJcXG4gICAgICAgICAgICAgICAgPHNwYW4gdHJhbnNsYXRlPVwibG9naW5cIj48L3NwYW4+XFxyXFxuICAgICAgICAgICAgPC9tZC1idXR0b24+XFxyXFxuICAgICAgICA8L21kLWNhcmQtYWN0aW9ucz5cXHJcXG4gICAgPC9tZC1jYXJkPlxcclxcbjwvZm9ybT4nKTtcbiR0ZW1wbGF0ZUNhY2hlLnB1dCgndmlld3MvY29uZmlndXJhdGlvbi9hZGQuaHRtbCcsJ1xcclxcbjxmb3JtIG5hbWU9XCJjdHJsLmFkZEZvcm1cIiBjbGFzcz1cImZvcm0tdmVydGljYWxcIiBub3ZhbGlkYXRlPlxcclxcbiAgICA8bWQtY2FyZCBmbGV4LWd0LXNtPVwiNTBcIiBmbGV4LW9mZnNldC1ndC1zbT1cIjI1XCI+XFxyXFxuICAgICAgICA8bWQtY2FyZC10aXRsZT5cXHJcXG4gICAgICAgICAgICA8bWQtY2FyZC10aXRsZS10ZXh0PlxcclxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kLWhlYWRsaW5lXCIgdHJhbnNsYXRlPVwiYWRkUHJpbnRlclwiPjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICA8L21kLWNhcmQtdGl0bGUtdGV4dD5cXHJcXG4gICAgICAgIDwvbWQtY2FyZC10aXRsZT5cXHJcXG4gICAgICAgIDxtZC1jYXJkLWNvbnRlbnQ+XFxyXFxuICAgICAgICAgICAgPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz1cIm1kLWJsb2NrXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxsYWJlbCB0cmFuc2xhdGU9XCJwcmludGVyVHlwZVwiPjwvbGFiZWw+XFxyXFxuICAgICAgICAgICAgICAgIDxtZC1zZWxlY3QgbmctbW9kZWw9XCJjdHJsLm1vZGVsLnByaW50ZXJUeXBlXCIgbmctZGlzYWJsZWQ9XCJjdHJsLnByaW50ZXJUeXBlcy5sZW5ndGggPT09IDFcIiByZXF1aXJlZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxtZC1vcHRpb24gbmctcmVwZWF0PVwidHlwZSBpbiBjdHJsLnByaW50ZXJUeXBlc1wiIHZhbHVlPVwie3t0eXBlfX1cIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB7eyB0eXBlIHwgdHJhbnNsYXRlIH19XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L21kLW9wdGlvbj5cXHJcXG4gICAgICAgICAgICAgICAgPC9tZC1zZWxlY3Q+XFxyXFxuICAgICAgICAgICAgPC9tZC1pbnB1dC1jb250YWluZXI+XFxyXFxuICAgICAgICAgICAgPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz1cIm1kLWJsb2NrXCIgbmctaWY9XCJjdHJsLm1vZGVsLnByaW50ZXJUeXBlXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxsYWJlbCB0cmFuc2xhdGU9XCJuYW1lXCI+PC9sYWJlbD5cXHJcXG4gICAgICAgICAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwiY3RybC5tb2RlbC5uYW1lXCIgcmVxdWlyZWQgLz5cXHJcXG4gICAgICAgICAgICA8L21kLWlucHV0LWNvbnRhaW5lcj5cXHJcXG4gICAgICAgICAgICA8bmctaW5jbHVkZSBuZy1pZj1cImN0cmwuY29uZmlnVGVtcGxhdGVVcmxcIiBzcmM9XCJjdHJsLmNvbmZpZ1RlbXBsYXRlVXJsXCI+PC9uZy1pbmNsdWRlPlxcclxcbiAgICAgICAgPC9tZC1jYXJkLWNvbnRlbnQ+XFxyXFxuICAgICAgICA8bWQtY2FyZC1hY3Rpb25zIGxheW91dD1cInJvd1wiIGxheW91dC1hbGlnbj1cImVuZCBjZW50ZXJcIj5cXHJcXG4gICAgICAgICAgICA8bWQtYnV0dG9uIGhyZWY9XCIvIyEvY29uZmlndXJhdGlvblwiIHRyYW5zbGF0ZT1cImNhbmNlbFwiPjwvbWQtYnV0dG9uPlxcclxcbiAgICAgICAgICAgIDxtZC1idXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwibWQtcHJpbWFyeVwiIG5nLWNsaWNrPVwiY3RybC5hZGRQcmludGVyKClcIiBuZy1kaXNhYmxlZD1cImN0cmwuYWRkRm9ybS4kcHJpc3RpbmUgfHwgY3RybC5hZGRGb3JtLiRpbnZhbGlkXCIgdHJhbnNsYXRlPVwic2F2ZVwiPjwvbWQtYnV0dG9uPlxcclxcbiAgICAgICAgPC9tZC1jYXJkLWFjdGlvbnM+XFxyXFxuICAgIDwvbWQtY2FyZD5cXHJcXG48L2Zvcm0+Jyk7XG4kdGVtcGxhdGVDYWNoZS5wdXQoJ3ZpZXdzL2NvbmZpZ3VyYXRpb24vYWRkVXNlci5odG1sJywnPGZvcm0gbmFtZT1cImN0cmwuYWRkRm9ybVwiIG5vdmFsaWRhdGU+XFxyXFxuICAgIDxtZC1jYXJkIGZsZXgtZ3Qtc209XCI1MFwiIGZsZXgtb2Zmc2V0LWd0LXNtPVwiMjVcIj5cXHJcXG4gICAgICAgIDxtZC1jYXJkLXRpdGxlPlxcclxcbiAgICAgICAgICAgIDxtZC1jYXJkLXRpdGxlLXRleHQ+XFxyXFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWQtaGVhZGxpbmVcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIHt7IFxcJ2FkZFxcJyB8IHRyYW5zbGF0ZSB9fSB7eyBcXCd1c2VyXFwnIHwgdHJhbnNsYXRlIH19XFxyXFxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cXHJcXG4gICAgICAgICAgICA8L21kLWNhcmQtdGl0bGUtdGV4dD5cXHJcXG4gICAgICAgIDwvbWQtY2FyZC10aXRsZT5cXHJcXG4gICAgICAgIDxtZC1jYXJkLWNvbnRlbnQ+XFxyXFxuICAgICAgICAgICAgPG1kLWlucHV0LWNvbnRhaW5lciBuZy1pZj1cImN0cmwuZXJyb3JcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVycm9yXCIgbmctYmluZD1cImN0cmwuZXJyb3JcIj48L2Rpdj5cXHJcXG4gICAgICAgICAgICA8L21kLWlucHV0LWNvbnRhaW5lcj5cXHJcXG4gICAgICAgICAgICA8bWQtaW5wdXQtY29udGFpbmVyIGNsYXNzPVwibWQtYmxvY2tcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGxhYmVsIHRyYW5zbGF0ZT1cInVzZXJuYW1lXCI+PC9sYWJlbD5cXHJcXG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJjdHJsLnVzZXIudXNlcm5hbWVcIiBtaW49XCI4XCIgcmVxdWlyZWQgLz5cXHJcXG4gICAgICAgICAgICA8L21kLWlucHV0LWNvbnRhaW5lcj5cXHJcXG4gICAgICAgICAgICA8bWQtaW5wdXQtY29udGFpbmVyIGNsYXNzPVwibWQtYmxvY2tcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGxhYmVsIHRyYW5zbGF0ZT1cInBhc3N3b3JkRWRpdFwiPjwvbGFiZWw+XFxyXFxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicGFzc3dvcmRcIiBuZy1tb2RlbD1cImN0cmwudXNlci5wYXNzd29yZFwiIG1pbj1cIjhcIiByZXF1aXJlZCAvPlxcclxcbiAgICAgICAgICAgIDwvbWQtaW5wdXQtY29udGFpbmVyPlxcclxcbiAgICAgICAgICAgIDxtZC1pbnB1dC1jb250YWluZXIgY2xhc3M9XCJtZC1ibG9ja1wiPlxcclxcbiAgICAgICAgICAgICAgICA8bGFiZWwgdHJhbnNsYXRlPVwiY29uZmlybVBhc3N3b3JkXCI+PC9sYWJlbD5cXHJcXG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJwYXNzd29yZFwiIG5nLW1vZGVsPVwiY3RybC51c2VyLnBhc3N3b3JkTWF0Y2hcIiBtYXRjaD1cImN0cmwudXNlci5wYXNzd29yZFwiIHJlcXVpcmVkIC8+XFxyXFxuICAgICAgICAgICAgPC9tZC1pbnB1dC1jb250YWluZXI+IFxcclxcbiAgICAgICAgICAgIDxtZC1pbnB1dC1jb250YWluZXIgY2xhc3M9XCJtZC1ibG9ja1wiPlxcclxcbiAgICAgICAgICAgICAgICA8bGFiZWwgdHJhbnNsYXRlPVwic2Vzc2lvbkxpZmV0aW1lXCI+PC9sYWJlbD5cXHJcXG4gICAgICAgICAgICAgICAgPG1kLXNlbGVjdCBuZy1tb2RlbD1cImN0cmwudXNlci5zZXNzaW9uTGlmZXRpbWVcIiB0aXRsZT1cInt7IHNlc3Npb25MaWZldGltZVRpdGxlIHwgdHJhbnNsYXRlIH19XCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8bWQtb3B0aW9uIG5nLXJlcGVhdD1cImxpZmV0aW1lIGluIGN0cmwubGlmZXRpbWVzXCIgbmctdmFsdWU9XCJsaWZldGltZVwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0IG5nLWlmPVwibGlmZXRpbWVcIj57eyBsaWZldGltZSB9fSB7eyBcXCdkYXlzXFwnIHwgdHJhbnNsYXRlIH19PC90ZXh0PlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0IG5nLWlmPVwiIWxpZmV0aW1lXCI+e3sgXFwnaW5kZWZpbml0ZVxcJyB8IHRyYW5zbGF0ZSB9fTwvdGV4dD5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvbWQtb3B0aW9uPlxcclxcbiAgICAgICAgICAgICAgICA8L21kLXNlbGVjdD5cXHJcXG4gICAgICAgICAgICA8L21kLWlucHV0LWNvbnRhaW5lcj4gXFxyXFxuICAgICAgICA8L21kLWNhcmQtY29udGVudD5cXHJcXG4gICAgICAgIDxtZC1jYXJkLWFjdGlvbnMgbGF5b3V0PVwicm93XCIgbGF5b3V0LWFsaWduPVwiZW5kIGNlbnRlclwiPlxcclxcbiAgICAgICAgICAgIDxtZC1idXR0b24gaHJlZj1cIi8jIS9jb25maWd1cmF0aW9uXCIgdHJhbnNsYXRlPVwiY2FuY2VsXCI+PC9tZC1idXR0b24+XFxyXFxuICAgICAgICAgICAgPG1kLWJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJtZC1wcmltYXJ5XCIgbmctY2xpY2s9XCJjdHJsLmFkZFVzZXIoKVwiIG5nLWRpc2FibGVkPVwiY3RybC5hZGRGb3JtLiRwcmlzdGluZSB8fCBjdHJsLmFkZEZvcm0uJGludmFsaWQgfHwgY3RybC5sb2FkaW5nXCIgdHJhbnNsYXRlPVwic2F2ZVwiPjwvbWQtYnV0dG9uPlxcclxcbiAgICAgICAgPC9tZC1jYXJkLWFjdGlvbnM+XFxyXFxuICAgIDwvbWQtY2FyZD5cXHJcXG48L2Zvcm0+Jyk7XG4kdGVtcGxhdGVDYWNoZS5wdXQoJ3ZpZXdzL2NvbmZpZ3VyYXRpb24vZWRpdC5odG1sJywnPGZvcm0gbmFtZT1cImVkaXRGb3JtXCIgbm92YWxpZGF0ZT5cXHJcXG4gICAgPG1kLWNhcmQgZmxleC1ndC1zbT1cIjUwXCIgZmxleC1vZmZzZXQtZ3Qtc209XCIyNVwiPlxcclxcbiAgICAgICAgPG1kLWNhcmQtdGl0bGU+XFxyXFxuICAgICAgICAgICAgPG1kLWNhcmQtdGl0bGUtdGV4dD5cXHJcXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZC1oZWFkbGluZVwiPnt7IFxcJ2VkaXRpbmdcXCcgfCB0cmFuc2xhdGUgfX0ge3sgY3RybC5jdXJyZW50TmFtZSB9fTwvc3Bhbj5cXHJcXG4gICAgICAgICAgICA8L21kLWNhcmQtdGl0bGUtdGV4dD5cXHJcXG4gICAgICAgIDwvbWQtY2FyZC10aXRsZT5cXHJcXG4gICAgICAgIDxtZC1jYXJkLWNvbnRlbnQ+XFxyXFxuICAgICAgICAgICAgPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz1cIm1kLWJsb2NrXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxsYWJlbCB0cmFuc2xhdGU9XCJuYW1lXCI+PC9sYWJlbD5cXHJcXG4gICAgICAgICAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwiY3RybC5tb2RlbC5uYW1lXCIgcmVxdWlyZWQgLz5cXHJcXG4gICAgICAgICAgICA8L21kLWlucHV0LWNvbnRhaW5lcj5cXHJcXG5cXHJcXG4gICAgICAgICAgICA8bmctaW5jbHVkZSBzcmM9XCJjdHJsLmNvbmZpZ1RlbXBsYXRlVXJsXCI+PC9uZy1pbmNsdWRlPlxcclxcblxcclxcbiAgICAgICAgICAgIDxtZC1pbnB1dC1jb250YWluZXIgY2xhc3M9XCJtZC1ibG9ja1wiPlxcclxcbiAgICAgICAgICAgICAgICA8bWQtc3dpdGNoIGNsYXNzPVwibWQtcHJpbWFyeVwiIG5nLW1vZGVsPVwiY3RybC5tb2RlbC5kaXNhYmxlZFwiIHRpdGxlPVwie3sgXFwnZGlzYWJsZU1vbml0b3JpbmdUaXRsZVxcJyB8IHRyYW5zbGF0ZSB9fVwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdHJhbnNsYXRlPVwiZGlzYWJsZU1vbml0b3JpbmdcIj48L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgIDwvbWQtc3dpdGNoPlxcclxcbiAgICAgICAgICAgIDwvbWQtaW5wdXQtY29udGFpbmVyPlxcclxcbiAgICAgICAgPC9tZC1jYXJkLWNvbnRlbnQ+XFxyXFxuICAgICAgICA8bWQtY2FyZC1hY3Rpb25zIGxheW91dD1cInJvd1wiIGxheW91dC1hbGlnbj1cImVuZCBjZW50ZXJcIj5cXHJcXG4gICAgICAgICAgICA8ZGl2IGZsZXg+XFxyXFxuICAgICAgICAgICAgICAgIDxtZC1idXR0b24gZmxleCBjbGFzcz1cIm1kLXJhaXNlZCBtZC13YXJuIG1kLWh1ZS0yXCIgbmctY2xpY2s9XCJjdHJsLmRlbGV0ZVByaW50ZXIoKVwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdHJhbnNsYXRlPVwiZGVsZXRlXCI+PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICA8L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8bWQtYnV0dG9uIGhyZWY9XCIvIyEvY29uZmlndXJhdGlvblwiPjxzcGFuIHRyYW5zbGF0ZT1cImNhbmNlbFwiPjwvc3Bhbj48L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgICAgICA8bWQtYnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cIm1kLXByaW1hcnlcIiBuZy1jbGljaz1cImN0cmwudXBkYXRlUHJpbnRlcigpXCIgbmctZGlzYWJsZWQ9XCJlZGl0Rm9ybS4kcHJpc3RpbmUgfHwgZWRpdEZvcm0uJGludmFsaWRcIj5cXHJcXG4gICAgICAgICAgICAgICAgPHNwYW4gdHJhbnNsYXRlPVwic2F2ZVwiPjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICA8L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgIDwvbWQtY2FyZC1hY3Rpb25zPlxcclxcbiAgICA8L21kLWNhcmQ+XFxyXFxuPC9mb3JtPlxcclxcbicpO1xuJHRlbXBsYXRlQ2FjaGUucHV0KCd2aWV3cy9jb25maWd1cmF0aW9uL2VkaXRVc2VyLmh0bWwnLCc8Zm9ybSBuYW1lPVwiY3RybC5hZGRGb3JtXCIgbm92YWxpZGF0ZT5cXHJcXG4gICAgPG1kLWNhcmQgZmxleC1ndC1zbT1cIjUwXCIgZmxleC1vZmZzZXQtZ3Qtc209XCIyNVwiPlxcclxcbiAgICAgICAgPG1kLWNhcmQtdGl0bGU+XFxyXFxuICAgICAgICAgICAgPG1kLWNhcmQtdGl0bGUtdGV4dD5cXHJcXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZC1oZWFkbGluZVwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAge3sgXFwnZWRpdGluZ1xcJyB8IHRyYW5zbGF0ZSB9fSB7eyBcXCd1c2VyXFwnIHwgdHJhbnNsYXRlIH19IFxcJ3t7IGN0cmwudXNlci51c2VybmFtZSB9fVxcJ1xcclxcbiAgICAgICAgICAgICAgICA8L3NwYW4+XFxyXFxuICAgICAgICAgICAgPC9tZC1jYXJkLXRpdGxlLXRleHQ+XFxyXFxuICAgICAgICA8L21kLWNhcmQtdGl0bGU+XFxyXFxuXFxyXFxuICAgICAgICA8bWQtY2FyZC1jb250ZW50PlxcclxcbiAgICAgICAgICAgIDxtZC1pbnB1dC1jb250YWluZXIgbmctaWY9XCJjdHJsLmVycm9yXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlcnJvclwiIG5nLWJpbmQ9XCJjdHJsLmVycm9yXCI+PC9kaXY+XFxyXFxuICAgICAgICAgICAgPC9tZC1pbnB1dC1jb250YWluZXI+XFxyXFxuICAgICAgICAgICAgPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz1cIm1kLWJsb2NrXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxsYWJlbCB0cmFuc2xhdGU9XCJwYXNzd29yZEVkaXRcIj48L2xhYmVsPlxcclxcbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgbmctbW9kZWw9XCJjdHJsLnVzZXIucGFzc3dvcmRcIiBtaW49XCI4XCIgLz5cXHJcXG4gICAgICAgICAgICA8L21kLWlucHV0LWNvbnRhaW5lcj5cXHJcXG4gICAgICAgICAgICA8bWQtaW5wdXQtY29udGFpbmVyIGNsYXNzPVwibWQtYmxvY2tcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGxhYmVsIHRyYW5zbGF0ZT1cImNvbmZpcm1QYXNzd29yZFwiPjwvbGFiZWw+XFxyXFxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicGFzc3dvcmRcIiBuZy1tb2RlbD1cImN0cmwudXNlci5wYXNzd29yZE1hdGNoXCIgbWF0Y2g9XCJjdHJsLnVzZXIucGFzc3dvcmRcIiAvPlxcclxcbiAgICAgICAgICAgIDwvbWQtaW5wdXQtY29udGFpbmVyPlxcclxcbiAgICAgICAgICAgIDxtZC1pbnB1dC1jb250YWluZXIgY2xhc3M9XCJtZC1ibG9ja1wiPlxcclxcbiAgICAgICAgICAgICAgICA8bGFiZWwgdHJhbnNsYXRlPVwic2Vzc2lvbkxpZmV0aW1lXCI+PC9sYWJlbD5cXHJcXG4gICAgICAgICAgICAgICAgPG1kLXNlbGVjdCBuZy1tb2RlbD1cImN0cmwudXNlci5zZXNzaW9uTGlmZXRpbWVcIiB0aXRsZT1cInt7IHNlc3Npb25MaWZldGltZVRpdGxlIHwgdHJhbnNsYXRlIH19XCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8bWQtb3B0aW9uIG5nLXJlcGVhdD1cImxpZmV0aW1lIGluIGN0cmwubGlmZXRpbWVzXCIgbmctdmFsdWU9XCJsaWZldGltZVwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0IG5nLWlmPVwibGlmZXRpbWVcIj57eyBsaWZldGltZSB9fSB7eyBcXCdkYXlzXFwnIHwgdHJhbnNsYXRlIH19PC90ZXh0PlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0IG5nLWlmPVwiIWxpZmV0aW1lXCI+e3sgXFwnaW5kZWZpbml0ZVxcJyB8IHRyYW5zbGF0ZSB9fTwvdGV4dD5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvbWQtb3B0aW9uPlxcclxcbiAgICAgICAgICAgICAgICA8L21kLXNlbGVjdD5cXHJcXG4gICAgICAgICAgICA8L21kLWlucHV0LWNvbnRhaW5lcj5cXHJcXG4gICAgICAgIDwvbWQtY2FyZC1jb250ZW50PlxcclxcblxcclxcbiAgICAgICAgPG1kLWNhcmQtYWN0aW9ucyBsYXlvdXQ9XCJyb3dcIiBsYXlvdXQtYWxpZ249XCJlbmQgY2VudGVyXCI+XFxyXFxuICAgICAgICAgICAgPGRpdiBmbGV4PlxcclxcbiAgICAgICAgICAgICAgICA8bWQtYnV0dG9uIGZsZXggY2xhc3M9XCJtZC1yYWlzZWQgbWQtd2FybiBtZC1odWUtMlwiIG5nLWNsaWNrPVwiY3RybC5kZWxldGVVc2VyKClcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIHRyYW5zbGF0ZT1cImRlbGV0ZVwiPjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgPC9tZC1idXR0b24+XFxyXFxuICAgICAgICAgICAgICAgIDxtZC1idXR0b24gbmctaWY9XCJjdHJsLnVzZXIuaXNMb2dnZWRJblwiIG5nLWNsaWNrPVwiY3RybC5sb2dvdXQoKVwiIHRyYW5zbGF0ZT1cImxvZ291dFwiPjwvbWQtYnV0dG9uPlxcclxcbiAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDxtZC1idXR0b24gaHJlZj1cIi8jIS9jb25maWd1cmF0aW9uXCIgdHJhbnNsYXRlPVwiY2FuY2VsXCI+PC9tZC1idXR0b24+XFxyXFxuICAgICAgICAgICAgPG1kLWJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJtZC1wcmltYXJ5XCIgbmctY2xpY2s9XCJjdHJsLmNoYW5nZVBhc3N3b3JkKClcIiBuZy1kaXNhYmxlZD1cImN0cmwuYWRkRm9ybS4kcHJpc3RpbmUgfHwgY3RybC5hZGRGb3JtLiRpbnZhbGlkIHx8IGN0cmwubG9hZGluZ1wiIHRyYW5zbGF0ZT1cInNhdmVcIj48L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgIDwvbWQtY2FyZC1hY3Rpb25zPlxcclxcbiAgICA8L21kLWNhcmQ+XFxyXFxuPC9mb3JtPicpO1xuJHRlbXBsYXRlQ2FjaGUucHV0KCd2aWV3cy9jb25maWd1cmF0aW9uL2luZGV4Lmh0bWwnLCc8bWQtY2FyZCBjbGFzcz1cImNvbmZpZ3VyYXRpb25cIiBuZy1pZj1cImN0cmwucmVhZHlcIiBmbGV4LWd0LXNtPVwiNTBcIiBmbGV4LW9mZnNldC1ndC1zbT1cIjI1XCI+XFxyXFxuICAgIDxtZC1jYXJkLWNvbnRlbnQ+XFxyXFxuICAgICAgICA8bWQtdGFicyBtZC1keW5hbWljLWhlaWdodCBtZC1ib3JkZXItYm90dG9tPlxcclxcbiAgICAgICAgICAgIDxtZC10YWIgbGFiZWw9XCJ7eyBcXCdnZW5lcmFsU2V0dGluZ3NcXCcgfCB0cmFuc2xhdGUgfX1cIj5cXHJcXG4gICAgICAgICAgICAgICAgPGZvcm0gbmFtZT1cImN0cmwuc2V0dGluZ3NGb3JtXCIgbmctZGlzYWJsZWQ9XCJjdHJsLmxvYWRpbmdcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxiciAvPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz1cIm1kLWJsb2NrXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIHRyYW5zbGF0ZT1cInBvbGxJbnRlcnZhbFwiPjwvbGFiZWw+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPG1kLXNlbGVjdCBuZy1tb2RlbD1cImN0cmwuc2V0dGluZ3MuaW50ZXJ2YWxcIiByZXF1aXJlZCB0aXRsZT1cInt7IFxcJ3BvbGxJbnRlcnZhbFRpdGxlXFwnIHwgdHJhbnNsYXRlIH19XCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZC1vcHRpb24gbmctcmVwZWF0PVwiaW50ZXJ2YWwgaW4gY3RybC5pbnRlcnZhbHNcIiBuZy12YWx1ZT1cImludGVydmFsXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBpbnRlcnZhbCAvIDEwMDAgfX0ge3sgXFwnc2Vjb25kc1xcJyB8IHRyYW5zbGF0ZSB9fVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21kLW9wdGlvbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L21kLXNlbGVjdD5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvbWQtaW5wdXQtY29udGFpbmVyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz1cIm1kLWJsb2NrXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIHRyYW5zbGF0ZT1cImxvY2FsUG9ydFwiPjwvbGFiZWw+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiByZXF1aXJlZCBuZy1tb2RlbD1cImN0cmwuc2V0dGluZ3MubG9jYWxQb3J0XCIgdGl0bGU9XCJ7eyBcXCdsb2NhbFBvcnRUaXRsZVxcJyB8IHRyYW5zbGF0ZSB9fVwiLz5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvbWQtaW5wdXQtY29udGFpbmVyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz1cIm1kLWJsb2NrXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPG1kLXN3aXRjaCBjbGFzcz1cIm1kLXByaW1hcnlcIiBuZy1tb2RlbD1cImN0cmwuc2V0dGluZ3MuaGlkZURpc2FibGVkUHJpbnRlcnNcIiB0aXRsZT1cInt7IFxcJ2hpZGVVbm1vbml0b3JlZFRpdGxlXFwnIHwgdHJhbnNsYXRlIH19XCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRyYW5zbGF0ZT1cImhpZGVVbm1vbml0b3JlZFwiPjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L21kLXN3aXRjaD5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvbWQtaW5wdXQtY29udGFpbmVyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz1cIm1kLWJsb2NrXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPG1kLXN3aXRjaCBjbGFzcz1cIm1kLXByaW1hcnlcIiBuZy1tb2RlbD1cImN0cmwuc2V0dGluZ3MucmVxdWlyZXNBdXRoZW50aWNhdGlvblwiIHRpdGxlPVwie3sgXFwncmVxdWlyZXNBdXRoZW50aWNhdGlvblRpdGxlXFwnIHwgdHJhbnNsYXRlIH19XCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRyYW5zbGF0ZT1cInJlcXVpcmVzQXV0aGVudGljYXRpb25cIj48L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9tZC1zd2l0Y2g+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L21kLWlucHV0LWNvbnRhaW5lcj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhY3Rpb25zXCIgbGF5b3V0PVwicm93XCIgbGF5b3V0LWFsaWduPVwiZW5kIGNlbnRlclwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxtZC1idXR0b24gY2xhc3M9XCJcIiBuZy1jbGljaz1cImN0cmwucmV2ZXJ0U2V0dGluZ3MoKVwiIG5nLWRpc2FibGVkPVwiY3RybC5zZXR0aW5nc0Zvcm0uJHByaXN0aW5lXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRyYW5zbGF0ZT1cImNhbmNlbFwiPjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8bWQtYnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cIm1kLXByaW1hcnlcIiBuZy1jbGljaz1cImN0cmwudXBkYXRlU2V0dGluZ3MoKVwiIG5nLWRpc2FibGVkPVwiY3RybC5zZXR0aW5nc0Zvcm0uJHByaXN0aW5lIHx8IGN0cmwuc2V0dGluZ3NGb3JtLiRpbnZhbGlkXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRyYW5zbGF0ZT1cInNhdmVcIj48L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9tZC1idXR0b24+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgPC9mb3JtPlxcclxcbiAgICAgICAgICAgIDwvbWQtdGFiPlxcclxcbiAgICAgICAgICAgIDxtZC10YWIgbGFiZWw9XCJ7eyBcXCd1c2Vyc1xcJyB8IHRyYW5zbGF0ZSB9fVwiPlxcclxcbiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9XCJ1c2VyLXRhYmxlXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggdHJhbnNsYXRlPVwidXNlcm5hbWVcIj48L3RoPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggdHJhbnNsYXRlPVwic2Vzc2lvbkxpZmV0aW1lXCI+PC90aD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHRyYW5zbGF0ZT1cImlzTG9nZ2VkSW5cIj48L3RoPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWQtYnV0dG9uIGhyZWY9XCIvIyEvY29uZmlndXJhdGlvbi91c2Vycy9hZGRcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXBsdXNcIj48L2k+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdHJhbnNsYXRlPVwiYWRkXCI+PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tZC1idXR0b24+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8dGJvZHk+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cInVzZXIgaW4gY3RybC51c2Vyc1wiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgbmctYmluZD1cInVzZXIudXNlcm5hbWVcIj48L3RkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBuZy1pZj1cInVzZXIuc2Vzc2lvbkxpZmV0aW1lXCI+e3sgdXNlci5zZXNzaW9uTGlmZXRpbWUgfX0gPHNwYW4gdHJhbnNsYXRlPVwiZGF5c1wiPjwvc3Bhbj48L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBuZy1pZj1cIiF1c2VyLnNlc3Npb25MaWZldGltZVwiIHRyYW5zbGF0ZT1cImluZGVmaW5pdGVcIj48L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIG5nLWlmPVwidXNlci5pc0xvZ2dlZEluXCIgY2xhc3M9XCJmYSBmYS1jaGVja1wiIHRpdGxlPVwie3sgXFwnaXNMb2dnZWRJblRpdGxlXFwnIHwgdHJhbnNsYXRlIH19XCI+PC9pPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1kLWJ1dHRvbiBocmVmPVwiLyMhL2NvbmZpZ3VyYXRpb24vdXNlcnMvZWRpdC97eyB1c2VyLmlkIH19XCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1lZGl0XCI+PC9pPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRyYW5zbGF0ZT1cImVkaXRcIj48L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz1cImVtcHR5LXJvd1wiIG5nLWlmPVwiIWN0cmwudXNlcnMubGVuZ3RoXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPVwiM1wiIHRyYW5zbGF0ZT1cIm5vVXNlcnNcIj48L3RkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxcclxcbiAgICAgICAgICAgICAgICA8L3RhYmxlPlxcclxcbiAgICAgICAgICAgIDwvbWQtdGFiPlxcclxcbiAgICAgICAgICAgIDxtZC10YWIgbGFiZWw9XCJ7eyBcXCdwcmludGVyc1xcJyB8IHRyYW5zbGF0ZSB9fVwiPlxcclxcbiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9XCJwcmludGVycy10YWJsZVwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHRoZWFkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHRyYW5zbGF0ZT1cIm5hbWVcIj48L3RoPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggdHJhbnNsYXRlPVwicHJpbnRlclR5cGVcIj48L3RoPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggdHJhbnNsYXRlPVwibW9uaXRvcmluZ0VuYWJsZWRcIj48L3RoPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWQtYnV0dG9uIGhyZWY9XCIvIyEvY29uZmlndXJhdGlvbi9wcmludGVycy9hZGRcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXBsdXNcIj48L2k+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdHJhbnNsYXRlPVwiYWRkXCI+PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tZC1idXR0b24+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8dGJvZHk+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cInByaW50ZXIgaW4gY3RybC5wcmludGVyc1wiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgbmctYmluZD1cInByaW50ZXIubmFtZVwiPjwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBuZy1iaW5kPVwicHJpbnRlci5wcmludGVyVHlwZVwiPjwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIG5nLWlmPVwicHJpbnRlci5kaXNhYmxlZFwiIGNsYXNzPVwiZmEgZmEtZXhjbGFtYXRpb24tdHJpYW5nbGVcIiB0aXRsZT1cInt7IFxcJ21vbml0b3JpbmdEaXNhYmxlZFxcJyB8IHRyYW5zbGF0ZSB9fVwiPjwvaT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIG5nLWlmPVwiIXByaW50ZXIuZGlzYWJsZWRcIiBjbGFzcz1cImZhIGZhLWNoZWNrXCIgdGl0bGU9XCJ7eyBcXCdtb25pdG9yaW5nRW5hYmxlZFxcJyB8IHRyYW5zbGF0ZSB9fVwiPjwvaT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1kLWJ1dHRvbiBocmVmPVwiLyMhL2NvbmZpZ3VyYXRpb24vcHJpbnRlcnMvZWRpdC97e3ByaW50ZXIuaWR9fVwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtZWRpdFwiPjwvaT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0cmFuc2xhdGU9XCJlZGl0XCI+PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tZC1idXR0b24+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XCJlbXB0eS1yb3dcIiBuZy1pZj1cIiFjdHJsLnByaW50ZXJzLmxlbmd0aFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj1cIjRcIiB0cmFuc2xhdGU9XCJub1ByaW50ZXJzXCI+PC90ZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT5cXHJcXG4gICAgICAgICAgICAgICAgPC90YWJsZT5cXHJcXG4gICAgICAgICAgICA8L21kLXRhYj5cXHJcXG4gICAgICAgIDwvbWQtdGFicz5cXHJcXG4gICAgPC9tZC1jYXJkLWNvbnRlbnQ+XFxyXFxuPC9tZC1jYXJkPicpO1xuJHRlbXBsYXRlQ2FjaGUucHV0KCd2aWV3cy9jb25maWd1cmF0aW9uL09jdG9wcmludC5odG1sJywnPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz1cIm1kLWJsb2NrXCI+XFxyXFxuICAgIDxsYWJlbCB0cmFuc2xhdGU9XCJ1cmxcIj48L2xhYmVsPlxcclxcbiAgICA8aW5wdXQgbmctbW9kZWw9XCJjdHJsLm1vZGVsLmNvbmZpZy51cmxcIiByZXF1aXJlZCAvPlxcclxcbjwvbWQtaW5wdXQtY29udGFpbmVyPlxcclxcbjxtZC1pbnB1dC1jb250YWluZXIgY2xhc3M9XCJtZC1ibG9ja1wiPlxcclxcbiAgICA8bGFiZWwgdHJhbnNsYXRlPVwiYXBpS2V5XCI+PC9sYWJlbD5cXHJcXG4gICAgPGlucHV0IG5nLW1vZGVsPVwiY3RybC5tb2RlbC5jb25maWcuYXBpS2V5XCIgcmVxdWlyZWQgLz5cXHJcXG48L21kLWlucHV0LWNvbnRhaW5lcj5cXHJcXG5cXHJcXG48IS0tIFxcclxcbiAgICBJZiB0aGVyZSBpcyBhbiBJRCB0aGUgdXNlciBpcyBlZGl0aW5nXFxyXFxuICAgIEFsbG93IHRoZSB1c2VyIHRvIHNlbGVjdCBhIHByb2ZpbGUgKGN1cnJlbnRseSBub3QgdXNlZClcXHJcXG4gICAgQWxzbyBleHBvc2UgdGhlIHdlYmNhbSBhbmQgc25hcHNob3QgKGN1cnJlbnRseSBub3QgdXNlZCkgdXJscyBzbyB0aGUgdXNlciBjYW4gcmVzb2x2ZSBwb3RlbnRpYWwgcGFyc2UgZXJyb3JzLiBcXHJcXG4tLT5cXHJcXG48bWQtaW5wdXQtY29udGFpbmVyIGNsYXNzPVwibWQtYmxvY2tcIiBuZy1pZj1cImN0cmwubW9kZWwuaWRcIj5cXHJcXG4gICAgPGxhYmVsIHRyYW5zbGF0ZT1cInByb2ZpbGVcIj48L2xhYmVsPlxcclxcbiAgICA8bWQtc2VsZWN0IG5nLW1vZGVsPVwiY3RybC5tb2RlbC5jb25maWcucHJvZmlsZVwiIG5nLW1vZGVsLW9wdGlvbnM9XCJ7dHJhY2tCeTogXFwnJHZhbHVlLmlkXFwnfVwiIHJlcXVpcmVkIHRpdGxlPVwie3sgXFwncHJvZmlsZVRpdGxlXFwnIHwgdHJhbnNsYXRlIH19XCI+XFxyXFxuICAgICAgICA8bWQtb3B0aW9uIG5nLXJlcGVhdD1cInByb2ZpbGUgaW4gY3RybC5tb2RlbC5jb25maWcuYXZhaWxhYmxlUHJvZmlsZXNcIiBuZy12YWx1ZT1cInByb2ZpbGVcIj5cXHJcXG4gICAgICAgICAgICB7eyBwcm9maWxlLm5hbWUgfX1cXHJcXG4gICAgICAgIDwvbWQtb3B0aW9uPlxcclxcbiAgICA8L21kLXNlbGVjdD5cXHJcXG48L21kLWlucHV0LWNvbnRhaW5lcj5cXHJcXG5cXHJcXG48bWQtaW5wdXQtY29udGFpbmVyIGNsYXNzPVwibWQtYmxvY2tcIiBuZy1pZj1cImN0cmwubW9kZWwuaWRcIj5cXHJcXG4gICAgPGxhYmVsIHRyYW5zbGF0ZT1cIndlYmNhbVVybFwiPjwvbGFiZWw+XFxyXFxuICAgIDxpbnB1dCBuZy1tb2RlbD1cImN0cmwubW9kZWwuY29uZmlnLndlYkNhbVVybFwiIHJlcXVpcmVkIC8+XFxyXFxuPC9tZC1pbnB1dC1jb250YWluZXI+XFxyXFxuXFxyXFxuPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz1cIm1kLWJsb2NrXCIgbmctaWY9XCJjdHJsLm1vZGVsLmlkXCI+XFxyXFxuICAgIDxsYWJlbCB0cmFuc2xhdGU9XCJzbmFwc2hvdFVybFwiPjwvbGFiZWw+XFxyXFxuICAgIDxpbnB1dCBuZy1tb2RlbD1cImN0cmwubW9kZWwuY29uZmlnLnNuYXBzaG90VXJsXCIgcmVxdWlyZWQgLz5cXHJcXG48L21kLWlucHV0LWNvbnRhaW5lcj4nKTtcbiR0ZW1wbGF0ZUNhY2hlLnB1dCgndmlld3MvY29uZmlndXJhdGlvbi9SZXBSYXAuaHRtbCcsJzxtZC1pbnB1dC1jb250YWluZXIgY2xhc3M9XCJtZC1ibG9ja1wiPlxcclxcbiAgICA8bGFiZWwgdHJhbnNsYXRlPVwidXJsXCI+PC9sYWJlbD5cXHJcXG4gICAgPGlucHV0IG5nLW1vZGVsPVwiY3RybC5tb2RlbC5jb25maWcudXJsXCIgcmVxdWlyZWQgLz5cXHJcXG48L21kLWlucHV0LWNvbnRhaW5lcj5cXHJcXG5cXHJcXG48bWQtaW5wdXQtY29udGFpbmVyIGNsYXNzPVwibWQtYmxvY2tcIj5cXHJcXG4gICAgPGxhYmVsIHRyYW5zbGF0ZT1cIndlYmNhbVVybFwiPjwvbGFiZWw+XFxyXFxuICAgIDxpbnB1dCBuZy1tb2RlbD1cImN0cmwubW9kZWwuY29uZmlnLndlYkNhbVVybFwiIHJlcXVpcmVkIC8+XFxyXFxuPC9tZC1pbnB1dC1jb250YWluZXI+XFxyXFxuXFxyXFxuPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz1cIm1kLWJsb2NrXCI+XFxyXFxuICAgIDxsYWJlbCB0cmFuc2xhdGU9XCJzbmFwc2hvdFVybFwiPjwvbGFiZWw+XFxyXFxuICAgIDxpbnB1dCBuZy1tb2RlbD1cImN0cmwubW9kZWwuY29uZmlnLnNuYXBzaG90VXJsXCIgcmVxdWlyZWQgLz5cXHJcXG48L21kLWlucHV0LWNvbnRhaW5lcj5cXHJcXG5cXHJcXG48IS0tPG1kLWlucHV0LWNvbnRhaW5lciBuZy1pZj1cImN0cmwucmVxdWlyZXNSZXBSYXBQYXNzd29yZFwiIGNsYXNzPVwibWQtYmxvY2tcIj5cXHJcXG4gICAgPGxhYmVsIHRyYW5zbGF0ZT1cInBhc3N3b3JkXCI+PC9sYWJlbD5cXHJcXG4gICAgPGlucHV0IHR5cGU9XCJwYXNzd29yZFwiIG5nLW1vZGVsPVwiY3RybC5tb2RlbC5jb25maWcucGFzc3dvcmRcIiByZXF1aXJlZCAvPlxcclxcbjwvbWQtaW5wdXQtY29udGFpbmVyPlxcclxcbjxtZC1pbnB1dC1jb250YWluZXIgY2xhc3M9XCJtZC1ibG9ja1wiPlxcclxcbiAgICA8bWQtc3dpdGNoIGNsYXNzPVwibWQtcHJpbWFyeVwiIG5nLW1vZGVsPVwiY3RybC5yZXF1aXJlc1JlcFJhcFBhc3N3b3JkXCI+XFxyXFxuICAgICAgICA8c3BhbiB0cmFuc2xhdGU9XCJyZXF1aXJlc1Bhc3N3b3JkXCI+PC9zcGFuPlxcclxcbiAgICA8L21kLXN3aXRjaD5cXHJcXG48L21kLWlucHV0LWNvbnRhaW5lcj4tLT5cXHJcXG4nKTt9XSk7Il19

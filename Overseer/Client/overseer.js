angular.module("overseer",["ngRoute","ngAnimate","ngMaterial","pascalprecht.translate"]),angular.module("overseer").config(["$routeProvider","$mdThemingProvider","$httpProvider",function($routeProvider,$mdThemingProvider,$httpProvider){"use strict";$routeProvider.when("/",{templateUrl:"views/index.html",controller:"indexController",controllerAs:"ctrl"}).when("/configuration",{templateUrl:"views/configuration/index.html",controller:"configurationController",controllerAs:"ctrl"}).when("/configuration/printers/add",{templateUrl:"views/configuration/add.html",controller:"addPrinterController",controllerAs:"ctrl"}).when("/configuration/printers/edit/:id",{templateUrl:"views/configuration/edit.html",controller:"editPrinterController",controllerAs:"ctrl"}).when("/configuration/users/add",{templateUrl:"views/configuration/addUser.html",controller:"addUserController",controllerAs:"ctrl"}).when("/configuration/users/edit/:id",{templateUrl:"views/configuration/editUser.html",controller:"editUserController",controllerAs:"ctrl"}).when("/login",{templateUrl:"views/login.html",controller:"loginController",controllerAs:"ctrl"}).otherwise("/"),$mdThemingProvider.definePalette("overseerPalette",{50:"e6f0fd",100:"c1d9fa",200:"97c0f6",300:"6da6f2",400:"4e93f0",500:"2f80ed",600:"2a78eb",700:"236de8",800:"1d63e5",900:"1250e0",A100:"ffffff",A200:"dbe5ff",A400:"a8bfff",A700:"8facff",contrastDefaultColor:"light",contrastDarkColors:["50","100","200","300","400","A100","A200","A400","A700"],contrastLightColors:["500","600","700","800","900"]}),$mdThemingProvider.theme("default").primaryPalette("overseerPalette",{default:"500"}).accentPalette("overseerPalette",{default:"800"}).dark(),$mdThemingProvider.enableBrowserColor(),$httpProvider.interceptors.push(["$q","$location",function($q,$location){function startLoader(){0===activeRequest&&(NProgress.start(),timeout=setTimeout(function(){activeRequest=0,stopLoader()},3e4)),activeRequest++}function stopLoader(){--activeRequest<=0&&(timeout&&clearTimeout(timeout),activeRequest=0,NProgress.done())}var timeout,activeRequest=0;return{request:function(config){if(startLoader(),window.localStorage.activeUser){var user=JSON.parse(window.localStorage.activeUser);config.headers.Authorization="Bearer "+user.token}return config},response:function(response){return stopLoader(),response},responseError:function(response){return stopLoader(),401!==response.status&&403!==response.status||(delete window.localStorage.activeUser,$location.path("/login")),$q.reject(response)}}}])}]).controller("appCtrl",["$rootScope","$location","authentication",function($rootScope,$location,authentication){"use strict";function unsubscribeFromStatusUpdates(){$.connection.hub&&(monitoringEnabled=!1,$.connection.hub.stop())}function subscribeToStatusUpdates(){monitoringEnabled||$.connection.hub.start().done(function(){var token=authentication.activeUser?authentication.activeUser.token:"";$.connection.statusHub.server.startMonitoring(token).then(function(enabled){monitoringEnabled=enabled})})}var monitoringEnabled,self=this;Object.defineProperties(self,{showMenu:{get:function(){return authentication.authToken}}}),self.logout=function(){authentication.logout(),$location.path("/login")},$.connection.hub.url="/push",$.connection.statusHub.client.statusUpdate=function(status){$rootScope.$broadcast("$StatusUpdate$",status)},$rootScope.$watch(function(){return authentication.authToken},function(current,previous){current?subscribeToStatusUpdates():previous&&unsubscribeFromStatusUpdates()})}]);
angular.module("overseer").config(["$translateProvider",function($translateProvider){"use strict";$translateProvider.translations("en",{add:"Add",edit:"Edit",editing:"Editing",save:"Save",cancel:"Cancel",delete:"Delete",confirm:"Confirm",dismiss:"Dismiss",printers:"Printers",noPrinter:"There are no printers configured or all printers are disabled.",noPrinters:"No Printers Configured",noUsers:"No Users Configured",noPrintersAddPrinter:"Add New Printer",noPrintersEditPrinters:"Edit Existing Printers",generalSettings:"General Settings",settings:"Settings",pollInterval:"Poll Interval",pollIntervalTitle:"How often the printers will be polled for updates",seconds:"Seconds",localPort:"Local Port (Requires Restart)",localPortTitle:"The local port where the Overseer web app will be hosted.",hideUnmonitored:"Hide Printers When Monitoring Is Disabled",hideUnmonitoredTitle:"When enabled printers with monitoring disabled will not be visible on the home page.",name:"Name",printerType:"Printer Type",monitoringDisabled:"Monitoring Disabled",monitoringEnabled:"Monitoring Enabled",disableMonitoring:"Disable Monitoring",disableMonitoringTitle:"When monitoring is disabled the application will not poll for update for this printer.",url:"Url",webcamUrl:"Webcam Url",snapshotUrl:"Snapshot Url",username:"Username",password:"Password",passwordEdit:"Password (At least 8 characters)",confirmPassword:"Confirm Password",requiresPassword:"Requires Password",apiKey:"Api Key",profile:"Profile",profileTitle:"The profile that will be used when interacting with Octoprint.",addPrinter:"Add Printer",openWebsite:"Open Website",status:"Status",progress:"Progress",elapsed:"Elapsed",estimated:"Estimated",feedRate:"Feed Rate",fanSpeed:"Fan Speed",flowRate:"Flow Rate",remaining:"Remaining",connecting:"Connecting...",disabled:"Disabled",bed:"Bed",Offline:"Offline",Idle:"Idle",Printing:"Printing",Paused:"Paused",Octoprint:"Octoprint",RepRap:"RepRap Firmware (Duet Web Control)",requiresAuthenticationTitle:"When enabled anonymous access to the application is not allowed.",requiresAuthentication:"Require User Logins",requiresAutnenticationPrompt:"At least one user must be added before enabling 'Require User Logins'",authenticationLifetimeTitle:"Specifies how long the user will remain logged into the application before needing to re-authenticate. Leave blank to remain logged in indefinitely.",authenticationLifetime:"Login Session Duration",days:"Days",indefinite:"Indefinite",login:"Sign In",logout:"Sign Out",user:"User",users:"Users",addUser:"Add User",isLoggedIn:"Logged In?",isLoggedInTitle:"Specifies if a user has a active login",warning:"Warning!",yes:"Yes",no:"No",deletePrinterPrompt:"Are you sure you want remove this printer?",deleteUserPrompt:"Are you sure you want remove this user?",deleteLastUserPrompt:"At least one user must exist when 'Require User Logins' is enabled. To remove this user disable 'Require User Logins' or add another user."}).preferredLanguage("en")}]);
angular.module("overseer").directive("printer",function(){"use strict";return{restrict:"E",scope:!0,replace:!0,templateUrl:"directives/printer.html",bindToController:{model:"="},controller:["$q","$scope","controlService","$mdDialog","tuneModal",function($q,$scope,controlService,$mdDialog,tuneModal){function getTemp(tool,tempProperty){return self.status&&self.status.temperatures?self.status.temperatures[tool][tempProperty]:0}var self=this;self.connecting=!0,self.cacheBuster=Date.now(),Object.defineProperties(self,{isPrinting:{get:function(){if(self.status)return"Printing"===self.status.state}},isPaused:{get:function(){if(self.status)return"Paused"===self.status.state}},isIdle:{get:function(){if(self.status)return"Idle"===self.status.state}},isDisconnected:{get:function(){return!self.status||(!self.isDisabled&&"Disconnected"===self.status.state||"Offline"===self.status.state)}},isDisabled:{get:function(){return!self.connecting&&self.model.disabled}},webcamUrl:{get:function(){var url=self.model.config.webCamUrl;return url+(url.indexOf("?")>=0?"&":"?")+"cb="+self.cacheBuster}}}),$scope.$on("$StatusUpdate$",function(event,status){self.connecting=!1;var printerStatus=status[self.model.id];printerStatus&&(self.status=printerStatus,$scope.$digest())}),self.toggleZoom=function(){self.zoom=!self.zoom},self.tune=function(){tuneModal.open(self.model,self.status)},self.pause=function(){self.isPrinting&&controlService.pause(self.model.id)},self.resume=function(){self.isPaused&&controlService.resume(self.model.id)},self.cancel=function(){if(self.isPrinting){var confirm=$mdDialog.confirm().title("Cancel Print").textContent("Are you sure you want to cancel this print?").ok("Yes").cancel("No");$mdDialog.show(confirm).then(function(){controlService.cancel(self.model.id)},function(){})}},self.getActualTemp=function(tool){return getTemp(tool,"actual")},self.getTargetTemp=function(tool){return getTemp(tool,"target")}}],controllerAs:"printerCtrl"}});
angular.module("overseer").directive("resizer",["$window",function($window){"use strict";return{restict:"E",transclude:!0,template:"<div ng-transclude></div>",replace:!0,scope:{count:"=",output:"="},link:function(scope){function calculate(){var header=$window.document.getElementById("header"),availableHeight=body.clientHeight-Math.max(header.clientHeight,64),ratio=window.devicePixelRatio||1;if(body.clientWidth/ratio<960)width=100,height=body.clientWidth/(4/3);else{var rows=1;scope.count>2&&scope.count<=4?rows=2:scope.count>4&&(rows=Math.floor(scope.count/4)+(scope.count%4>0?1:0));var columns=Math.ceil(scope.count/rows);width=100/columns,height=rows>4?body.width/columns/(16/9):availableHeight/rows}}function onResize(){calculate(),scope.$digest()}var width,height,body=$window.document.body;scope.output={},Object.defineProperties(scope.output,{width:{get:function(){return width}},height:{get:function(){return height}}}),$window.addEventListener("resize",onResize),scope.$on("$destroy",function(){$window.removeEventListener("resize",onResize)}),calculate()}}}]);
angular.module("overseer").directive("match",function(){"use strict";return{require:["match","ngModel"],bindToController:{match:"="},link:function(scope,elem,attrs,ctrls){function validate(value){var isValid=ctrl.match===value;return ngModel.$setValidity("match",isValid),isValid?value:void 0}var ctrl=ctrls[0],ngModel=ctrls[1];ngModel.$parsers.unshift(validate),scope.$watch(function(){return ctrl.match},function(){validate(ngModel.$viewValue)})},controller:function(){}}});
angular.module("overseer").filter("duration",function(){"use strict";return function(value){if(!value)return"00:00:00";var d=Number(value),h=Math.floor(d/3600),m=Math.floor(d%3600/60),s=Math.floor(d%3600%60);return(h<100?("0"+h).slice(-2):h)+":"+("0"+m).slice(-2)+":"+("0"+s).slice(-2)}});
angular.module("overseer").service("tuneModal",["$mdDialog",function($mdDialog){"use strict";this.open=function(printer,status){$mdDialog.show({controllerAs:"ctrl",controller:"tuneModalController",templateUrl:"modals/tune.html",clickOutsideToClose:!0,locals:{printer:printer,status:status}})}}]).controller("tuneModalController",["$scope","$mdDialog","controlService","printer","status",function($scope,$mdDialog,controlService,printer,status){"use strict";function lockUi(promise){return self.busy=!0,promise.then(function(){self.busy=!1})}var self=this;self.printer=printer,self.status=status,self.fanSpeed=0,self.feedRate=100,self.flowRates=_.map(printer.config.tools,function(){return 100}),self.ngModelOptions={debounce:400},$scope.$on("$StatusUpdate$",function(event,status){var printerStatus=status[self.printer.id];printerStatus&&(self.status=printerStatus,$scope.$digest())}),self.pause=function(){lockUi(controlService.pause(printer.id))},self.resume=function(){lockUi(controlService.resume(printer.id))},self.cancel=function(){var confirm=$mdDialog.confirm().title("Cancel Print").textContent("Are you sure you want to cancel this print?").ok("Yes").cancel("No").multiple(!0);$mdDialog.show(confirm).then(function(){lockUi(controlService.cancel(printer.id)).then(function(){self.hide()})},function(){})},self.increaseTemp=function(toolName){var tool=_.find(status.temperatures,{name:toolName});tool.target+=1,lockUi(controlService.setTemperature(printer.id,toolName,tool.target))},self.decreaseTemp=function(toolName){var tool=_.find(status.temperatures,{name:toolName});tool.target-=1,lockUi(controlService.setTemperature(printer.id,toolName,tool.target))},self.setFeedRate=function(){lockUi(controlService.setFeedRate(printer.id,self.feedRate))},self.setFlowRate=function(index){var toolName=self.printer.config.tools[index];lockUi(controlService.setFlowRate(printer.id,toolName,self.flowRates[index]))},self.setFanSpeed=function(){lockUi(controlService.setFanSpeed(printer.id,self.fanSpeed))},self.hide=function(){$mdDialog.hide()}}]);
angular.module("overseer").service("authentication",["$q","$http",function($q,$http){"use strict";var self=this;Object.defineProperties(self,{activeUser:{get:function(){if(window.localStorage.activeUser)return JSON.parse(window.localStorage.activeUser)},set:function(value){value?window.localStorage.activeUser=JSON.stringify(value):delete window.localStorage.activeUser}},authToken:{get:function(){if(self.activeUser)return"Bearer "+self.activeUser.token}}}),self.login=function(user){return $q(function(resolve,reject){$http.post("/services/auth",user).then(function(result){self.activeUser=result.data,resolve()},function(error){reject(400===error.status?error.data:"An unknown error occurred.")})})},self.logout=function(){return $http.delete("/services/auth/logout").then(function(){self.activeUser=void 0})}}]);
angular.module("overseer").service("configuration",["$q","$http",function($q,$http){"use strict";function handleUserError(e){return 400===e.status&&e.data&&e.data.error?$q.reject(e.data.error):$q.reject("An Unknown Error Occurred")}var self=this,endpoint="/services/config",cache={printers:{}};self.getConfiguration=function(){return $http.get(endpoint+"/configuration").then(function(result){return angular.forEach(result.data.printers,function(printer){cache.printers[printer.id]=printer}),cache.settings=result.data.settings,cache.users=result.data.users,result.data})},self.getPrinters=function(){if(Object.keys(cache.printers).length){var printers=[];return angular.forEach(cache.printers,function(printer){printers.push(printer)}),$q.resolve(printers)}return $http.get(endpoint).then(function(result){return angular.forEach(result.data,function(printer){cache.printers[printer.id]=printer}),result.data})},self.getPrinter=function(printerId){return cache.printers[printerId]?$q.resolve(cache.printers[printerId]):$http.get(endpoint+"/"+printerId).then(function(result){return result.data})},self.createPrinter=function(printer){return $http.put(endpoint,printer).then(function(result){return cache.printers[result.data.id]=result.data,result.data})},self.updatePrinter=function(printer){return $http.post(endpoint,printer).then(function(result){return cache.printers[result.data.id]=result.data,result.data})},self.deletePrinter=function(printer){return $http.delete(endpoint+"/"+printer.id).then(function(){delete cache.printers[printer.id]})},self.getSettings=function(){return cache.settings?$q.resolve(cache.settings):$http.get(endpoint+"/settings").then(function(result){return cache.settings=result.data,result.data})},self.updateSettings=function(settings){return $http.post(endpoint+"/settings",settings).then(function(result){return cache.settings=result.data,result.data})},self.getUsers=function(){return cache.users&&$q.resolve(cache.users),$http.get(endpoint+"/users").then(function(result){return cache.users=result.data,result.data})},self.addUser=function(user){return $http.put(endpoint+"/users",user).then(function(result){return cache.users.push(result.data),result.data},handleUserError)},self.changeUserPassword=function(user){return $http.post(endpoint+"/users",user).then(function(result){return result.data},handleUserError)},self.removeUser=function(userId){return $http.delete(endpoint+"/users/"+userId).then(function(){var users=[];angular.forEach(cache.users,function(u){u.id!==userId&&users.push(u)}),cache.users=users})},self.logoutUser=function(userId){return $http.post(endpoint+"/logout/"+userId).then(function(result){for(var user=result.data,i=0;i<cache.users.length;i++){var u=cache.users[i];if(u.id===user.id)return angular.copy(user,u),u}})}}]);
angular.module("overseer").service("controlService",["$http",function($http){"use strict";var self=this,endpoint="/services/control/";self.pause=function(printerId){return $http.get(endpoint+printerId+"/pause")},self.resume=function(printerId){return $http.get(endpoint+printerId+"/resume")},self.cancel=function(printerId){return $http.get(endpoint+printerId+"/cancel")},self.setTemperature=function(printerId,tool,temp){return $http.get(endpoint+printerId+"/temp/"+tool+"/"+temp)},self.setFeedRate=function(printerId,feedRate){return $http.get(endpoint+printerId+"/feed/"+feedRate)},self.setFlowRate=function(printerId,tool,flowRate){return $http.get(endpoint+printerId+"/flow/"+tool+"/"+flowRate)},self.setFanSpeed=function(printerId,speed){return $http.get(endpoint+printerId+"/fan/"+speed)}}]);
angular.module("overseer").controller("indexController",["$q","$scope","configuration",function($q,$scope,configuration){"use strict";var self=this;self.loading=!0,$q.all({printers:configuration.getPrinters(),settings:configuration.getSettings()}).then(function(results){self.loading=!1,self.settings=results.settings,self.printers=self.settings.hideDisabledPrinters?_.filter(results.printers,{disabled:!1}):results.printers})}]);
angular.module("overseer").controller("loginController",["$location","authentication",function($location,authentication){"use strict";var self=this;self.user={},self.login=function(){self.loading=!0,self.error=void 0,authentication.login(self.user).then(function(){self.loading=!1,$location.path("/")},function(error){self.loading=!1,self.error=error})}}]);
angular.module("overseer").controller("addPrinterController",["$location","configuration",function($location,configuration){"use strict";var self=this;self.printerTypes=["Octoprint","RepRap"],self.model={},Object.defineProperty(self,"configTemplateUrl",{get:function(){if(self.model.printerType)return"views/configuration/"+self.model.printerType+".html"}}),self.addPrinter=function(){self.loading=!0,self.model.config.printerType=self.model.printerType,configuration.createPrinter(self.model).then(function(){self.loading=!1,$location.path("/configuration")})}}]);
angular.module("overseer").controller("addUserController",["$scope","$location","configuration",function($scope,$location,configuration){"use strict";var self=this;self.user={},self.addUser=function(){self.loading=!0,configuration.addUser(self.user).then(function(){$location.path("/configuration")},function(e){self.error=e}).finally(function(){self.loading=!1})}}]);
angular.module("overseer").controller("editPrinterController",["$scope","$location","$routeParams","$mdDialog","$translate","configuration",function($scope,$location,$routeParams,$mdDialog,$translate,configurationService){"use strict";var self=this;self.loading=!0,configurationService.getPrinter($routeParams.id).then(function(printer){self.model=angular.copy(printer),self.currentName=printer.name,self.configTemplateUrl="views/configuration/"+self.model.printerType+".html",self.loading=!1}),self.updatePrinter=function(){self.loading=!0,configurationService.updatePrinter(self.model).then(function(){$location.path("/configuration")})},self.deletePrinter=function(){var confirm=$mdDialog.confirm().title($translate.instant("warning")).textContent($translate.instant("deletePrinterPrompt")).ok($translate.instant("yes")).cancel($translate.instant("no"));$mdDialog.show(confirm).then(function(){configurationService.deletePrinter(self.model).then(function(){$location.path("/configuration")})},function(){})}}]);
angular.module("overseer").controller("editUserController",["$location","$routeParams","$mdDialog","$translate","configuration","authentication",function($location,$routeParams,$mdDialog,$translate,configuration,authentication){"use strict";function gotoConfiguration(){$location.path("/configuration")}function handleError(e){self.error=e}function cancelLoading(){self.loading=!1}var self=this;self.loading=!0,configuration.getSettings().then(function(settings){self.settings=settings}),configuration.getUsers().then(function(users){self.users=users;for(var i=0;i<users.length;i++){var user=users[i];if(user.id==$routeParams.id)return void(self.user=user)}}).finally(cancelLoading),self.logout=function(){self.user.id===authentication.activeUser.id?(authentication.logout(),$location.path("/login")):configuration.logoutUser(self.user.id).then(function(user){self.user=user})},self.changePassword=function(){return self.loading=!0,configuration.changePassword(self.user).then(gotoConfiguration,handleError).finally(cancelLoading)},self.deleteUser=function(){if(1===self.users.length&&self.settings.requiresUserAuthentication){var alert=$mdDialog.alert().title($translate.instant("warning")).textContent($translate.instant("deleteLastUserPrompt")).ok($translate.instant("dismiss"));$mdDialog.show(alert)}else{var confirm=$mdDialog.confirm().title($translate.instant("warning")).textContent($translate.instant("deleteUserPrompt")).ok($translate.instant("yes")).cancel($translate.instant("no"));$mdDialog.show(confirm).then(function(){return self.loading=!0,configuration.removeUser(self.user.id).then(gotoConfiguration,handleError).finally(cancelLoading)})}}}]);
angular.module("overseer").controller("configurationController",["$scope","$q","$mdDialog","$location","$translate","configuration","authentication",function($scope,$q,$mdDialog,$location,$translate,configurationService,authentication){"use strict";var self=this;self.intervals=[1e3,5e3,1e4,15e3,2e4],self.lifetimes=[null,1,7,30,90],self.loading=!0,self.ready=!1,configurationService.getConfiguration().then(function(configuration){self.loading=!1,self.ready=!0,self.settingsPristine=configuration.settings,self.settings=angular.copy(configuration.settings),self.printers=configuration.printers,self.users=configuration.users}),self.updateSettings=function(){if(self.settings.requiresUserAuthentication&&!self.users.length){var confirm=$mdDialog.confirm().title($translate.instant("warning")).textContent($translate.instant("requiresAutnenticationPrompt")).ok($translate.instant("addUser")).cancel($translate.instant("cancel"));$mdDialog.show(confirm).then(function(){$location.path("/configuration/users/add")},function(){self.revertSettings()})}else self.loading=!0,configurationService.updateSettings(self.settings).then(function(updatedSettings){self.loading=!1,self.settingsPristine.requiresUserAuthentication&&!updatedSettings.requiresUserAuthentication&&authentication.logout(),!self.settingsPristine.requiresUserAuthentication&&updatedSettings.requiresUserAuthentication&&$location.path("/login"),self.settingsPristine=updatedSettings,self.settings=angular.copy(updatedSettings),self.settingsForm.$setPristine()})},self.revertSettings=function(){self.settings=angular.copy(self.settingsPristine),self.settingsForm.$setPristine()}}]);
angular.module("overseer").run(["$templateCache",function($templateCache){$templateCache.put("directives/printer.html",'<div class="printer" ng-class="{ zoomed: printerCtrl.zoom }">\r\n    <div class="webcam" ng-if="printerCtrl.model.config.webCamUrl" ng-click="printerCtrl.toggleZoom()" style="background-image: url(\'{{printerCtrl.webcamUrl}}\');" />\r\n    <div class="content">\r\n        <md-progress-linear md-mode="determinate" value="{{ printerCtrl.status.progress }}" title="{{ printerCtrl.status.progress | number : 1 }}%"></md-progress-linear>\r\n        <div class="status">\r\n            <h2 ng-bind="printerCtrl.model.name"></h2>\r\n            <span class="state" ng-if="printerCtrl.connecting">\r\n                <span translate="connecting"></span>\r\n            </span>\r\n            <span class="state" ng-if="!printerCtrl.connecting && printerCtrl.model.disabled">\r\n                <span translate="disabled"></span>\r\n            </span>\r\n            <span class="state" ng-if="printerCtrl.status">\r\n                <span translate="{{ printerCtrl.status.state }}"></span>\r\n                <span ng-if="printerCtrl.isPrinting">\r\n                    (<span translate="remaining"></span>: <span ng-bind="printerCtrl.status.estimatedTimeRemaining | duration"></span>)\r\n                </span>\r\n            </span>\r\n        </div>\r\n        <div class="controls {{ printerCtrl.status.state }}" ng-class="{ active: printerCtrl.isPrinting || printerCtrl.isPaused }">\r\n            <md-button class="md-raised md-primary resume small" ng-click="printerCtrl.resume()">\r\n                <i class="fa fa-play"></i>\r\n            </md-button>\r\n            <md-button class="md-raised md-warn pause small" ng-click="printerCtrl.pause()">\r\n                <i class="fa fa-pause"></i>\r\n            </md-button>\r\n            <md-button class="md-raised cancel small dark" ng-click="printerCtrl.cancel()">\r\n                <i class="fa fa-stop"></i>\r\n            </md-button>\r\n            <md-button class="md-raised tune small dark" ng-click="printerCtrl.tune()">\r\n                <i class="fa fa-wrench"></i>\r\n            </md-button>\r\n        </div>\r\n        <div class="controls" ng-class="{ active: printerCtrl.isIdle || printerCtrl.isDisconnected }">\r\n            <md-button class="md-raised web-access small dark" href="{{ printerCtrl.model.config.url }}" target="_blank" title="{{ \'openWebsite\' | translate }}">\r\n                <i class="fa fa-external-link"></i>\r\n            </md-button>\r\n        </div>\r\n        <div class="controls" ng-class="{ active: printerCtrl.isDisabled }">\r\n            <md-button class="md-raised web-access small dark" href="/#!/configuration/edit/{{printerCtrl.model.id}}" title="{{ \'edit\' | translate }}">\r\n                <i class="fa fa-gear"></i>\r\n            </md-button>\r\n        </div>\r\n    </div>\r\n    <div class="temps" ng-if="!printerCtrl.isDisconnected">\r\n        <table class="temp-table" ng-repeat="tool in printerCtrl.model.config.tools">\r\n            <tbody>\r\n                <tr>\r\n                    <td ng-bind="tool"></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <span ng-bind="printerCtrl.getActualTemp(tool) | number : 0"></span> &deg;C /\r\n                        <span ng-bind="printerCtrl.getTargetTemp(tool) | number : 0"></span> &deg;C\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <table class="temp-table" ng-if="printerCtrl.model.config.heatedBed">\r\n            <tbody>\r\n                <tr>\r\n                    <td translate="bed"></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <span ng-bind="printerCtrl.getActualTemp(\'bed\') | number : 0"></span> &deg;C /\r\n                        <span ng-bind="printerCtrl.getTargetTemp(\'bed\') | number : 0"></span> &deg;C\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</div>'),$templateCache.put("views/index.html",'<div>\r\n    <div ng-if="!ctrl.loading && ctrl.printers.length">\r\n        <resizer count="ctrl.printers.length" output="ctrl.resizer">\r\n            <printer ng-repeat="printer in ctrl.printers" model="printer" style="width: {{ ctrl.resizer.width }}%; height: {{ ctrl.resizer.height }}px"></printer>\r\n        </resizer>\r\n    </div>\r\n    <div class="no-printers" ng-if="!ctrl.loading && !ctrl.printers.length">\r\n        <p translate="noPrinter"></p>\r\n        <p>\r\n            <md-button href="/#!/configuration/printers/add">\r\n                <span translate="noPrintersAddPrinter"></span>                \r\n            </md-button>\r\n            <md-button href="/#!/configuration">\r\n                <span translate="noPrintersEditPrinters"></span>\r\n            </md-button>\r\n        </p>\r\n    </div>\r\n</div>'),$templateCache.put("views/login.html",'<form name="loginForm" ng-disabled="ctrl.loading" novalidate>\r\n    <md-card flex-gt-sm="50" flex-offset-gt-sm="25">\r\n        <md-card-title>\r\n            <md-card-title-text>\r\n                <span class="md-headline" translate="login"></span>\r\n            </md-card-title-text>\r\n        </md-card-title>\r\n        <md-card-content>\r\n            <md-input-container ng-if="ctrl.error">\r\n                <div class="error" ng-bind="ctrl.error"></div>\r\n            </md-input-container>            \r\n            <md-input-container class="md-block">\r\n                <label translate="username"></label>\r\n                <input ng-model="ctrl.user.username" title="{{ username | translate }}" required/>\r\n            </md-input-container>\r\n            <md-input-container class="md-block">\r\n                <label translate="password"></label>\r\n                <input type="password" ng-model="ctrl.user.password" title="{{ password | translate }}" required/>\r\n            </md-input-container>\r\n        </md-card-content>\r\n        <md-card-actions layout="row" layout-align="end center">\r\n            <md-button type="submit" class="md-primary" ng-click="ctrl.login()" ng-disabled="ctrl.loading || loginForm.$pristine || loginForm.$invalid">\r\n                <span translate="login"></span>\r\n            </md-button>\r\n        </md-card-actions>\r\n    </md-card>\r\n</form>'),$templateCache.put("modals/tune.html",'<md-dialog class="tune" flex-gt-md="40" flex="80">\r\n    <md-toolbar class="md-hue-2">\r\n        <div class="md-toolbar-tools">\r\n            <div flex>\r\n                <h2>{{ ctrl.printer.name }}</h2>\r\n                <span class="status" translate="{{ ctrl.status.state }}"></span>\r\n            </div>\r\n            <a class="action-button" ng-if="ctrl.printer.config.url" href="{{ ctrl.printer.config.url }}" target="_blank">\r\n                <span translate="openWebsite"></span>\r\n                <i class="fa fa-external-link"></i>\r\n            </a>\r\n        </div>\r\n    </md-toolbar>\r\n    <md-dialog-content>\r\n        <div layout="row" class="progress">\r\n            <div flex>\r\n                <h5 translate="Progress"></h5>\r\n                <md-progress-linear md-mode="determinate" value="{{ ctrl.status.progress }}" title="{{ ctrl.status.progress }}%"></md-progress-linear>\r\n                <div layout>\r\n                    <span class="elapsed-time" flex="50">\r\n                        <span class="time-label"><span translate="elapsed"></span>:</span>\r\n                        {{ ctrl.status.elapsedPrintTime | duration }}\r\n                    </span>\r\n                    <span class="estimated-time" flex="50">\r\n                        <span class="time-label"><span translate="estimated"></span>: </span>                        \r\n                        {{ ctrl.status.estimatedTimeRemaining | duration }}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <div class="print-actions">\r\n                <md-button class="md-raised md-primary small" ng-if="ctrl.status.state === \'Paused\'" ng-click="ctrl.resume()">\r\n                    <i class="fa fa-play"></i>\r\n                </md-button>\r\n                <md-button class="md-raised md-warn small" ng-if="ctrl.status.state === \'Printing\'" ng-click="ctrl.pause()">\r\n                    <i class="fa fa-pause"></i>\r\n                </md-button>\r\n                <md-button class="md-raised small light" ng-click="ctrl.cancel()">\r\n                    <i class="fa fa-stop"></i>\r\n                </md-button>\r\n            </div>\r\n        </div>\r\n        <div layout-gt-sm="row" layout-xs="column">\r\n            <div flex flex-sm="100">\r\n                <table class="temp-table">\r\n                    <tbody>\r\n                        <tr ng-repeat="temp in ctrl.status.temperatures">\r\n                            <th ng-bind="temp.name"></th>\r\n                            <td class="actual-temp" ng-class="{ warm: (temp.actual / temp.target > 0.5), hot: (temp.actual / temp.target > 0.85) }">\r\n                                {{ temp.actual | number : 1 }} &deg;C\r\n                            </td>\r\n                            <td>\r\n                                <md-button class="md-raised smaller" ng-click="ctrl.decreaseTemp(temp.name)">\r\n                                    <i class="fa fa-minus"></i>\r\n                                </md-button>\r\n                                <span class="target-temp">\r\n                                    {{ temp.target | number : 0 }} &deg;C\r\n                                </span> \r\n                                <md-button class="md-raised smaller" ng-click="ctrl.increaseTemp(temp.name)">\r\n                                    <i class="fa fa-plus"></i>\r\n                                </md-button>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div flex flex-sm="100" class="controls">\r\n                <table>\r\n                    <tbody>\r\n                    <tr>\r\n                        <th translate="fanSpeed"></th>\r\n                        <td>\r\n                            <md-slider class="md-primary" flex md-discrete ng-model="ctrl.fanSpeed" ng-model-options="ctrl.ngModelOptions" ng-change="ctrl.setFanSpeed()" step="1" min="0" max="100"></md-slider>\r\n                        </td>\r\n                        <td>\r\n                            {{ ctrl.fanSpeed }}%\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th translate="feedRate"></th>\r\n                        <td>                            \r\n                            <md-slider class="md-primary" flex md-discrete ng-model="ctrl.feedRate" ng-model-options="ctrl.ngModelOptions" ng-change="ctrl.setFeedRate()" step="1" min="50" max="150"></md-slider>\r\n                        </td>\r\n                        <td>\r\n                            {{ ctrl.feedRate }}%\r\n                        </td>\r\n                    </tr>\r\n                    <tr ng-repeat="tool in ctrl.printer.config.tools">\r\n                        <th>\r\n                            <span translate="flowRate"></span> <span class="tool-name" ng-if="ctrl.printer.config.tools.length > 1">" {{tool}}</span>\r\n                        </th>\r\n                        <td>\r\n                            <md-slider class="md-primary" flex md-discrete ng-model="ctrl.flowRates[$index]" ng-model-options="ctrl.ngModelOptions" ng-change="ctrl.setFlowRate($index)" step="1" min="75" max="125"></md-slider>\r\n                        </td>\r\n                        <td>\r\n                            {{ ctrl.flowRates[$index] }}%\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    </md-dialog-content>\r\n    <md-dialog-actions layout="row" layout-align="end center">\r\n        <md-button ng-click="ctrl.hide()">\r\n            <span translate="dismiss"></span>\r\n        </md-button>\r\n    </md-dialog-actions>\r\n</md-dialog>'),$templateCache.put("views/configuration/add.html",'\r\n<form name="ctrl.addForm" class="form-vertical" novalidate>\r\n    <md-card flex-gt-sm="50" flex-offset-gt-sm="25">\r\n        <md-card-title>\r\n            <md-card-title-text>\r\n                <span class="md-headline" translate="addPrinter"></span>\r\n            </md-card-title-text>\r\n        </md-card-title>\r\n        <md-card-content>\r\n            <md-input-container class="md-block">\r\n                <label translate="printerType"></label>\r\n                <md-select ng-model="ctrl.model.printerType" ng-disabled="ctrl.printerTypes.length === 1" required>\r\n                    <md-option ng-repeat="type in ctrl.printerTypes" value="{{type}}">\r\n                        {{ type | translate }}\r\n                    </md-option>\r\n                </md-select>\r\n            </md-input-container>\r\n            <md-input-container class="md-block" ng-if="ctrl.model.printerType">\r\n                <label translate="name"></label>\r\n                <input ng-model="ctrl.model.name" required />\r\n            </md-input-container>\r\n            <ng-include ng-if="ctrl.configTemplateUrl" src="ctrl.configTemplateUrl"></ng-include>\r\n        </md-card-content>\r\n        <md-card-actions layout="row" layout-align="end center">\r\n            <md-button href="/#!/configuration" translate="cancel"></md-button>\r\n            <md-button type="submit" class="md-primary" ng-click="ctrl.addPrinter()" ng-disabled="ctrl.addForm.$pristine || ctrl.addForm.$invalid" translate="save"></md-button>\r\n        </md-card-actions>\r\n    </md-card>\r\n</form>'),$templateCache.put("views/configuration/addUser.html",'<form name="ctrl.addForm" novalidate>\r\n    <md-card flex-gt-sm="50" flex-offset-gt-sm="25">\r\n        <md-card-title>\r\n            <md-card-title-text>\r\n                <span class="md-headline">\r\n                    {{ \'add\' | translate }} {{ \'user\' | translate }}\r\n                </span>\r\n            </md-card-title-text>\r\n        </md-card-title>\r\n        <md-card-content>\r\n            <md-input-container ng-if="ctrl.error">\r\n                <div class="error" ng-bind="ctrl.error"></div>\r\n            </md-input-container>\r\n            <md-input-container class="md-block">\r\n                <label translate="username"></label>\r\n                <input type="text" ng-model="ctrl.user.username" min="8" required />\r\n            </md-input-container>\r\n            <md-input-container class="md-block">\r\n                <label translate="passwordEdit"></label>\r\n                <input type="password" ng-model="ctrl.user.password" min="8" required />\r\n            </md-input-container>\r\n            <md-input-container class="md-block">\r\n                <label translate="confirmPassword"></label>\r\n                <input type="password" ng-model="ctrl.user.passwordMatch" match="ctrl.user.password" required />\r\n            </md-input-container>\r\n        </md-card-content>\r\n        <md-card-actions layout="row" layout-align="end center">\r\n            <md-button href="/#!/configuration" translate="cancel"></md-button>\r\n            <md-button type="submit" class="md-primary" ng-click="ctrl.addUser()" ng-disabled="ctrl.addForm.$pristine || ctrl.addForm.$invalid || ctrl.loading" translate="save"></md-button>\r\n        </md-card-actions>\r\n    </md-card>\r\n</form>'),$templateCache.put("views/configuration/edit.html",'<form name="editForm" novalidate>\r\n    <md-card flex-gt-sm="50" flex-offset-gt-sm="25">\r\n        <md-card-title>\r\n            <md-card-title-text>\r\n                <span class="md-headline">{{ \'editing\' | translate }} {{ ctrl.currentName }}</span>\r\n            </md-card-title-text>\r\n        </md-card-title>\r\n        <md-card-content>\r\n            <md-input-container class="md-block">\r\n                <label translate="name"></label>\r\n                <input ng-model="ctrl.model.name" required />\r\n            </md-input-container>\r\n\r\n            <md-input-container class="md-block">\r\n                <label translate="webcamUrl"></label>\r\n                <input ng-model="ctrl.model.config.webCamUrl" required />\r\n            </md-input-container>\r\n\r\n            <md-input-container class="md-block">\r\n                <label translate="snapshotUrl"></label>\r\n                <input ng-model="ctrl.model.config.snapshotUrl" required />\r\n            </md-input-container>\r\n\r\n            <ng-include src="ctrl.configTemplateUrl"></ng-include>\r\n\r\n            <md-input-container class="md-block">\r\n                <md-switch class="md-primary" ng-model="ctrl.model.disabled" title="{{ \'disableMonitoringTitle\' | translate }}">\r\n                    <span translate="disableMonitoring"></span>\r\n                </md-switch>\r\n            </md-input-container>\r\n        </md-card-content>\r\n        <md-card-actions layout="row" layout-align="end center">\r\n            <div flex>\r\n                <md-button flex class="md-raised md-warn md-hue-2" ng-click="ctrl.deletePrinter()">\r\n                    <span translate="delete"></span>\r\n                </md-button>\r\n            </div>\r\n            <md-button href="/#!/configuration"><span translate="cancel"></span></md-button>\r\n            <md-button type="submit" class="md-primary" ng-click="ctrl.updatePrinter()" ng-disabled="editForm.$pristine || editForm.$invalid">\r\n                <span translate="save"></span>\r\n            </md-button>\r\n        </md-card-actions>\r\n    </md-card>\r\n</form>\r\n'),$templateCache.put("views/configuration/editUser.html",'<form name="ctrl.addForm" novalidate>\r\n    <md-card flex-gt-sm="50" flex-offset-gt-sm="25">\r\n        <md-card-title>\r\n            <md-card-title-text>\r\n                <span class="md-headline">\r\n                    {{ \'editing\' | translate }} {{ \'user\' | translate }} \'{{ ctrl.user.username }}\'\r\n                </span>\r\n            </md-card-title-text>\r\n        </md-card-title>\r\n        <md-card-content>\r\n            <md-input-container ng-if="ctrl.error">\r\n                <div class="error" ng-bind="ctrl.error"></div>\r\n            </md-input-container>\r\n            <md-input-container class="md-block">\r\n                <label translate="passwordEdit"></label>\r\n                <input type="password" ng-model="ctrl.user.password" min="8" required />\r\n            </md-input-container>\r\n            <md-input-container class="md-block">\r\n                <label translate="confirmPassword"></label>\r\n                <input type="password" ng-model="ctrl.user.passwordMatch" match="ctrl.user.password" required />\r\n            </md-input-container>\r\n\r\n        </md-card-content>\r\n        <md-card-actions layout="row" layout-align="end center">\r\n            <div flex>\r\n                <md-button flex class="md-raised md-warn md-hue-2" ng-click="ctrl.deleteUser()">\r\n                    <span translate="delete"></span>\r\n                </md-button>\r\n                <md-button ng-if="ctrl.user.isLoggedIn" ng-click="ctrl.logout()" translate="logout"></md-button>\r\n            </div>\r\n            <md-button href="/#!/configuration" translate="cancel"></md-button>\r\n            <md-button type="submit" class="md-primary" ng-click="ctrl.changePassword()" ng-disabled="ctrl.addForm.$pristine || ctrl.addForm.$invalid || ctrl.loading" translate="save"></md-button>\r\n        </md-card-actions>\r\n    </md-card>\r\n</form>'),$templateCache.put("views/configuration/index.html",'<md-card class="configuration" ng-if="ctrl.ready" flex-gt-sm="50" flex-offset-gt-sm="25">\r\n    <md-card-content>\r\n        <md-tabs md-dynamic-height md-border-bottom>\r\n            <md-tab label="{{ \'generalSettings\' | translate }}">\r\n                <form name="ctrl.settingsForm" ng-disabled="ctrl.loading">\r\n                    <br />\r\n                    <md-input-container class="md-block">\r\n                        <label translate="pollInterval"></label>\r\n                        <md-select ng-model="ctrl.settings.interval" required title="{{ \'pollIntervalTitle\' | translate }}">\r\n                            <md-option ng-repeat="interval in ctrl.intervals" ng-value="interval">\r\n                                {{ interval / 1000 }} {{ \'seconds\' | translate }}\r\n                            </md-option>\r\n                        </md-select>\r\n                    </md-input-container>\r\n                    <md-input-container class="md-block">\r\n                        <label translate="localPort"></label>\r\n                        <input type="number" required ng-model="ctrl.settings.localPort" title="{{ \'localPortTitle\' | translate }}"/>\r\n                    </md-input-container>\r\n                    <md-input-container class="md-block">\r\n                        <md-switch class="md-primary" ng-model="ctrl.settings.hideDisabledPrinters" title="{{ \'hideUnmonitoredTitle\' | translate }}">\r\n                            <span translate="hideUnmonitored"></span>\r\n                        </md-switch>\r\n                    </md-input-container>\r\n                    <md-input-container class="md-block">\r\n                        <md-switch class="md-primary" ng-model="ctrl.settings.requiresUserAuthentication" title="{{ \'requiresAuthenticationTitle\' | translate }}">\r\n                            <span translate="requiresAuthentication"></span>\r\n                        </md-switch>\r\n                    </md-input-container>\r\n                    <div ng-if="ctrl.settings.requiresUserAuthentication">\r\n                        <md-input-container class="md-block">\r\n                            <label translate="authenticationLifetime"></label>\r\n                            <md-select ng-model="ctrl.settings.authenticationLifetime" title="{{ authenticationLifetimeTitle | translate }}">\r\n                                <md-option ng-repeat="lifetime in ctrl.lifetimes" ng-value="lifetime">\r\n                                    <text ng-if="lifetime">{{ lifetime }} {{ \'days\' | translate }}</text>\r\n                                    <text ng-if="!lifetime">{{ \'indefinite\' | translate }}</text>\r\n                                </md-option>\r\n                            </md-select>\r\n                        </md-input-container>\r\n                    </div>\r\n                    <div class="actions" layout="row" layout-align="end center">\r\n                        <md-button class="" ng-click="ctrl.revertSettings()" ng-disabled="ctrl.settingsForm.$pristine">\r\n                            <span translate="cancel"></span>\r\n                        </md-button>\r\n                        <md-button type="submit" class="md-primary" ng-click="ctrl.updateSettings()" ng-disabled="ctrl.settingsForm.$pristine || ctrl.settingsForm.$invalid">\r\n                            <span translate="save"></span>\r\n                        </md-button>\r\n                    </div>\r\n                </form>\r\n            </md-tab>\r\n            <md-tab label="{{ \'users\' | translate }}">\r\n                <table class="user-table">\r\n                    <thead>\r\n                        <tr>\r\n                            <th translate="username"></th>\r\n                            <th translate="isLoggedIn"></th>\r\n                            <th>\r\n                                <md-button href="/#!/configuration/users/add">\r\n                                    <i class="fa fa-plus"></i>\r\n                                    <span translate="add"></span>\r\n                                </md-button>\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr ng-repeat="user in ctrl.users">\r\n                            <td ng-bind="user.username"></td>\r\n                            <td>\r\n                                <i ng-if="user.isLoggedIn" class="fa fa-check" title="{{ \'isLoggedInTitle\' | translate }}"></i>\r\n                            </td>\r\n                            <td>\r\n                                <md-button href="/#!/configuration/users/edit/{{ user.id }}">\r\n                                    <i class="fa fa-edit"></i>\r\n                                    <span translate="edit"></span>\r\n                                </md-button>\r\n                            </td>\r\n                        </tr>\r\n                        <tr class="empty-row" ng-if="!ctrl.users.length">\r\n                            <td colspan="3" translate="noUsers"></td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </md-tab>\r\n            <md-tab label="{{ \'printers\' | translate }}">\r\n                <table class="printers-table">\r\n                    <thead>\r\n                        <tr>\r\n                            <th translate="name"></th>\r\n                            <th translate="printerType"></th>\r\n                            <th translate="monitoringEnabled"></th>\r\n                            <th>\r\n                                <md-button href="/#!/configuration/printers/add">\r\n                                    <i class="fa fa-plus"></i>\r\n                                    <span translate="add"></span>\r\n                                </md-button>\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr ng-repeat="printer in ctrl.printers">\r\n                            <td ng-bind="printer.name"></td>\r\n                            <td ng-bind="printer.printerType"></td>\r\n                            <td>\r\n                                <i ng-if="printer.disabled" class="fa fa-exclamation-triangle" title="{{ \'monitoringDisabled\' | translate }}"></i>\r\n                                <i ng-if="!printer.disabled" class="fa fa-check" title="{{ \'monitoringEnabled\' | translate }}"></i>\r\n                            </td>\r\n                            <td>\r\n                                <md-button href="/#!/configuration/printers/edit/{{printer.id}}">\r\n                                    <i class="fa fa-edit"></i>\r\n                                    <span translate="edit"></span>\r\n                                </md-button>\r\n                            </td>\r\n                        </tr>\r\n                        <tr class="empty-row" ng-if="!ctrl.printers.length">\r\n                            <td colspan="4" translate="noPrinters"></td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </md-tab>\r\n        </md-tabs>\r\n    </md-card-content>\r\n</md-card>'),$templateCache.put("views/configuration/Octoprint.html",' <md-input-container class="md-block">\r\n    <label translate="url"></label>\r\n    <input ng-model="ctrl.model.config.url" required />\r\n</md-input-container>\r\n<md-input-container class="md-block">\r\n    <label translate="apiKey"></label>\r\n    <input ng-model="ctrl.model.config.apiKey" required />\r\n</md-input-container>\r\n<md-input-container class="md-block" ng-if="ctrl.model.id">\r\n    <label translate="profile"></label>\r\n    <md-select ng-model="ctrl.model.config.profile" ng-model-options="{trackBy: \'$value.id\'}" required title="{{ \'profileTitle\' | translate }}">\r\n        <md-option ng-repeat="profile in ctrl.model.config.availableProfiles" ng-value="profile">\r\n            {{ profile.name }}\r\n        </md-option>\r\n    </md-select>\r\n</md-input-container>'),$templateCache.put("views/configuration/RepRap.html",'<md-input-container class="md-block">\r\n    <label translate="url"></label>\r\n    <input ng-model="ctrl.model.config.url" required />\r\n</md-input-container>\r\n\x3c!--<md-input-container ng-if="ctrl.requiresRepRapPassword" class="md-block">\r\n    <label translate="password"></label>\r\n    <input type="password" ng-model="ctrl.model.config.password" required />\r\n</md-input-container>\r\n<md-input-container class="md-block">\r\n    <md-switch class="md-primary" ng-model="ctrl.requiresRepRapPassword">\r\n        <span translate="requiresPassword"></span>\r\n    </md-switch>\r\n</md-input-container>--\x3e\r\n')}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

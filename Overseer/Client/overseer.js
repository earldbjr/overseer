angular.module("overseer",["ngRoute","ngAnimate","ngMaterial","pascalprecht.translate"]),angular.module("overseer").config(["$routeProvider","$mdThemingProvider","$httpProvider",function($routeProvider,$mdThemingProvider,$httpProvider){"use strict";$routeProvider.when("/",{templateUrl:"views/index.html",controller:"indexController",controllerAs:"ctrl"}).when("/configuration",{templateUrl:"views/configuration/index.html",controller:"configurationController",controllerAs:"ctrl"}).when("/configuration/add",{templateUrl:"views/configuration/add.html",controller:"addPrinterController",controllerAs:"ctrl"}).when("/configuration/edit/:id",{templateUrl:"views/configuration/edit.html",controller:"editPrinterController",controllerAs:"ctrl"}).otherwise("/"),$mdThemingProvider.definePalette("overseerPalette",{50:"e6f0fd",100:"c1d9fa",200:"97c0f6",300:"6da6f2",400:"4e93f0",500:"2f80ed",600:"2a78eb",700:"236de8",800:"1d63e5",900:"1250e0",A100:"ffffff",A200:"dbe5ff",A400:"a8bfff",A700:"8facff",contrastDefaultColor:"light",contrastDarkColors:["50","100","200","300","400","A100","A200","A400","A700"],contrastLightColors:["500","600","700","800","900"]}),$mdThemingProvider.theme("default").primaryPalette("overseerPalette",{default:"500"}).dark(),$httpProvider.interceptors.push([function(){function startLoader(){0===activeRequest&&(NProgress.start(),timeout=setTimeout(function(){activeRequest=0,stopLoader()},3e4)),activeRequest++}function stopLoader(){--activeRequest<=0&&(timeout&&clearTimeout(timeout),activeRequest=0,NProgress.done())}var timeout,activeRequest=0;return{request:function(config){return startLoader(),config},response:function(response){return stopLoader(),response},responseError:function(response){return stopLoader(),response}}}])}]).controller("appCtrl",["$rootScope",function($rootScope){"use strict";$.connection.statusHub.client.statusUpdate=function(status){$rootScope.$broadcast("$StatusUpdate$",status)},$.connection.hub.url="/push",$.connection.hub.start().done(function(){$.connection.statusHub.server.startMonitoring()})}]);
angular.module("overseer").config(["$translateProvider",function($translateProvider){"use strict";$translateProvider.translations("en",{add:"Add",edit:"Edit",editing:"Editing",save:"Save",cancel:"Cancel",delete:"Delete",confirm:"Confirm",dismiss:"Dismiss",printers:"Printers",noPrinter:"There are no printers configured or all printers are disabled.",noPrintersAddPrinter:"Add New Printer",noPrintersEditPrinters:"Edit Existing Printers",generalSettings:"General Settings",pollInterval:"Poll Interval",pollIntervalTitle:"How often the printers will be polled for updates",seconds:"Seconds",localPort:"Local Port (Requires Restart)",localPortTitle:"The local port where the Overseer web app will be hosted",hideUnmonitored:"Hide Printers When Monitoring Is Disabled",hideUnmonitoredTitle:"When enabled printers with monitoring disabled will not be visible on the home page",name:"Name",printerType:"Printer Type",monitoringDisabled:"Monitoring Disabled",monitoringEnabled:"Monitoring Enabled",disableMonitoring:"Disable Monitoring",disableMonitoringTitle:"When monitoring is disabled the application will not poll for update for this printer",url:"Url",webcamUrl:"Webcam Url",snapshotUrl:"Snapshot Url",password:"Password",requiresPassword:"Requires Password",apiKey:"Api Key",profile:"Profile",profileTitle:"The profile that will be used when interacting with Octoprint",addPrinter:"Add Printer",openWebsite:"Open Website",status:"Status",progress:"Progress",elapsed:"Elapsed",estimated:"Estimated",feedRate:"Feed Rate",fanSpeed:"Fan Speed",flowRate:"Flow Rate",remaining:"Remaining",connecting:"Connecting...",disabled:"Disabled",bed:"Bed",Offline:"Offline",Idle:"Idle",Printing:"Printing",Paused:"Paused",Octoprint:"Octoprint",RepRap:"RepRap Firmware (Duet Web Control)"}).preferredLanguage("en")}]);
angular.module("overseer").directive("printer",function(){"use strict";return{restrict:"E",scope:!0,replace:!0,templateUrl:"directives/printer.html",bindToController:{model:"="},controller:["$q","$scope","controlService","$mdDialog","tuneModal",function($q,$scope,controlService,$mdDialog,tuneModal){function getTemp(tool,tempProperty){return self.status&&self.status.temperatures?self.status.temperatures[tool][tempProperty]:0}var self=this;self.connecting=!0,self.cacheBuster=Date.now(),Object.defineProperties(self,{isPrinting:{get:function(){if(self.status)return"Printing"===self.status.state}},isPaused:{get:function(){if(self.status)return"Paused"===self.status.state}},isIdle:{get:function(){if(self.status)return"Idle"===self.status.state}},isDisconnected:{get:function(){return!self.status||(!self.isDisabled&&"Disconnected"===self.status.state||"Offline"===self.status.state)}},isDisabled:{get:function(){return!self.connecting&&self.model.disabled}},webcamUrl:{get:function(){var url=self.model.config.webCamUrl;return url+(url.indexOf("?")>=0?"&":"?")+"cb="+self.cacheBuster}}}),$scope.$on("$StatusUpdate$",function(event,status){self.connecting=!1;var printerStatus=status[self.model.id];printerStatus&&(self.status=printerStatus,$scope.$digest())}),self.toggleZoom=function(){self.zoom=!self.zoom},self.tune=function(){tuneModal.open(self.model,self.status)},self.pause=function(){self.isPrinting&&controlService.pause(self.model.id)},self.resume=function(){self.isPaused&&controlService.resume(self.model.id)},self.cancel=function(){if(self.isPrinting){var confirm=$mdDialog.confirm().title("Cancel Print").textContent("Are you sure you want to cancel this print?").ok("Yes").cancel("No");$mdDialog.show(confirm).then(function(){controlService.cancel(self.model.id)},function(){})}},self.getActualTemp=function(tool){return getTemp(tool,"actual")},self.getTargetTemp=function(tool){return getTemp(tool,"target")}}],controllerAs:"printerCtrl"}});
angular.module("overseer").directive("resizer",["$window",function($window){"use strict";return{restict:"E",transclude:!0,template:"<div ng-transclude></div>",replace:!0,scope:{count:"=",output:"="},link:function(scope){function calculate(){var header=$window.document.getElementById("header"),availableHeight=body.clientHeight-Math.max(header.clientHeight,64),ratio=window.devicePixelRatio||1;if(body.clientWidth/ratio<960)width=100,height=body.clientWidth/(4/3);else{var rows=1;scope.count>2&&scope.count<=4?rows=2:scope.count>4&&(rows=Math.floor(scope.count/4)+(scope.count%4>0?1:0));var columns=Math.ceil(scope.count/rows);width=100/columns,height=rows>4?body.width/columns/(16/9):availableHeight/rows}}function onResize(){calculate(),scope.$digest()}var width,height,body=$window.document.body;scope.output={},Object.defineProperties(scope.output,{width:{get:function(){return width}},height:{get:function(){return height}}}),$window.addEventListener("resize",onResize),scope.$on("$destroy",function(){$window.removeEventListener("resize",onResize)}),calculate()}}}]);
angular.module("overseer").filter("duration",function(){"use strict";return function(value){if(!value)return"00:00:00";var d=Number(value),h=Math.floor(d/3600),m=Math.floor(d%3600/60),s=Math.floor(d%3600%60);return(h<100?("0"+h).slice(-2):h)+":"+("0"+m).slice(-2)+":"+("0"+s).slice(-2)}});
angular.module("overseer").service("tuneModal",["$mdDialog",function($mdDialog){"use strict";this.open=function(printer,status){$mdDialog.show({controllerAs:"ctrl",controller:"tuneModalController",templateUrl:"modals/tune.html",clickOutsideToClose:!0,locals:{printer:printer,status:status}})}}]).controller("tuneModalController",["$scope","$mdDialog","controlService","printer","status",function($scope,$mdDialog,controlService,printer,status){"use strict";function lockUi(promise){return self.busy=!0,promise.then(function(){self.busy=!1})}var self=this;self.printer=printer,self.status=status,self.fanSpeed=0,self.feedRate=100,self.flowRates=_.map(printer.config.tools,function(){return 100}),self.ngModelOptions={debounce:400},$scope.$on("$StatusUpdate$",function(event,status){var printerStatus=status[self.printer.id];printerStatus&&(self.status=printerStatus,$scope.$digest())}),self.pause=function(){lockUi(controlService.pause(printer.id))},self.resume=function(){lockUi(controlService.resume(printer.id))},self.cancel=function(){var confirm=$mdDialog.confirm().title("Cancel Print").textContent("Are you sure you want to cancel this print?").ok("Yes").cancel("No").multiple(!0);$mdDialog.show(confirm).then(function(){lockUi(controlService.cancel(printer.id)).then(function(){self.hide()})},function(){})},self.increaseTemp=function(toolName){var tool=_.find(status.temperatures,{name:toolName});tool.target+=1,lockUi(controlService.setTemperature(printer.id,toolName,tool.target))},self.decreaseTemp=function(toolName){var tool=_.find(status.temperatures,{name:toolName});tool.target-=1,lockUi(controlService.setTemperature(printer.id,toolName,tool.target))},self.setFeedRate=function(){lockUi(controlService.setFeedRate(printer.id,self.feedRate))},self.setFlowRate=function(index){var toolName=self.printer.config.tools[index];lockUi(controlService.setFlowRate(printer.id,toolName,self.flowRates[index]))},self.setFanSpeed=function(){lockUi(controlService.setFanSpeed(printer.id,self.fanSpeed))},self.hide=function(){$mdDialog.hide()}}]);
angular.module("overseer").service("configuration",["$q","$http",function($q,$http){"use strict";var self=this,endpoint="/services/config",cache={printers:{}};self.getPrinter=function(printerId){return cache.printers[printerId]?$q.resolve(cache.printers[printerId]):$http.get(endpoint+"/"+printerId).then(function(result){return result.data})},self.getPrinters=function(){if(Object.keys(cache.printers).length){var printers=[];return angular.forEach(cache.printers,function(printer){printers.push(printer)}),$q.resolve(printers)}return $http.get(endpoint).then(function(result){return angular.forEach(result.data,function(printer){cache.printers[printer.id]=printer}),result.data})},self.createPrinter=function(printer){return $http.put(endpoint,printer).then(function(result){return cache.printers[result.data.id]=result.data,result.data})},self.updatePrinter=function(printer){return $http.post(endpoint,printer).then(function(result){return cache.printers[result.data.id]=result.data,result.data})},self.deletePrinter=function(printer){return $http.delete(endpoint+"/"+printer.id).then(function(){delete cache.printers[printer.id]})},self.getSettings=function(){return cache.settings?$q.resolve(cache.settings):$http.get(endpoint+"/settings").then(function(result){return cache.settings=result.data,result.data})},self.updateSettings=function(settings){return $http.post(endpoint+"/settings",settings).then(function(result){return cache.settings=result.data,result.data})}}]);
angular.module("overseer").service("controlService",["$http",function($http){"use strict";var self=this,endpoint="/services/control/";self.pause=function(printerId){return $http.get(endpoint+printerId+"/pause")},self.resume=function(printerId){return $http.get(endpoint+printerId+"/resume")},self.cancel=function(printerId){return $http.get(endpoint+printerId+"/cancel")},self.setTemperature=function(printerId,tool,temp){return $http.get(endpoint+printerId+"/temp/"+tool+"/"+temp)},self.setFeedRate=function(printerId,feedRate){return $http.get(endpoint+printerId+"/feed/"+feedRate)},self.setFlowRate=function(printerId,tool,flowRate){return $http.get(endpoint+printerId+"/flow/"+tool+"/"+flowRate)},self.setFanSpeed=function(printerId,speed){return $http.get(endpoint+printerId+"/fan/"+speed)}}]);
angular.module("overseer").controller("indexController",["$q","$scope","configuration",function($q,$scope,configuration){"use strict";var self=this;self.loading=!0,$q.all({printers:configuration.getPrinters(),settings:configuration.getSettings()}).then(function(results){self.loading=!1,self.settings=results.settings,self.printers=self.settings.hideDisabledPrinters?_.filter(results.printers,{disabled:!1}):results.printers})}]);
angular.module("overseer").controller("addPrinterController",["$location","configuration",function($location,configuration){"use strict";var self=this;self.printerTypes=["Octoprint","RepRap"],self.model={},Object.defineProperty(self,"configTemplateUrl",{get:function(){return"view/configuration/"+self.model.printerType+".html"}}),self.addPrinter=function(){self.loading=!0,self.model.config.printerType=self.model.printerType,configuration.createPrinter(self.model).then(function(){self.loading=!1,$location.path("/configuration")})},self.getConfigTemplateUrl=function(){return"views/configuration/"+self.model.printerType+".html"}}]);
angular.module("overseer").controller("editPrinterController",["$scope","$location","$routeParams","$mdDialog","configuration",function($scope,$location,$routeParams,$mdDialog,configurationService){"use strict";var self=this;self.loading=!0,configurationService.getPrinter($routeParams.id).then(function(printer){self.model=angular.copy(printer),self.currentName=printer.name,self.configTemplateUrl="views/configuration/"+self.model.printerType+".html",self.loading=!1}),self.updatePrinter=function(){self.loading=!0,configurationService.updatePrinter(self.model).then(function(){$location.path("/configuration")})},self.deletePrinter=function(){var confirm=$mdDialog.confirm().title("Delete Printer").textContent("Are you sure you want remove this printer?").ok("Yes").cancel("No");$mdDialog.show(confirm).then(function(){configurationService.deletePrinter(self.model).then(function(){$location.path("/configuration")})},function(){})}}]);
angular.module("overseer").controller("configurationController",["$scope","$q","configuration",function($scope,$q,configurationService){"use strict";var self=this;self.intervals=[1e3,5e3,1e4,15e3,2e4],self.loading=!0,$q.all({printers:configurationService.getPrinters(),settings:configurationService.getSettings()}).then(function(result){self.loading=!1,self.settingsPristine=result.settings,self.settings=angular.copy(result.settings),self.printers=result.printers}),self.updateSettings=function(){configurationService.updateSettings(self.settings).then(function(updatedSettings){self.settingsPristine=updatedSettings,self.settings=angular.copy(updatedSettings),$scope.settingsForm.$setPristine()})},self.revertSettings=function(){self.settings=angular.copy(self.settingsPristine),$scope.settingsForm.$setPristine()}}]);
angular.module("overseer").run(["$templateCache",function($templateCache){$templateCache.put("directives/printer.html",'<div class="printer" ng-class="{ zoomed: printerCtrl.zoom }">\r\n    <div class="webcam" ng-if="printerCtrl.model.config.webCamUrl" ng-click="printerCtrl.toggleZoom()" style="background-image: url(\'{{printerCtrl.webcamUrl}}\');" />\r\n    <div class="content">\r\n        <md-progress-linear md-mode="determinate" value="{{ printerCtrl.status.progress }}" title="{{ printerCtrl.status.progress | number : 1 }}%"></md-progress-linear>\r\n        <div class="status">\r\n            <h2 ng-bind="printerCtrl.model.name"></h2>\r\n            <span class="state" ng-if="printerCtrl.connecting">\r\n                <span translate="connecting"></span>\r\n            </span>\r\n            <span class="state" ng-if="!printerCtrl.connecting && printerCtrl.model.disabled">\r\n                <span translate="disabled"></span>\r\n            </span>\r\n            <span class="state" ng-if="printerCtrl.status">\r\n                <span translate="{{ printerCtrl.status.state }}"></span>\r\n                <span ng-if="printerCtrl.isPrinting">\r\n                    (<span translate="remaining"></span>: <span ng-bind="printerCtrl.status.estimatedTimeRemaining | duration"></span>)\r\n                </span>\r\n            </span>\r\n        </div>\r\n        <div class="controls {{ printerCtrl.status.state }}" ng-class="{ active: printerCtrl.isPrinting || printerCtrl.isPaused }">\r\n            <md-button class="md-raised md-primary resume small" ng-click="printerCtrl.resume()">\r\n                <i class="fa fa-play"></i>\r\n            </md-button>\r\n            <md-button class="md-raised md-warn pause small" ng-click="printerCtrl.pause()">\r\n                <i class="fa fa-pause"></i>\r\n            </md-button>\r\n            <md-button class="md-raised cancel small dark" ng-click="printerCtrl.cancel()">\r\n                <i class="fa fa-stop"></i>\r\n            </md-button>\r\n            <md-button class="md-raised tune small dark" ng-click="printerCtrl.tune()">\r\n                <i class="fa fa-wrench"></i>\r\n            </md-button>\r\n        </div>\r\n        <div class="controls" ng-class="{ active: printerCtrl.isIdle || printerCtrl.isDisconnected }">\r\n            <md-button class="md-raised web-access small dark" href="{{ printerCtrl.model.config.url }}" target="_blank" title="{{ \'openWebsite\' | translate }}">\r\n                <i class="fa fa-external-link"></i>\r\n            </md-button>\r\n        </div>\r\n        <div class="controls" ng-class="{ active: printerCtrl.isDisabled }">\r\n            <md-button class="md-raised web-access small dark" href="/#!/configuration/edit/{{printerCtrl.model.id}}" title="{{ \'edit\' | translate }}">\r\n                <i class="fa fa-gear"></i>\r\n            </md-button>\r\n        </div>\r\n    </div>\r\n    <div class="temps" ng-if="!printerCtrl.isDisconnected">\r\n        <table class="temp-table" ng-repeat="tool in printerCtrl.model.config.tools">\r\n            <tbody>\r\n                <tr>\r\n                    <td ng-bind="tool"></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <span ng-bind="printerCtrl.getActualTemp(tool) | number : 0"></span> &deg;C /\r\n                        <span ng-bind="printerCtrl.getTargetTemp(tool) | number : 0"></span> &deg;C\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <table class="temp-table" ng-if="printerCtrl.model.config.heatedBed">\r\n            <tbody>\r\n                <tr>\r\n                    <td translate="bed"></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <span ng-bind="printerCtrl.getActualTemp(\'bed\') | number : 0"></span> &deg;C /\r\n                        <span ng-bind="printerCtrl.getTargetTemp(\'bed\') | number : 0"></span> &deg;C\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</div>'),$templateCache.put("modals/tune.html",'<md-dialog class="tune" flex-gt-md="40" flex="80">\r\n    <md-toolbar class="md-hue-2">\r\n        <div class="md-toolbar-tools">\r\n            <div flex>\r\n                <h2>{{ ctrl.printer.name }}</h2>\r\n                <span class="status" translate="{{ ctrl.status.state }}"></span>\r\n            </div>\r\n            <a class="action-button" ng-if="ctrl.printer.config.url" href="{{ ctrl.printer.config.url }}" target="_blank">\r\n                <span translate="openWebsite"></span>\r\n                <i class="fa fa-external-link"></i>\r\n            </a>\r\n        </div>\r\n    </md-toolbar>\r\n    <md-dialog-content>\r\n        <div layout="row" class="progress">\r\n            <div flex>\r\n                <h5 translate="Progress"></h5>\r\n                <md-progress-linear md-mode="determinate" value="{{ ctrl.status.progress }}" title="{{ ctrl.status.progress }}%"></md-progress-linear>\r\n                <div layout>\r\n                    <span class="elapsed-time" flex="50">\r\n                        <span class="time-label"><span translate="elapsed"></span>:</span>\r\n                        {{ ctrl.status.elapsedPrintTime | duration }}\r\n                    </span>\r\n                    <span class="estimated-time" flex="50">\r\n                        <span class="time-label"><span translate="estimated"></span>: </span>                        \r\n                        {{ ctrl.status.estimatedTimeRemaining | duration }}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <div class="print-actions">\r\n                <md-button class="md-raised md-primary small" ng-if="ctrl.status.state === \'Paused\'" ng-click="ctrl.resume()">\r\n                    <i class="fa fa-play"></i>\r\n                </md-button>\r\n                <md-button class="md-raised md-warn small" ng-if="ctrl.status.state === \'Printing\'" ng-click="ctrl.pause()">\r\n                    <i class="fa fa-pause"></i>\r\n                </md-button>\r\n                <md-button class="md-raised small light" ng-click="ctrl.cancel()">\r\n                    <i class="fa fa-stop"></i>\r\n                </md-button>\r\n            </div>\r\n        </div>\r\n        <div layout-gt-sm="row" layout-xs="column">\r\n            <div flex flex-sm="100">\r\n                <table class="temp-table">\r\n                    <tbody>\r\n                        <tr ng-repeat="temp in ctrl.status.temperatures">\r\n                            <th ng-bind="temp.name"></th>\r\n                            <td class="actual-temp" ng-class="{ warm: (temp.actual / temp.target > 0.5), hot: (temp.actual / temp.target > 0.85) }">\r\n                                {{ temp.actual | number : 1 }} &deg;C\r\n                            </td>\r\n                            <td>\r\n                                <md-button class="md-raised smaller" ng-click="ctrl.decreaseTemp(temp.name)">\r\n                                    <i class="fa fa-minus"></i>\r\n                                </md-button>\r\n                                <span class="target-temp">\r\n                                    {{ temp.target | number : 0 }} &deg;C\r\n                                </span> \r\n                                <md-button class="md-raised smaller" ng-click="ctrl.increaseTemp(temp.name)">\r\n                                    <i class="fa fa-plus"></i>\r\n                                </md-button>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div flex flex-sm="100" class="controls">\r\n                <table>\r\n                    <tbody>\r\n                    <tr>\r\n                        <th translate="fanSpeed"></th>\r\n                        <td>\r\n                            <md-slider class="md-primary" flex md-discrete ng-model="ctrl.fanSpeed" ng-model-options="ctrl.ngModelOptions" ng-change="ctrl.setFanSpeed()" step="1" min="0" max="100"></md-slider>\r\n                        </td>\r\n                        <td>\r\n                            {{ ctrl.fanSpeed }}%\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th translate="feedRate"></th>\r\n                        <td>                            \r\n                            <md-slider class="md-primary" flex md-discrete ng-model="ctrl.feedRate" ng-model-options="ctrl.ngModelOptions" ng-change="ctrl.setFeedRate()" step="1" min="50" max="150"></md-slider>\r\n                        </td>\r\n                        <td>\r\n                            {{ ctrl.feedRate }}%\r\n                        </td>\r\n                    </tr>\r\n                    <tr ng-repeat="tool in ctrl.printer.config.tools">\r\n                        <th>\r\n                            <span translate="flowRate"></span> <span class="tool-name" ng-if="ctrl.printer.config.tools.length > 1">" {{tool}}</span>\r\n                        </th>\r\n                        <td>\r\n                            <md-slider class="md-primary" flex md-discrete ng-model="ctrl.flowRates[$index]" ng-model-options="ctrl.ngModelOptions" ng-change="ctrl.setFlowRate($index)" step="1" min="75" max="125"></md-slider>\r\n                        </td>\r\n                        <td>\r\n                            {{ ctrl.flowRates[$index] }}%\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    </md-dialog-content>\r\n    <md-dialog-actions layout="row" layout-align="end center">\r\n        <md-button ng-click="ctrl.hide()">\r\n            <span translate="dismiss"></span>\r\n        </md-button>\r\n    </md-dialog-actions>\r\n</md-dialog>'),$templateCache.put("views/index.html",'<div>\r\n    <div ng-if="!ctrl.loading && ctrl.printers.length">\r\n        <resizer count="ctrl.printers.length" output="ctrl.resizer">\r\n            <printer ng-repeat="printer in ctrl.printers" model="printer" style="width: {{ ctrl.resizer.width }}%; height: {{ ctrl.resizer.height }}px"></printer>\r\n        </resizer>\r\n    </div>\r\n    <div class="no-printers" ng-if="!ctrl.loading && !ctrl.printers.length">\r\n        <p translate="noPrinter"></p>\r\n        <p>\r\n            <md-button href="/#!/configuration/add">\r\n                <span translate="noPrintersAddPrinter"></span>                \r\n            </md-button>\r\n            <md-button href="/#!/configuration">\r\n                <span translate="noPrintersEditPrinters"></span>\r\n            </md-button>\r\n        </p>\r\n    </div>\r\n</div>'),$templateCache.put("views/configuration/add.html",'<div>\r\n    <md-card flex-gt-sm="50" flex-offset-gt-sm="25">\r\n        <md-card-title>\r\n            <md-card-title-text>\r\n                <span class="md-headline" translate="addPrinter"></span>\r\n            </md-card-title-text>\r\n        </md-card-title>\r\n        <md-card-content> \r\n            <form name="ctrl.addForm" class="form-vertical" novalidate>\r\n                <md-input-container class="md-block">\r\n                    <label translate="printerType"></label>\r\n                    <md-select ng-model="ctrl.model.printerType" ng-disabled="ctrl.printerTypes.length === 1" required>\r\n                        <md-option ng-repeat="type in ctrl.printerTypes" value="{{type}}">\r\n                            {{ type | translate }}\r\n                        </md-option>\r\n                    </md-select>\r\n                </md-input-container>\r\n                <md-input-container class="md-block" ng-if="ctrl.model.printerType">\r\n                    <label translate="name"></label>\r\n                    <input ng-model="ctrl.model.name" required />\r\n                </md-input-container>\r\n                <ng-include src="ctrl.getConfigTemplateUrl()"></ng-include>\r\n            </form>\r\n        </md-card-content>\r\n        <md-card-actions layout="row" layout-align="end center">\r\n            <md-button href="/#!/configuration">Cancel</md-button>\r\n            <md-button class="md-primary" ng-click="ctrl.addPrinter()" ng-disabled="ctrl.addForm.$pristine || ctrl.addForm.$invalid">Save</md-button>\r\n        </md-card-actions>\r\n    </md-card>\r\n</div>'),$templateCache.put("views/configuration/edit.html",'<div>\r\n    <md-card flex-gt-sm="50" flex-offset-gt-sm="25">\r\n        <md-card-title>\r\n            <md-card-title-text>\r\n                <span class="md-headline">{{ \'editing\' | translate }} {{ ctrl.currentName }}</span>\r\n            </md-card-title-text>\r\n        </md-card-title>\r\n        <md-card-content>\r\n            <form name="editForm">\r\n                <md-input-container class="md-block">\r\n                    <label translate="name"></label>\r\n                    <input ng-model="ctrl.model.name" required />\r\n                </md-input-container>\r\n                \r\n                <ng-include src="ctrl.configTemplateUrl"></ng-include> \r\n                <md-input-container class="md-block">                    \r\n                    <md-switch class="md-primary" ng-model="ctrl.model.disabled" title="{{ \'disableMonitoringTitle\' | translate }}">\r\n                        <span translate="disableMonitoring"></span>\r\n                    </md-switch>\r\n                </md-input-container>\r\n            </form>\r\n        </md-card-content>\r\n        <md-card-actions layout="row" layout-align="end center">\r\n            <div flex>\r\n                <md-button flex class="md-raised md-warn md-hue-2" ng-click="ctrl.deletePrinter()">\r\n                    <span translate="delete"></span>\r\n                </md-button>\r\n            </div>\r\n            <md-button href="/#!/configuration"><span translate="cancel"></span></md-button>\r\n            <md-button class="md-primary" ng-click="ctrl.updatePrinter()" ng-disabled="editForm.$pristine || editForm.$invalid">\r\n                <span translate="save"></span>\r\n            </md-button>\r\n        </md-card-actions>\r\n    </md-card> \r\n</div>'),$templateCache.put("views/configuration/index.html",'<div>    \r\n    <md-card flex-gt-sm="50" flex-offset-gt-sm="25">\r\n        <md-card-title>\r\n            <md-card-title-text>\r\n                <span class="md-headline" translate="generalSettings"></span>\r\n            </md-card-title-text>\r\n        </md-card-title>\r\n        <md-card-content>\r\n            <form name="settingsForm" ng-disabled="self.loading">\r\n                <md-input-container class="md-block">\r\n                    <label translate="pollInterval"></label>\r\n                    <md-select ng-model="ctrl.settings.interval" required title="{{ \'pollIntervalTitle\' | translate }}">\r\n                        <md-option ng-repeat="interval in ctrl.intervals" ng-value="interval">{{ interval / 1000 }} {{ \'seconds\' | translate }}</md-option>\r\n                    </md-select>\r\n                </md-input-container> \r\n                <md-input-container class="md-block">\r\n                    <label translate="localPort"></label>\r\n                    <input ng-model="ctrl.settings.localPort" title="{{ \'localPortTitle\' | translate }}" />\r\n                </md-input-container>\r\n                <md-input-container class="md-block">\r\n                    <md-switch class="md-primary" ng-model="ctrl.settings.hideDisabledPrinters" title="{{ \'hideUnmonitoredTitle\' | translate }}">\r\n                        <span translate="hideUnmonitored"></span>\r\n                    </md-switch>\r\n                </md-input-container>\r\n            </form>\r\n        </md-card-content>\r\n        <md-card-actions layout="row" layout-align="end center">\r\n            <md-button class="" ng-click="ctrl.revertSettings()" ng-disabled="settingsForm.$pristine">\r\n                <span translate="cancel"></span>\r\n            </md-button>\r\n            <md-button class="md-primary" ng-click="ctrl.updateSettings()" ng-disabled="settingsForm.$pristine || settingsForm.$invalid">\r\n                <span translate="save"></span>\r\n            </md-button>\r\n        </md-card-actions>\r\n    </md-card>\r\n    <md-card flex-gt-sm="50" flex-offset-gt-sm="25">\r\n        <md-card-title>\r\n            <md-card-title-text>\r\n                <span class="md-headline" translate="Printers"></span>\r\n            </md-card-title-text>\r\n        </md-card-title>\r\n        <md-card-content>\r\n            <table class="printers-table">\r\n                <thead>\r\n                    <tr>\r\n                        <th translate="name"></th>\r\n                        <th translate="printerType"></th>\r\n                        <th></th>\r\n                        <th>\r\n                            <md-button href="/#!/configuration/add">\r\n                                <i class="fa fa-plus"></i>\r\n                                <span translate="add"></span>\r\n                            </md-button>\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr ng-repeat="printer in ctrl.printers">\r\n                        <td ng-bind="printer.name"></td>\r\n                        <td ng-bind="printer.printerType"></td>\r\n                        <td>\r\n                            <i ng-if="printer.disabled" class="fa fa-exclamation-triangle" title="{{ \'monitoringDisabled\' | translate }}"></i>                                \r\n                            <i ng-if="!printer.disabled" class="fa fa-check" title="{{ \'monitoringEnabled\' | translate }}"></i>                                \r\n                        </td>\r\n                        <td>\r\n                            <md-button href="/#!/configuration/edit/{{printer.id}}">\r\n                                <i class="fa fa-edit"></i>\r\n                                <span translate="edit"></span>\r\n                            </md-button>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </md-card-content>\r\n    </md-card>\r\n</div>'),$templateCache.put("views/configuration/Octoprint.html",'<div>\r\n    <md-input-container class="md-block">\r\n        <label translate="url"></label>\r\n        <input ng-model="ctrl.model.config.url" required />\r\n    </md-input-container>\r\n    <md-input-container class="md-block">\r\n        <label translate="apiKey"></label>\r\n        <input ng-model="ctrl.model.config.apiKey" required />\r\n    </md-input-container>\r\n    <md-input-container class="md-block" ng-if="ctrl.model.id">\r\n        <label translate="profile"></label>\r\n        <md-select ng-model="ctrl.model.config.profile" ng-model-options="{trackBy: \'$value.id\'}" required title="{{ \'profileTitle\' | translate }}">\r\n            <md-option ng-repeat="profile in ctrl.model.config.availableProfiles" ng-value="profile">\r\n                {{ profile.name }}\r\n            </md-option>\r\n        </md-select>\r\n    </md-input-container>\r\n</div>'),$templateCache.put("views/configuration/RepRap.html",'<div>\r\n    <md-input-container class="md-block">\r\n        <label translate="url"></label>\r\n        <input ng-model="ctrl.model.config.url" required />\r\n    </md-input-container>\r\n    <md-input-container class="md-block">\r\n        <label translate="webcamUrl"></label>\r\n        <input ng-model="ctrl.model.config.webCamUrl" required />\r\n    </md-input-container>\r\n    <md-input-container class="md-block">\r\n        <label translate="snapshotUrl"></label>\r\n        <input ng-model="ctrl.model.config.snapshotUrl" required />\r\n    </md-input-container>\r\n    \x3c!--<md-input-container ng-if="ctrl.requiresRepRapPassword" class="md-block">\r\n        <label translate="password"></label>\r\n        <input type="password" ng-model="ctrl.model.config.password" required />\r\n    </md-input-container>\r\n    <md-input-container class="md-block">\r\n        <md-switch class="md-primary" ng-model="ctrl.requiresRepRapPassword">\r\n            <span translate="requiresPassword"></span>\r\n        </md-switch>\r\n    </md-input-container>--\x3e\r\n</div>')}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImxvY2FsZXMuanMiLCJkaXJlY3RpdmVzL3ByaW50ZXIuanMiLCJkaXJlY3RpdmVzL3Jlc2l6ZXIuanMiLCJmaWx0ZXJzL2R1cmF0aW9uLmpzIiwibW9kYWxzL3R1bmUuanMiLCJzZXJ2aWNlcy9jb25maWd1cmF0aW9uLmpzIiwic2VydmljZXMvY29udHJvbC5qcyIsInZpZXdzL2luZGV4LmpzIiwidmlld3MvY29uZmlndXJhdGlvbi9hZGQuanMiLCJ2aWV3cy9jb25maWd1cmF0aW9uL2VkaXQuanMiLCJ2aWV3cy9jb25maWd1cmF0aW9uL2luZGV4LmpzIiwidGVtcGxhdGVzLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIiRtZFRoZW1pbmdQcm92aWRlciIsIiRodHRwUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwiY29udHJvbGxlckFzIiwib3RoZXJ3aXNlIiwiZGVmaW5lUGFsZXR0ZSIsIjUwIiwiMTAwIiwiMjAwIiwiMzAwIiwiNDAwIiwiNTAwIiwiNjAwIiwiNzAwIiwiODAwIiwiOTAwIiwiQTEwMCIsIkEyMDAiLCJBNDAwIiwiQTcwMCIsImNvbnRyYXN0RGVmYXVsdENvbG9yIiwiY29udHJhc3REYXJrQ29sb3JzIiwiY29udHJhc3RMaWdodENvbG9ycyIsInRoZW1lIiwicHJpbWFyeVBhbGV0dGUiLCJkZWZhdWx0IiwiZGFyayIsImludGVyY2VwdG9ycyIsInB1c2giLCJzdGFydExvYWRlciIsImFjdGl2ZVJlcXVlc3QiLCJOUHJvZ3Jlc3MiLCJzdGFydCIsInRpbWVvdXQiLCJzZXRUaW1lb3V0Iiwic3RvcExvYWRlciIsImNsZWFyVGltZW91dCIsImRvbmUiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJyZXNwb25zZUVycm9yIiwiJHJvb3RTY29wZSIsIiQiLCJjb25uZWN0aW9uIiwic3RhdHVzSHViIiwiY2xpZW50Iiwic3RhdHVzVXBkYXRlIiwic3RhdHVzIiwiJGJyb2FkY2FzdCIsImh1YiIsInVybCIsInNlcnZlciIsInN0YXJ0TW9uaXRvcmluZyIsIiR0cmFuc2xhdGVQcm92aWRlciIsInRyYW5zbGF0aW9ucyIsImFkZCIsImVkaXQiLCJlZGl0aW5nIiwic2F2ZSIsImNhbmNlbCIsImRlbGV0ZSIsImNvbmZpcm0iLCJkaXNtaXNzIiwicHJpbnRlcnMiLCJub1ByaW50ZXIiLCJub1ByaW50ZXJzQWRkUHJpbnRlciIsIm5vUHJpbnRlcnNFZGl0UHJpbnRlcnMiLCJnZW5lcmFsU2V0dGluZ3MiLCJwb2xsSW50ZXJ2YWwiLCJwb2xsSW50ZXJ2YWxUaXRsZSIsInNlY29uZHMiLCJsb2NhbFBvcnQiLCJsb2NhbFBvcnRUaXRsZSIsImhpZGVVbm1vbml0b3JlZCIsImhpZGVVbm1vbml0b3JlZFRpdGxlIiwibmFtZSIsInByaW50ZXJUeXBlIiwibW9uaXRvcmluZ0Rpc2FibGVkIiwibW9uaXRvcmluZ0VuYWJsZWQiLCJkaXNhYmxlTW9uaXRvcmluZyIsImRpc2FibGVNb25pdG9yaW5nVGl0bGUiLCJ3ZWJjYW1VcmwiLCJzbmFwc2hvdFVybCIsInBhc3N3b3JkIiwicmVxdWlyZXNQYXNzd29yZCIsImFwaUtleSIsInByb2ZpbGUiLCJwcm9maWxlVGl0bGUiLCJhZGRQcmludGVyIiwib3BlbldlYnNpdGUiLCJwcm9ncmVzcyIsImVsYXBzZWQiLCJlc3RpbWF0ZWQiLCJmZWVkUmF0ZSIsImZhblNwZWVkIiwiZmxvd1JhdGUiLCJyZW1haW5pbmciLCJjb25uZWN0aW5nIiwiZGlzYWJsZWQiLCJiZWQiLCJPZmZsaW5lIiwiSWRsZSIsIlByaW50aW5nIiwiUGF1c2VkIiwiT2N0b3ByaW50IiwiUmVwUmFwIiwicHJlZmVycmVkTGFuZ3VhZ2UiLCJkaXJlY3RpdmUiLCJyZXN0cmljdCIsInNjb3BlIiwicmVwbGFjZSIsImJpbmRUb0NvbnRyb2xsZXIiLCJtb2RlbCIsIiRxIiwiJHNjb3BlIiwiY29udHJvbFNlcnZpY2UiLCIkbWREaWFsb2ciLCJ0dW5lTW9kYWwiLCJnZXRUZW1wIiwidG9vbCIsInRlbXBQcm9wZXJ0eSIsInNlbGYiLCJ0ZW1wZXJhdHVyZXMiLCJ0aGlzIiwiY2FjaGVCdXN0ZXIiLCJEYXRlIiwibm93IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydGllcyIsImlzUHJpbnRpbmciLCJnZXQiLCJzdGF0ZSIsImlzUGF1c2VkIiwiaXNJZGxlIiwiaXNEaXNjb25uZWN0ZWQiLCJpc0Rpc2FibGVkIiwid2ViQ2FtVXJsIiwiaW5kZXhPZiIsIiRvbiIsImV2ZW50IiwicHJpbnRlclN0YXR1cyIsImlkIiwiJGRpZ2VzdCIsInRvZ2dsZVpvb20iLCJ6b29tIiwidHVuZSIsIm9wZW4iLCJwYXVzZSIsInJlc3VtZSIsInRpdGxlIiwidGV4dENvbnRlbnQiLCJvayIsInNob3ciLCJ0aGVuIiwiZ2V0QWN0dWFsVGVtcCIsImdldFRhcmdldFRlbXAiLCIkd2luZG93IiwicmVzdGljdCIsInRyYW5zY2x1ZGUiLCJ0ZW1wbGF0ZSIsImNvdW50Iiwib3V0cHV0IiwibGluayIsImNhbGN1bGF0ZSIsImhlYWRlciIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJhdmFpbGFibGVIZWlnaHQiLCJib2R5IiwiY2xpZW50SGVpZ2h0IiwiTWF0aCIsIm1heCIsInJhdGlvIiwid2luZG93IiwiZGV2aWNlUGl4ZWxSYXRpbyIsImNsaWVudFdpZHRoIiwid2lkdGgiLCJoZWlnaHQiLCJyb3dzIiwiZmxvb3IiLCJjb2x1bW5zIiwiY2VpbCIsIm9uUmVzaXplIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJmaWx0ZXIiLCJ2YWx1ZSIsImQiLCJOdW1iZXIiLCJoIiwibSIsInMiLCJzbGljZSIsInNlcnZpY2UiLCJwcmludGVyIiwiY2xpY2tPdXRzaWRlVG9DbG9zZSIsImxvY2FscyIsImxvY2tVaSIsInByb21pc2UiLCJidXN5IiwiZmxvd1JhdGVzIiwiXyIsIm1hcCIsInRvb2xzIiwibmdNb2RlbE9wdGlvbnMiLCJkZWJvdW5jZSIsIm11bHRpcGxlIiwiaGlkZSIsImluY3JlYXNlVGVtcCIsInRvb2xOYW1lIiwiZmluZCIsInRhcmdldCIsInNldFRlbXBlcmF0dXJlIiwiZGVjcmVhc2VUZW1wIiwic2V0RmVlZFJhdGUiLCJzZXRGbG93UmF0ZSIsImluZGV4Iiwic2V0RmFuU3BlZWQiLCIkaHR0cCIsImVuZHBvaW50IiwiY2FjaGUiLCJnZXRQcmludGVyIiwicHJpbnRlcklkIiwicmVzb2x2ZSIsInJlc3VsdCIsImRhdGEiLCJnZXRQcmludGVycyIsImtleXMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiY3JlYXRlUHJpbnRlciIsInB1dCIsInVwZGF0ZVByaW50ZXIiLCJwb3N0IiwiZGVsZXRlUHJpbnRlciIsImdldFNldHRpbmdzIiwic2V0dGluZ3MiLCJ1cGRhdGVTZXR0aW5ncyIsInRlbXAiLCJzcGVlZCIsImNvbmZpZ3VyYXRpb24iLCJsb2FkaW5nIiwiYWxsIiwicmVzdWx0cyIsImhpZGVEaXNhYmxlZFByaW50ZXJzIiwiJGxvY2F0aW9uIiwicHJpbnRlclR5cGVzIiwiZGVmaW5lUHJvcGVydHkiLCJwYXRoIiwiZ2V0Q29uZmlnVGVtcGxhdGVVcmwiLCIkcm91dGVQYXJhbXMiLCJjb25maWd1cmF0aW9uU2VydmljZSIsImNvcHkiLCJjdXJyZW50TmFtZSIsImNvbmZpZ1RlbXBsYXRlVXJsIiwiaW50ZXJ2YWxzIiwic2V0dGluZ3NQcmlzdGluZSIsInVwZGF0ZWRTZXR0aW5ncyIsInNldHRpbmdzRm9ybSIsIiRzZXRQcmlzdGluZSIsInJldmVydFNldHRpbmdzIiwicnVuIiwiJHRlbXBsYXRlQ2FjaGUiXSwibWFwcGluZ3MiOiJBQUFBQSxRQUFRQyxPQUFPLFlBQWEsVUFBVyxZQUFhLGFBQWMsMkJBRWxFRCxRQUFRQyxPQUFPLFlBQ1ZDLFFBQ0csaUJBQ0EscUJBQ0EsZ0JBQ0EsU0FBVUMsZUFBZ0JDLG1CQUFvQkMsZUFDMUMsYUFFQUYsZUFDS0csS0FBSyxLQUNGQyxZQUFhLG1CQUNiQyxXQUFZLGtCQUNaQyxhQUFjLFNBRWpCSCxLQUFLLGtC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LE9BQU9nSixhQUFhQztBQy9CaEN6USxRQUFRQyxPQUFPLFlBQVkwUSxLQUFLLGlCQUFrQixTQUFTQyxnQkFBaUJBLGVBQWUvQixJQUFJLDBCQUEwQix3N0hBQ3pIK0IsZUFBZS9CLElBQUksbUJBQW1CLGl3TEFDdEMrQixlQUFlL0IsSUFBSSxtQkFBbUIsZzBCQUN0QytCLGVBQWUvQixJQUFJLCtCQUErQixpbERBQ2xEK0IsZUFBZS9CLElBQUksZ0NBQWdDLDJ1REFDbkQrQixlQUFlL0IsSUFBSSxpQ0FBaUMsNDlIQUNwRCtCLGVBQWUvQixJQUFJLHFDQUFxQywrMkJBQ3hEK0IsZUFBZS9CLElBQUksa0NBQWtDIiwiZmlsZSI6Im92ZXJzZWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoXCJvdmVyc2VlclwiLCBbXCJuZ1JvdXRlXCIsIFwibmdBbmltYXRlXCIsIFwibmdNYXRlcmlhbFwiLCBcInBhc2NhbHByZWNodC50cmFuc2xhdGVcIl0pO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoXCJvdmVyc2VlclwiKVxyXG4gICAgLmNvbmZpZyhbXHJcbiAgICAgICAgXCIkcm91dGVQcm92aWRlclwiLFxyXG4gICAgICAgIFwiJG1kVGhlbWluZ1Byb3ZpZGVyXCIsXHJcbiAgICAgICAgXCIkaHR0cFByb3ZpZGVyXCIsXHJcbiAgICAgICAgZnVuY3Rpb24gKCRyb3V0ZVByb3ZpZGVyLCAkbWRUaGVtaW5nUHJvdmlkZXIsICRodHRwUHJvdmlkZXIpIHtcclxuICAgICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgICAgICAgICAkcm91dGVQcm92aWRlclxyXG4gICAgICAgICAgICAgICAgLndoZW4oXCIvXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJ2aWV3cy9pbmRleC5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJpbmRleENvbnRyb2xsZXJcIixcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6IFwiY3RybFwiXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLndoZW4oXCIvY29uZmlndXJhdGlvblwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwidmlld3MvY29uZmlndXJhdGlvbi9pbmRleC5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJjb25maWd1cmF0aW9uQ29udHJvbGxlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogXCJjdHJsXCJcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAud2hlbihcIi9jb25maWd1cmF0aW9uL2FkZFwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwidmlld3MvY29uZmlndXJhdGlvbi9hZGQuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwiYWRkUHJpbnRlckNvbnRyb2xsZXJcIixcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6IFwiY3RybFwiXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLndoZW4oXCIvY29uZmlndXJhdGlvbi9lZGl0LzppZFwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwidmlld3MvY29uZmlndXJhdGlvbi9lZGl0Lmh0bWxcIixcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBcImVkaXRQcmludGVyQ29udHJvbGxlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogXCJjdHJsXCJcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAub3RoZXJ3aXNlKFwiL1wiKTtcclxuXHJcbiAgICAgICAgICAgICRtZFRoZW1pbmdQcm92aWRlci5kZWZpbmVQYWxldHRlKFwib3ZlcnNlZXJQYWxldHRlXCIsIHtcclxuICAgICAgICAgICAgICAgIFwiNTBcIjogXCJlNmYwZmRcIixcclxuICAgICAgICAgICAgICAgIFwiMTAwXCI6IFwiYzFkOWZhXCIsXHJcbiAgICAgICAgICAgICAgICBcIjIwMFwiOiBcIjk3YzBmNlwiLFxyXG4gICAgICAgICAgICAgICAgXCIzMDBcIjogXCI2ZGE2ZjJcIixcclxuICAgICAgICAgICAgICAgIFwiNDAwXCI6IFwiNGU5M2YwXCIsXHJcbiAgICAgICAgICAgICAgICBcIjUwMFwiOiBcIjJmODBlZFwiLFxyXG4gICAgICAgICAgICAgICAgXCI2MDBcIjogXCIyYTc4ZWJcIixcclxuICAgICAgICAgICAgICAgIFwiNzAwXCI6IFwiMjM2ZGU4XCIsXHJcbiAgICAgICAgICAgICAgICBcIjgwMFwiOiBcIjFkNjNlNVwiLFxyXG4gICAgICAgICAgICAgICAgXCI5MDBcIjogXCIxMjUwZTBcIixcclxuICAgICAgICAgICAgICAgIFwiQTEwMFwiOiBcImZmZmZmZlwiLFxyXG4gICAgICAgICAgICAgICAgXCJBMjAwXCI6IFwiZGJlNWZmXCIsXHJcbiAgICAgICAgICAgICAgICBcIkE0MDBcIjogXCJhOGJmZmZcIixcclxuICAgICAgICAgICAgICAgIFwiQTcwMFwiOiBcIjhmYWNmZlwiLFxyXG4gICAgICAgICAgICAgICAgXCJjb250cmFzdERlZmF1bHRDb2xvclwiOiBcImxpZ2h0XCIsXHJcbiAgICAgICAgICAgICAgICBcImNvbnRyYXN0RGFya0NvbG9yc1wiOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgXCI1MFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiMTAwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCIyMDBcIixcclxuICAgICAgICAgICAgICAgICAgICBcIjMwMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiNDAwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJBMTAwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJBMjAwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJBNDAwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJBNzAwXCJcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBcImNvbnRyYXN0TGlnaHRDb2xvcnNcIjogW1xyXG4gICAgICAgICAgICAgICAgICAgIFwiNTAwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCI2MDBcIixcclxuICAgICAgICAgICAgICAgICAgICBcIjcwMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiODAwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCI5MDBcIlxyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICRtZFRoZW1pbmdQcm92aWRlci50aGVtZShcImRlZmF1bHRcIilcclxuICAgICAgICAgICAgICAgIC5wcmltYXJ5UGFsZXR0ZShcIm92ZXJzZWVyUGFsZXR0ZVwiLCB7IGRlZmF1bHQ6IFwiNTAwXCIgfSlcclxuICAgICAgICAgICAgICAgIC5kYXJrKCk7XHJcblxyXG4gICAgICAgICAgICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKFtmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYWN0aXZlUmVxdWVzdCA9IDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGltZW91dDtcclxuXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzdGFydExvYWRlcigpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlUmVxdWVzdCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBOUHJvZ3Jlc3Muc3RhcnQoKTsgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVSZXF1ZXN0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3BMb2FkZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMzAgKiAxMDAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlUmVxdWVzdCsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHN0b3BMb2FkZXIoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlUmVxdWVzdC0tO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmVSZXF1ZXN0IDw9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlUmVxdWVzdCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE5Qcm9ncmVzcy5kb25lKCk7IFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gXHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0OiBmdW5jdGlvbiAoY29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0TG9hZGVyKCk7ICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uZmlnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2U6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9wTG9hZGVyKCk7ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlRXJyb3I6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9wTG9hZGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XSk7XHJcbiAgICAgICAgfVxyXG4gICAgXSlcclxuICAgIC5jb250cm9sbGVyKFwiYXBwQ3RybFwiLCBbXCIkcm9vdFNjb3BlXCIsIGZ1bmN0aW9uICgkcm9vdFNjb3BlKSB7XHJcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgICAgICQuY29ubmVjdGlvbi5zdGF0dXNIdWIuY2xpZW50LnN0YXR1c1VwZGF0ZSA9IGZ1bmN0aW9uIChzdGF0dXMpIHsgXHJcbiAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdChcIiRTdGF0dXNVcGRhdGUkXCIsIHN0YXR1cyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJC5jb25uZWN0aW9uLmh1Yi51cmwgPSBcIi9wdXNoXCI7XHJcbiAgICAgICAgJC5jb25uZWN0aW9uLmh1Yi5zdGFydCgpLmRvbmUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkLmNvbm5lY3Rpb24uc3RhdHVzSHViLnNlcnZlci5zdGFydE1vbml0b3JpbmcoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1dKTsiLCJhbmd1bGFyLm1vZHVsZShcIm92ZXJzZWVyXCIpLmNvbmZpZyhbXCIkdHJhbnNsYXRlUHJvdmlkZXJcIiwgZnVuY3Rpb24oJHRyYW5zbGF0ZVByb3ZpZGVyKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAkdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKFwiZW5cIiwgeyAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgYWRkOiBcIkFkZFwiLFxyXG4gICAgICAgIGVkaXQ6IFwiRWRpdFwiLFxyXG4gICAgICAgIGVkaXRpbmc6IFwiRWRpdGluZ1wiLFxyXG4gICAgICAgIHNhdmU6IFwiU2F2ZVwiLFxyXG4gICAgICAgIGNhbmNlbDogXCJDYW5jZWxcIixcclxuICAgICAgICBkZWxldGU6IFwiRGVsZXRlXCIsXHJcbiAgICAgICAgY29uZmlybTogXCJDb25maXJtXCIsXHJcbiAgICAgICAgZGlzbWlzczogXCJEaXNtaXNzXCIsXHJcbiAgICAgICAgcHJpbnRlcnM6IFwiUHJpbnRlcnNcIixcclxuICAgICAgICBub1ByaW50ZXI6IFwiVGhlcmUgYXJlIG5vIHByaW50ZXJzIGNvbmZpZ3VyZWQgb3IgYWxsIHByaW50ZXJzIGFyZSBkaXNhYmxlZC5cIixcclxuICAgICAgICBub1ByaW50ZXJzQWRkUHJpbnRlcjogXCJBZGQgTmV3IFByaW50ZXJcIixcclxuICAgICAgICBub1ByaW50ZXJzRWRpdFByaW50ZXJzOiBcIkVkaXQgRXhpc3RpbmcgUHJpbnRlcnNcIixcclxuICAgICAgICBnZW5lcmFsU2V0dGluZ3M6IFwiR2VuZXJhbCBTZXR0aW5nc1wiLFxyXG4gICAgICAgIHBvbGxJbnRlcnZhbDogXCJQb2xsIEludGVydmFsXCIsXHJcbiAgICAgICAgcG9sbEludGVydmFsVGl0bGU6IFwiSG93IG9mdGVuIHRoZSBwcmludGVycyB3aWxsIGJlIHBvbGxlZCBmb3IgdXBkYXRlc1wiLFxyXG4gICAgICAgIHNlY29uZHM6IFwiU2Vjb25kc1wiLFxyXG4gICAgICAgIGxvY2FsUG9ydDogXCJMb2NhbCBQb3J0IChSZXF1aXJlcyBSZXN0YXJ0KVwiLFxyXG4gICAgICAgIGxvY2FsUG9ydFRpdGxlOiBcIlRoZSBsb2NhbCBwb3J0IHdoZXJlIHRoZSBPdmVyc2VlciB3ZWIgYXBwIHdpbGwgYmUgaG9zdGVkXCIsXHJcbiAgICAgICAgaGlkZVVubW9uaXRvcmVkOiBcIkhpZGUgUHJpbnRlcnMgV2hlbiBNb25pdG9yaW5nIElzIERpc2FibGVkXCIsXHJcbiAgICAgICAgaGlkZVVubW9uaXRvcmVkVGl0bGU6IFwiV2hlbiBlbmFibGVkIHByaW50ZXJzIHdpdGggbW9uaXRvcmluZyBkaXNhYmxlZCB3aWxsIG5vdCBiZSB2aXNpYmxlIG9uIHRoZSBob21lIHBhZ2VcIixcclxuICAgICAgICBuYW1lOiBcIk5hbWVcIixcclxuICAgICAgICBwcmludGVyVHlwZTogXCJQcmludGVyIFR5cGVcIixcclxuICAgICAgICBtb25pdG9yaW5nRGlzYWJsZWQ6IFwiTW9uaXRvcmluZyBEaXNhYmxlZFwiLFxyXG4gICAgICAgIG1vbml0b3JpbmdFbmFibGVkOiBcIk1vbml0b3JpbmcgRW5hYmxlZFwiLFxyXG4gICAgICAgIGRpc2FibGVNb25pdG9yaW5nOiBcIkRpc2FibGUgTW9uaXRvcmluZ1wiLFxyXG4gICAgICAgIGRpc2FibGVNb25pdG9yaW5nVGl0bGU6IFwiV2hlbiBtb25pdG9yaW5nIGlzIGRpc2FibGVkIHRoZSBhcHBsaWNhdGlvbiB3aWxsIG5vdCBwb2xsIGZvciB1cGRhdGUgZm9yIHRoaXMgcHJpbnRlclwiLFxyXG4gICAgICAgIHVybDogXCJVcmxcIixcclxuICAgICAgICB3ZWJjYW1Vcmw6IFwiV2ViY2FtIFVybFwiLFxyXG4gICAgICAgIHNuYXBzaG90VXJsOiBcIlNuYXBzaG90IFVybFwiLFxyXG4gICAgICAgIHBhc3N3b3JkOiBcIlBhc3N3b3JkXCIsXHJcbiAgICAgICAgcmVxdWlyZXNQYXNzd29yZDogXCJSZXF1aXJlcyBQYXNzd29yZFwiLFxyXG4gICAgICAgIGFwaUtleTogXCJBcGkgS2V5XCIsXHJcbiAgICAgICAgcHJvZmlsZTogXCJQcm9maWxlXCIsXHJcbiAgICAgICAgcHJvZmlsZVRpdGxlOiBcIlRoZSBwcm9maWxlIHRoYXQgd2lsbCBiZSB1c2VkIHdoZW4gaW50ZXJhY3Rpbmcgd2l0aCBPY3RvcHJpbnRcIixcclxuICAgICAgICBhZGRQcmludGVyOiBcIkFkZCBQcmludGVyXCIsXHJcbiAgICAgICAgb3BlbldlYnNpdGU6IFwiT3BlbiBXZWJzaXRlXCIsXHJcbiAgICAgICAgc3RhdHVzOiBcIlN0YXR1c1wiLFxyXG4gICAgICAgIHByb2dyZXNzOiBcIlByb2dyZXNzXCIsXHJcbiAgICAgICAgZWxhcHNlZDogXCJFbGFwc2VkXCIsXHJcbiAgICAgICAgZXN0aW1hdGVkOiBcIkVzdGltYXRlZFwiLFxyXG4gICAgICAgIGZlZWRSYXRlOiBcIkZlZWQgUmF0ZVwiLFxyXG4gICAgICAgIGZhblNwZWVkOiBcIkZhbiBTcGVlZFwiLFxyXG4gICAgICAgIGZsb3dSYXRlOiBcIkZsb3cgUmF0ZVwiLFxyXG4gICAgICAgIHJlbWFpbmluZzogXCJSZW1haW5pbmdcIixcclxuICAgICAgICBjb25uZWN0aW5nOiBcIkNvbm5lY3RpbmcuLi5cIixcclxuICAgICAgICBkaXNhYmxlZDogXCJEaXNhYmxlZFwiLFxyXG4gICAgICAgIGJlZDogXCJCZWRcIixcclxuICAgICAgICBPZmZsaW5lOiBcIk9mZmxpbmVcIixcclxuICAgICAgICBJZGxlOiBcIklkbGVcIixcclxuICAgICAgICBQcmludGluZzogXCJQcmludGluZ1wiLFxyXG4gICAgICAgIFBhdXNlZDogXCJQYXVzZWRcIixcclxuICAgICAgICBPY3RvcHJpbnQ6IFwiT2N0b3ByaW50XCIsXHJcbiAgICAgICAgUmVwUmFwOiBcIlJlcFJhcCBGaXJtd2FyZSAoRHVldCBXZWIgQ29udHJvbClcIlxyXG4gICAgfSkucHJlZmVycmVkTGFuZ3VhZ2UoXCJlblwiKTtcclxufV0pOyIsImFuZ3VsYXIubW9kdWxlKFwib3ZlcnNlZXJcIikuZGlyZWN0aXZlKFwicHJpbnRlclwiLFxyXG4gICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXN0cmljdDogXCJFXCIsXHJcbiAgICAgICAgICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJkaXJlY3RpdmVzL3ByaW50ZXIuaHRtbFwiLFxyXG4gICAgICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgICAgICAgICAgICBtb2RlbDogXCI9XCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogW1xyXG4gICAgICAgICAgICAgICAgXCIkcVwiLFxyXG4gICAgICAgICAgICAgICAgXCIkc2NvcGVcIixcclxuICAgICAgICAgICAgICAgIFwiY29udHJvbFNlcnZpY2VcIixcclxuICAgICAgICAgICAgICAgIFwiJG1kRGlhbG9nXCIsXHJcbiAgICAgICAgICAgICAgICBcInR1bmVNb2RhbFwiLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKCRxLCAkc2NvcGUsIGNvbnRyb2xTZXJ2aWNlLCAkbWREaWFsb2csIHR1bmVNb2RhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbm5lY3RpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2FjaGVCdXN0ZXIgPSBEYXRlLm5vdygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzZWxmLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzUHJpbnRpbmc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5zdGF0dXMpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5zdGF0dXMuc3RhdGUgPT09IFwiUHJpbnRpbmdcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNQYXVzZWQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5zdGF0dXMpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5zdGF0dXMuc3RhdGUgPT09IFwiUGF1c2VkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzSWRsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGYuc3RhdHVzKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuc3RhdHVzLnN0YXRlID09PSBcIklkbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNEaXNjb25uZWN0ZWQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLnN0YXR1cykgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFzZWxmLmlzRGlzYWJsZWQgJiYgc2VsZi5zdGF0dXMuc3RhdGUgPT09IFwiRGlzY29ubmVjdGVkXCIgfHwgc2VsZi5zdGF0dXMuc3RhdGUgPT09IFwiT2ZmbGluZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0Rpc2FibGVkOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhc2VsZi5jb25uZWN0aW5nICYmIHNlbGYubW9kZWwuZGlzYWJsZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlYmNhbVVybDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gc2VsZi5tb2RlbC5jb25maWcud2ViQ2FtVXJsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAgdXJsICsgKHVybC5pbmRleE9mKFwiP1wiKSA+PSAwID8gXCImXCIgOiBcIj9cIikgKyBcImNiPVwiICsgc2VsZi5jYWNoZUJ1c3RlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJG9uKFwiJFN0YXR1c1VwZGF0ZSRcIiwgZnVuY3Rpb24gKGV2ZW50LCBzdGF0dXMpIHsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY29ubmVjdGluZyA9IGZhbHNlOyAgIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByaW50ZXJTdGF0dXMgPSBzdGF0dXNbc2VsZi5tb2RlbC5pZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmludGVyU3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnN0YXR1cyA9IHByaW50ZXJTdGF0dXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGRpZ2VzdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYudG9nZ2xlWm9vbSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi56b29tID0gIXNlbGYuem9vbTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnR1bmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR1bmVNb2RhbC5vcGVuKHNlbGYubW9kZWwsIHNlbGYuc3RhdHVzKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnBhdXNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGYuaXNQcmludGluZykgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbFNlcnZpY2UucGF1c2Uoc2VsZi5tb2RlbC5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5pc1BhdXNlZCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbFNlcnZpY2UucmVzdW1lKHNlbGYubW9kZWwuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGYuaXNQcmludGluZykgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbmZpcm0gPSAkbWREaWFsb2cuY29uZmlybSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGl0bGUoXCJDYW5jZWwgUHJpbnRcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0Q29udGVudChcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBjYW5jZWwgdGhpcyBwcmludD9cIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vayhcIlllc1wiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhbmNlbChcIk5vXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJG1kRGlhbG9nLnNob3coY29uZmlybSkudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xTZXJ2aWNlLmNhbmNlbChzZWxmLm1vZGVsLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oKXt9KTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmdldEFjdHVhbFRlbXAgPSBmdW5jdGlvbih0b29sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRUZW1wKHRvb2wsIFwiYWN0dWFsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZ2V0VGFyZ2V0VGVtcCA9IGZ1bmN0aW9uKHRvb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldFRlbXAodG9vbCwgXCJ0YXJnZXRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0VGVtcCh0b29sLCB0ZW1wUHJvcGVydHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLnN0YXR1cyB8fCAhc2VsZi5zdGF0dXMudGVtcGVyYXR1cmVzKSByZXR1cm4gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnN0YXR1cy50ZW1wZXJhdHVyZXNbdG9vbF1bdGVtcFByb3BlcnR5XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogXCJwcmludGVyQ3RybFwiXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuKTsiLCJhbmd1bGFyLm1vZHVsZShcIm92ZXJzZWVyXCIpLmRpcmVjdGl2ZShcInJlc2l6ZXJcIiwgW1wiJHdpbmRvd1wiLCBmdW5jdGlvbigkd2luZG93KSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RpY3Q6IFwiRVwiLFxyXG4gICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXHJcbiAgICAgICAgdGVtcGxhdGU6IFwiPGRpdiBuZy10cmFuc2NsdWRlPjwvZGl2PlwiLFxyXG4gICAgICAgIHJlcGxhY2U6IHRydWUsXHJcbiAgICAgICAgc2NvcGU6IHtcclxuICAgICAgICAgICAgY291bnQ6IFwiPVwiLFxyXG4gICAgICAgICAgICBvdXRwdXQ6IFwiPVwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUpIHsgICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIGJvZHkgPSAkd2luZG93LmRvY3VtZW50LmJvZHk7XHJcbiAgICAgICAgICAgIHZhciB3aWR0aDtcclxuICAgICAgICAgICAgdmFyIGhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIHNjb3BlLm91dHB1dCA9IHt9O1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzY29wZS5vdXRwdXQsIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGhlaWdodDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gY2FsY3VsYXRlKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlYWRlciA9ICR3aW5kb3cuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJoZWFkZXJcIik7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXZhaWxhYmxlSGVpZ2h0ID0gYm9keS5jbGllbnRIZWlnaHQgLSBNYXRoLm1heChoZWFkZXIuY2xpZW50SGVpZ2h0LCA2NCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdFJhdGlvID0gMTYgLyA5O1xyXG4gICAgICAgICAgICAgICAgdmFyIHJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYm9keS5jbGllbnRXaWR0aCAvIHJhdGlvIDwgOTYwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSAxMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gYm9keS5jbGllbnRXaWR0aCAvICg0LzMpOyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvd3MgPSAxOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzY29wZS5jb3VudCA+IDIgJiYgc2NvcGUuY291bnQgPD0gNCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dzID0gMjtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNjb3BlLmNvdW50ID4gNCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dzID0gTWF0aC5mbG9vcihzY29wZS5jb3VudCAvIDQpICsgKHNjb3BlLmNvdW50ICUgNCA+IDAgPyAxIDogMCk7ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2x1bW5zID0gTWF0aC5jZWlsKHNjb3BlLmNvdW50IC8gcm93cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSAxMDAgLyBjb2x1bW5zOyBcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSByb3dzID4gNCA/IGJvZHkud2lkdGggLyBjb2x1bW5zIC8gZGVmYXVsdFJhdGlvIDogYXZhaWxhYmxlSGVpZ2h0IC8gcm93cztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZnVuY3Rpb24gb25SZXNpemUoKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxjdWxhdGUoKTtcclxuICAgICAgICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIG9uUmVzaXplKTtcclxuXHJcbiAgICAgICAgICAgIHNjb3BlLiRvbihcIiRkZXN0cm95XCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIG9uUmVzaXplKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBjYWxjdWxhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XSk7IiwiYW5ndWxhci5tb2R1bGUoXCJvdmVyc2VlclwiKS5maWx0ZXIoXCJkdXJhdGlvblwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuIFwiMDA6MDA6MDBcIjtcclxuXHJcbiAgICAgICAgdmFyIGQgPSBOdW1iZXIodmFsdWUpO1xyXG4gICAgICAgIHZhciBoID0gTWF0aC5mbG9vcihkIC8gMzYwMCk7XHJcbiAgICAgICAgdmFyIG0gPSBNYXRoLmZsb29yKGQgJSAzNjAwIC8gNjApO1xyXG4gICAgICAgIHZhciBzID0gTWF0aC5mbG9vcihkICUgMzYwMCAlIDYwKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIChoIDwgMTAwID8gKFwiMFwiICsgaCkuc2xpY2UoLTIpIDogaCkgKyBcIjpcIiArIChcIjBcIiArIG0pLnNsaWNlKC0yKSArIFwiOlwiICsgKFwiMFwiICsgcykuc2xpY2UoLTIpO1xyXG4gICAgfTtcclxufSk7IiwiYW5ndWxhci5tb2R1bGUoXCJvdmVyc2VlclwiKVxyXG4gICAgLnNlcnZpY2UoXCJ0dW5lTW9kYWxcIiwgW1xyXG4gICAgICAgIFwiJG1kRGlhbG9nXCIsXHJcbiAgICAgICAgZnVuY3Rpb24gKCRtZERpYWxvZykge1xyXG4gICAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub3BlbiA9IGZ1bmN0aW9uKHByaW50ZXIsIHN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgJG1kRGlhbG9nLnNob3coe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogXCJjdHJsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJ0dW5lTW9kYWxDb250cm9sbGVyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwibW9kYWxzL3R1bmUuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrT3V0c2lkZVRvQ2xvc2U6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ZXI6IHByaW50ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogc3RhdHVzXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgXSlcclxuICAgIC5jb250cm9sbGVyKFwidHVuZU1vZGFsQ29udHJvbGxlclwiLCBbXHJcbiAgICAgICAgXCIkc2NvcGVcIixcclxuICAgICAgICBcIiRtZERpYWxvZ1wiLFxyXG4gICAgICAgIFwiY29udHJvbFNlcnZpY2VcIixcclxuICAgICAgICBcInByaW50ZXJcIixcclxuICAgICAgICBcInN0YXR1c1wiLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRtZERpYWxvZywgY29udHJvbFNlcnZpY2UsIHByaW50ZXIsIHN0YXR1cykge1xyXG4gICAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgc2VsZi5wcmludGVyID0gcHJpbnRlcjtcclxuICAgICAgICAgICAgc2VsZi5zdGF0dXMgPSBzdGF0dXM7XHJcbiAgICAgICAgICAgIHNlbGYuZmFuU3BlZWQgPSAwO1xyXG4gICAgICAgICAgICBzZWxmLmZlZWRSYXRlID0gMTAwO1xyXG4gICAgICAgICAgICBzZWxmLmZsb3dSYXRlcyA9IF8ubWFwKHByaW50ZXIuY29uZmlnLnRvb2xzLCBmdW5jdGlvbigpIHsgcmV0dXJuIDEwMDsgfSk7XHJcblxyXG4gICAgICAgICAgICBzZWxmLm5nTW9kZWxPcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgZGVib3VuY2U6IDQwMFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLiRvbihcIiRTdGF0dXNVcGRhdGUkXCIsIGZ1bmN0aW9uKGV2ZW50LCBzdGF0dXMpIHsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB2YXIgcHJpbnRlclN0YXR1cyA9IHN0YXR1c1tzZWxmLnByaW50ZXIuaWRdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHByaW50ZXJTdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnN0YXR1cyA9IHByaW50ZXJTdGF0dXM7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRkaWdlc3QoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmdW5jdGlvbiBsb2NrVWkocHJvbWlzZSkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5idXN5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24oKSB7IHNlbGYuYnVzeSA9IGZhbHNlOyB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2VsZi5wYXVzZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgbG9ja1VpKGNvbnRyb2xTZXJ2aWNlLnBhdXNlKHByaW50ZXIuaWQpKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYucmVzdW1lID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBsb2NrVWkoY29udHJvbFNlcnZpY2UucmVzdW1lKHByaW50ZXIuaWQpKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbmZpcm0gPSAkbWREaWFsb2cuY29uZmlybSgpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRpdGxlKFwiQ2FuY2VsIFByaW50XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRleHRDb250ZW50KFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGNhbmNlbCB0aGlzIHByaW50P1wiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vayhcIlllc1wiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYW5jZWwoXCJOb1wiKVxyXG5cdFx0XHRcdFx0Lm11bHRpcGxlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAkbWREaWFsb2cuc2hvdyhjb25maXJtKS50aGVuKGZ1bmN0aW9uICgpIHsgXHJcbiAgICAgICAgICAgICAgICAgICAgbG9ja1VpKGNvbnRyb2xTZXJ2aWNlLmNhbmNlbChwcmludGVyLmlkKSkudGhlbihmdW5jdGlvbigpe1xyXG5cdFx0XHRcdFx0XHRzZWxmLmhpZGUoKTtcclxuXHRcdFx0XHRcdH0pO1xyXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkgeyB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuaW5jcmVhc2VUZW1wID0gZnVuY3Rpb24gKHRvb2xOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdG9vbCA9IF8uZmluZChzdGF0dXMudGVtcGVyYXR1cmVzLCB7IG5hbWU6IHRvb2xOYW1lIH0pO1xyXG4gICAgICAgICAgICAgICAgdG9vbC50YXJnZXQgKz0gMTtcclxuXHJcbiAgICAgICAgICAgICAgICBsb2NrVWkoY29udHJvbFNlcnZpY2Uuc2V0VGVtcGVyYXR1cmUocHJpbnRlci5pZCwgdG9vbE5hbWUsIHRvb2wudGFyZ2V0KSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBzZWxmLmRlY3JlYXNlVGVtcCA9IGZ1bmN0aW9uICh0b29sTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRvb2wgPSBfLmZpbmQoc3RhdHVzLnRlbXBlcmF0dXJlcywgeyBuYW1lOiB0b29sTmFtZSB9KTtcclxuICAgICAgICAgICAgICAgIHRvb2wudGFyZ2V0IC09IDE7XHJcblxyXG4gICAgICAgICAgICAgICAgbG9ja1VpKGNvbnRyb2xTZXJ2aWNlLnNldFRlbXBlcmF0dXJlKHByaW50ZXIuaWQsIHRvb2xOYW1lLCB0b29sLnRhcmdldCkpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgc2VsZi5zZXRGZWVkUmF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgbG9ja1VpKGNvbnRyb2xTZXJ2aWNlLnNldEZlZWRSYXRlKHByaW50ZXIuaWQsIHNlbGYuZmVlZFJhdGUpKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuc2V0Rmxvd1JhdGUgPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0b29sTmFtZSA9IHNlbGYucHJpbnRlci5jb25maWcudG9vbHNbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgbG9ja1VpKGNvbnRyb2xTZXJ2aWNlLnNldEZsb3dSYXRlKHByaW50ZXIuaWQsIHRvb2xOYW1lLCBzZWxmLmZsb3dSYXRlc1tpbmRleF0pKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuc2V0RmFuU3BlZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGxvY2tVaShjb250cm9sU2VydmljZS5zZXRGYW5TcGVlZChwcmludGVyLmlkLCBzZWxmLmZhblNwZWVkKSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBzZWxmLmhpZGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICRtZERpYWxvZy5oaWRlKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgXSk7IiwiYW5ndWxhci5tb2R1bGUoXCJvdmVyc2VlclwiKS5zZXJ2aWNlKFwiY29uZmlndXJhdGlvblwiLCBbXHJcbiAgICBcIiRxXCIsXHJcbiAgICBcIiRodHRwXCIsXHJcbiAgICBmdW5jdGlvbiAoJHEsICRodHRwKSB7XHJcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICB2YXIgZW5kcG9pbnQgPSBcIi9zZXJ2aWNlcy9jb25maWdcIjtcclxuXHJcbiAgICAgICAgdmFyIGNhY2hlID0ge1xyXG4gICAgICAgICAgICBwcmludGVyczoge31cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmdldFByaW50ZXIgPSBmdW5jdGlvbihwcmludGVySWQpIHtcclxuICAgICAgICAgICAgaWYgKGNhY2hlLnByaW50ZXJzW3ByaW50ZXJJZF0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZXNvbHZlKGNhY2hlLnByaW50ZXJzW3ByaW50ZXJJZF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KGVuZHBvaW50ICsgXCIvXCIgKyBwcmludGVySWQpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7ICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuZGF0YTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5nZXRQcmludGVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKGNhY2hlLnByaW50ZXJzKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwcmludGVycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGNhY2hlLnByaW50ZXJzLCBmdW5jdGlvbihwcmludGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJpbnRlcnMucHVzaChwcmludGVyKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZXNvbHZlKHByaW50ZXJzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldChlbmRwb2ludCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gocmVzdWx0LmRhdGEsIGZ1bmN0aW9uIChwcmludGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FjaGUucHJpbnRlcnNbcHJpbnRlci5pZF0gPSBwcmludGVyO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5kYXRhO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmNyZWF0ZVByaW50ZXIgPSBmdW5jdGlvbiAocHJpbnRlcikgeyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucHV0KGVuZHBvaW50LCBwcmludGVyKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGNhY2hlLnByaW50ZXJzW3Jlc3VsdC5kYXRhLmlkXSA9IHJlc3VsdC5kYXRhO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5kYXRhO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLnVwZGF0ZVByaW50ZXIgPSBmdW5jdGlvbiAocHJpbnRlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdChlbmRwb2ludCwgcHJpbnRlcikudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGNhY2hlLnByaW50ZXJzW3Jlc3VsdC5kYXRhLmlkXSA9IHJlc3VsdC5kYXRhO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5kYXRhO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmRlbGV0ZVByaW50ZXIgPSBmdW5jdGlvbiAocHJpbnRlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZGVsZXRlKGVuZHBvaW50ICsgXCIvXCIgKyBwcmludGVyLmlkKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIGNhY2hlLnByaW50ZXJzW3ByaW50ZXIuaWRdO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmdldFNldHRpbmdzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChjYWNoZS5zZXR0aW5ncykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlc29sdmUoY2FjaGUuc2V0dGluZ3MpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KGVuZHBvaW50ICsgXCIvc2V0dGluZ3NcIikudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGNhY2hlLnNldHRpbmdzID0gcmVzdWx0LmRhdGE7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LmRhdGE7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYudXBkYXRlU2V0dGluZ3MgPSBmdW5jdGlvbihzZXR0aW5ncykge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdChlbmRwb2ludCArIFwiL3NldHRpbmdzXCIsIHNldHRpbmdzKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgY2FjaGUuc2V0dGluZ3MgPSByZXN1bHQuZGF0YTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuZGF0YTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXSk7IiwiYW5ndWxhci5tb2R1bGUoXCJvdmVyc2VlclwiKS5zZXJ2aWNlKFwiY29udHJvbFNlcnZpY2VcIiwgW1wiJGh0dHBcIiwgZnVuY3Rpb24oJGh0dHApIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHZhciBlbmRwb2ludCA9IFwiL3NlcnZpY2VzL2NvbnRyb2wvXCI7XHJcblxyXG4gICAgc2VsZi5wYXVzZSA9IGZ1bmN0aW9uKHByaW50ZXJJZCkge1xyXG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoZW5kcG9pbnQgKyBwcmludGVySWQgKyBcIi9wYXVzZVwiKTtcclxuICAgIH07XHJcblxyXG4gICAgc2VsZi5yZXN1bWUgPSBmdW5jdGlvbihwcmludGVySWQpIHtcclxuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KGVuZHBvaW50ICsgcHJpbnRlcklkICsgXCIvcmVzdW1lXCIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzZWxmLmNhbmNlbCA9IGZ1bmN0aW9uKHByaW50ZXJJZCkge1xyXG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoZW5kcG9pbnQgKyBwcmludGVySWQgKyBcIi9jYW5jZWxcIik7XHJcbiAgICB9O1xyXG5cclxuICAgIHNlbGYuc2V0VGVtcGVyYXR1cmUgPSBmdW5jdGlvbihwcmludGVySWQsIHRvb2wsIHRlbXApIHtcclxuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KGVuZHBvaW50ICsgcHJpbnRlcklkICsgXCIvdGVtcC9cIiArIHRvb2wgKyBcIi9cIiArIHRlbXApO1xyXG4gICAgfTtcclxuXHJcbiAgICBzZWxmLnNldEZlZWRSYXRlID0gZnVuY3Rpb24ocHJpbnRlcklkLCBmZWVkUmF0ZSkge1xyXG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoZW5kcG9pbnQgKyBwcmludGVySWQgKyBcIi9mZWVkL1wiICsgZmVlZFJhdGUpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzZWxmLnNldEZsb3dSYXRlID0gZnVuY3Rpb24ocHJpbnRlcklkLCB0b29sLCBmbG93UmF0ZSkge1xyXG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoZW5kcG9pbnQgKyBwcmludGVySWQgKyBcIi9mbG93L1wiICsgdG9vbCArIFwiL1wiICsgZmxvd1JhdGUpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzZWxmLnNldEZhblNwZWVkID0gZnVuY3Rpb24ocHJpbnRlcklkLCBzcGVlZCkge1xyXG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoZW5kcG9pbnQgKyBwcmludGVySWQgKyBcIi9mYW4vXCIgKyBzcGVlZCk7XHJcbiAgICB9O1xyXG59XSk7IiwiYW5ndWxhci5tb2R1bGUoXCJvdmVyc2VlclwiKS5jb250cm9sbGVyKFwiaW5kZXhDb250cm9sbGVyXCIsIFtcclxuICAgIFwiJHFcIixcclxuICAgIFwiJHNjb3BlXCIsXHJcbiAgICBcImNvbmZpZ3VyYXRpb25cIixcclxuICAgIGZ1bmN0aW9uICgkcSwgJHNjb3BlLCBjb25maWd1cmF0aW9uKSB7XHJcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLmxvYWRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAkcS5hbGwoe1xyXG4gICAgICAgICAgICBwcmludGVyczogY29uZmlndXJhdGlvbi5nZXRQcmludGVycygpLFxyXG4gICAgICAgICAgICBzZXR0aW5nczogY29uZmlndXJhdGlvbi5nZXRTZXR0aW5ncygpXHJcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbihyZXN1bHRzKSB7XHJcbiAgICAgICAgICAgIHNlbGYubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzZWxmLnNldHRpbmdzID0gcmVzdWx0cy5zZXR0aW5nczsgICAgICAgICAgICBcclxuICAgICAgICAgICAgc2VsZi5wcmludGVycyA9IHNlbGYuc2V0dGluZ3MuaGlkZURpc2FibGVkUHJpbnRlcnMgPyBfLmZpbHRlcihyZXN1bHRzLnByaW50ZXJzLCB7IGRpc2FibGVkOiBmYWxzZSB9KSA6IHJlc3VsdHMucHJpbnRlcnM7XHJcbiAgICAgICAgfSk7ICAgICAgICBcclxuICAgIH1cclxuXSk7IiwiYW5ndWxhci5tb2R1bGUoXCJvdmVyc2VlclwiKS5jb250cm9sbGVyKFwiYWRkUHJpbnRlckNvbnRyb2xsZXJcIiwgW1xyXG4gICAgXCIkbG9jYXRpb25cIixcclxuICAgIFwiY29uZmlndXJhdGlvblwiLFxyXG4gICAgZnVuY3Rpb24oJGxvY2F0aW9uLCBjb25maWd1cmF0aW9uKSB7XHJcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBcclxuICAgICAgICBzZWxmLnByaW50ZXJUeXBlcyA9IFtcIk9jdG9wcmludFwiLCBcIlJlcFJhcFwiXTsgXHJcbiAgICAgICAgc2VsZi5tb2RlbCA9IHt9OyAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCBcImNvbmZpZ1RlbXBsYXRlVXJsXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcInZpZXcvY29uZmlndXJhdGlvbi9cIiArIHNlbGYubW9kZWwucHJpbnRlclR5cGUgKyBcIi5odG1sXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc2VsZi5hZGRQcmludGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzZWxmLmxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICBzZWxmLm1vZGVsLmNvbmZpZy5wcmludGVyVHlwZSA9IHNlbGYubW9kZWwucHJpbnRlclR5cGU7ICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLmNyZWF0ZVByaW50ZXIoc2VsZi5tb2RlbCkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL2NvbmZpZ3VyYXRpb25cIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuZ2V0Q29uZmlnVGVtcGxhdGVVcmwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwidmlld3MvY29uZmlndXJhdGlvbi9cIiArIHNlbGYubW9kZWwucHJpbnRlclR5cGUgKyBcIi5odG1sXCI7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXSk7IiwiYW5ndWxhci5tb2R1bGUoXCJvdmVyc2VlclwiKS5jb250cm9sbGVyKFwiZWRpdFByaW50ZXJDb250cm9sbGVyXCIsIFtcclxuICAgIFwiJHNjb3BlXCIsXHJcbiAgICBcIiRsb2NhdGlvblwiLFxyXG4gICAgXCIkcm91dGVQYXJhbXNcIixcclxuICAgIFwiJG1kRGlhbG9nXCIsXHJcbiAgICBcImNvbmZpZ3VyYXRpb25cIixcclxuICAgIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgJHJvdXRlUGFyYW1zLCAkbWREaWFsb2csIGNvbmZpZ3VyYXRpb25TZXJ2aWNlKSB7XHJcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLmxvYWRpbmcgPSB0cnVlOyAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uZmlndXJhdGlvblNlcnZpY2UuZ2V0UHJpbnRlcigkcm91dGVQYXJhbXMuaWQpLnRoZW4oZnVuY3Rpb24gKHByaW50ZXIpIHsgICAgICAgICAgICBcclxuICAgICAgICAgICAgc2VsZi5tb2RlbCA9IGFuZ3VsYXIuY29weShwcmludGVyKTtcclxuICAgICAgICAgICAgc2VsZi5jdXJyZW50TmFtZSA9IHByaW50ZXIubmFtZTtcclxuICAgICAgICAgICAgc2VsZi5jb25maWdUZW1wbGF0ZVVybCA9IFwidmlld3MvY29uZmlndXJhdGlvbi9cIiArIHNlbGYubW9kZWwucHJpbnRlclR5cGUgKyBcIi5odG1sXCI7XHJcbiAgICAgICAgICAgIHNlbGYubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzZWxmLnVwZGF0ZVByaW50ZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHNlbGYubG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb25TZXJ2aWNlLnVwZGF0ZVByaW50ZXIoc2VsZi5tb2RlbCkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9jb25maWd1cmF0aW9uXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmRlbGV0ZVByaW50ZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGNvbmZpcm0gPSAkbWREaWFsb2cuY29uZmlybSgpXHJcbiAgICAgICAgICAgICAgICAudGl0bGUoXCJEZWxldGUgUHJpbnRlclwiKVxyXG4gICAgICAgICAgICAgICAgLnRleHRDb250ZW50KFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHJlbW92ZSB0aGlzIHByaW50ZXI/XCIpXHJcbiAgICAgICAgICAgICAgICAub2soXCJZZXNcIilcclxuICAgICAgICAgICAgICAgIC5jYW5jZWwoXCJOb1wiKTtcclxuXHJcbiAgICAgICAgICAgICRtZERpYWxvZy5zaG93KGNvbmZpcm0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvblNlcnZpY2UuZGVsZXRlUHJpbnRlcihzZWxmLm1vZGVsKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9jb25maWd1cmF0aW9uXCIpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHsgfSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXSk7IiwiYW5ndWxhci5tb2R1bGUoXCJvdmVyc2VlclwiKS5jb250cm9sbGVyKFwiY29uZmlndXJhdGlvbkNvbnRyb2xsZXJcIiwgW1xyXG4gICAgXCIkc2NvcGVcIixcclxuICAgIFwiJHFcIixcclxuICAgIFwiY29uZmlndXJhdGlvblwiLFxyXG4gICAgZnVuY3Rpb24oJHNjb3BlLCAkcSwgY29uZmlndXJhdGlvblNlcnZpY2UpIHtcclxuICAgICAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYuaW50ZXJ2YWxzID0gWzEwMDAsIDUwMDAsIDEwMDAwLCAxNTAwMCwgMjAwMDBdOyAgICAgICAgXHJcblxyXG4gICAgICAgIHNlbGYubG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgJHEuYWxsKHtcclxuICAgICAgICAgICAgcHJpbnRlcnM6IGNvbmZpZ3VyYXRpb25TZXJ2aWNlLmdldFByaW50ZXJzKCksXHJcbiAgICAgICAgICAgIHNldHRpbmdzOiBjb25maWd1cmF0aW9uU2VydmljZS5nZXRTZXR0aW5ncygpXHJcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICAgICAgc2VsZi5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHNlbGYuc2V0dGluZ3NQcmlzdGluZSA9IHJlc3VsdC5zZXR0aW5ncztcclxuICAgICAgICAgICAgc2VsZi5zZXR0aW5ncyA9IGFuZ3VsYXIuY29weShyZXN1bHQuc2V0dGluZ3MpO1xyXG4gICAgICAgICAgICBzZWxmLnByaW50ZXJzID0gcmVzdWx0LnByaW50ZXJzO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc2VsZi51cGRhdGVTZXR0aW5ncyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uU2VydmljZS51cGRhdGVTZXR0aW5ncyhzZWxmLnNldHRpbmdzKS50aGVuKGZ1bmN0aW9uKHVwZGF0ZWRTZXR0aW5ncykge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5zZXR0aW5nc1ByaXN0aW5lID0gdXBkYXRlZFNldHRpbmdzO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5zZXR0aW5ncyA9IGFuZ3VsYXIuY29weSh1cGRhdGVkU2V0dGluZ3MpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNldHRpbmdzRm9ybS4kc2V0UHJpc3RpbmUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5yZXZlcnRTZXR0aW5ncyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBzZWxmLnNldHRpbmdzID0gYW5ndWxhci5jb3B5KHNlbGYuc2V0dGluZ3NQcmlzdGluZSk7XHJcbiAgICAgICAgICAgICRzY29wZS5zZXR0aW5nc0Zvcm0uJHNldFByaXN0aW5lKCk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXSk7IiwiYW5ndWxhci5tb2R1bGUoJ292ZXJzZWVyJykucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkgeyR0ZW1wbGF0ZUNhY2hlLnB1dCgnZGlyZWN0aXZlcy9wcmludGVyLmh0bWwnLCc8ZGl2IGNsYXNzPVwicHJpbnRlclwiIG5nLWNsYXNzPVwieyB6b29tZWQ6IHByaW50ZXJDdHJsLnpvb20gfVwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVwid2ViY2FtXCIgbmctaWY9XCJwcmludGVyQ3RybC5tb2RlbC5jb25maWcud2ViQ2FtVXJsXCIgbmctY2xpY2s9XCJwcmludGVyQ3RybC50b2dnbGVab29tKClcIiBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6IHVybChcXCd7e3ByaW50ZXJDdHJsLndlYmNhbVVybH19XFwnKTtcIiAvPlxcclxcbiAgICA8ZGl2IGNsYXNzPVwiY29udGVudFwiPlxcclxcbiAgICAgICAgPG1kLXByb2dyZXNzLWxpbmVhciBtZC1tb2RlPVwiZGV0ZXJtaW5hdGVcIiB2YWx1ZT1cInt7IHByaW50ZXJDdHJsLnN0YXR1cy5wcm9ncmVzcyB9fVwiIHRpdGxlPVwie3sgcHJpbnRlckN0cmwuc3RhdHVzLnByb2dyZXNzIHwgbnVtYmVyIDogMSB9fSVcIj48L21kLXByb2dyZXNzLWxpbmVhcj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XCJzdGF0dXNcIj5cXHJcXG4gICAgICAgICAgICA8aDIgbmctYmluZD1cInByaW50ZXJDdHJsLm1vZGVsLm5hbWVcIj48L2gyPlxcclxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3RhdGVcIiBuZy1pZj1cInByaW50ZXJDdHJsLmNvbm5lY3RpbmdcIj5cXHJcXG4gICAgICAgICAgICAgICAgPHNwYW4gdHJhbnNsYXRlPVwiY29ubmVjdGluZ1wiPjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICA8L3NwYW4+XFxyXFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzdGF0ZVwiIG5nLWlmPVwiIXByaW50ZXJDdHJsLmNvbm5lY3RpbmcgJiYgcHJpbnRlckN0cmwubW9kZWwuZGlzYWJsZWRcIj5cXHJcXG4gICAgICAgICAgICAgICAgPHNwYW4gdHJhbnNsYXRlPVwiZGlzYWJsZWRcIj48L3NwYW4+XFxyXFxuICAgICAgICAgICAgPC9zcGFuPlxcclxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3RhdGVcIiBuZy1pZj1cInByaW50ZXJDdHJsLnN0YXR1c1wiPlxcclxcbiAgICAgICAgICAgICAgICA8c3BhbiB0cmFuc2xhdGU9XCJ7eyBwcmludGVyQ3RybC5zdGF0dXMuc3RhdGUgfX1cIj48L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgIDxzcGFuIG5nLWlmPVwicHJpbnRlckN0cmwuaXNQcmludGluZ1wiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgKDxzcGFuIHRyYW5zbGF0ZT1cInJlbWFpbmluZ1wiPjwvc3Bhbj46IDxzcGFuIG5nLWJpbmQ9XCJwcmludGVyQ3RybC5zdGF0dXMuZXN0aW1hdGVkVGltZVJlbWFpbmluZyB8IGR1cmF0aW9uXCI+PC9zcGFuPilcXHJcXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxcclxcbiAgICAgICAgICAgIDwvc3Bhbj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRyb2xzIHt7IHByaW50ZXJDdHJsLnN0YXR1cy5zdGF0ZSB9fVwiIG5nLWNsYXNzPVwieyBhY3RpdmU6IHByaW50ZXJDdHJsLmlzUHJpbnRpbmcgfHwgcHJpbnRlckN0cmwuaXNQYXVzZWQgfVwiPlxcclxcbiAgICAgICAgICAgIDxtZC1idXR0b24gY2xhc3M9XCJtZC1yYWlzZWQgbWQtcHJpbWFyeSByZXN1bWUgc21hbGxcIiBuZy1jbGljaz1cInByaW50ZXJDdHJsLnJlc3VtZSgpXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtcGxheVwiPjwvaT5cXHJcXG4gICAgICAgICAgICA8L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgICAgICA8bWQtYnV0dG9uIGNsYXNzPVwibWQtcmFpc2VkIG1kLXdhcm4gcGF1c2Ugc21hbGxcIiBuZy1jbGljaz1cInByaW50ZXJDdHJsLnBhdXNlKClcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1wYXVzZVwiPjwvaT5cXHJcXG4gICAgICAgICAgICA8L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgICAgICA8bWQtYnV0dG9uIGNsYXNzPVwibWQtcmFpc2VkIGNhbmNlbCBzbWFsbCBkYXJrXCIgbmctY2xpY2s9XCJwcmludGVyQ3RybC5jYW5jZWwoKVwiPlxcclxcbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXN0b3BcIj48L2k+XFxyXFxuICAgICAgICAgICAgPC9tZC1idXR0b24+XFxyXFxuICAgICAgICAgICAgPG1kLWJ1dHRvbiBjbGFzcz1cIm1kLXJhaXNlZCB0dW5lIHNtYWxsIGRhcmtcIiBuZy1jbGljaz1cInByaW50ZXJDdHJsLnR1bmUoKVwiPlxcclxcbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXdyZW5jaFwiPjwvaT5cXHJcXG4gICAgICAgICAgICA8L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRyb2xzXCIgbmctY2xhc3M9XCJ7IGFjdGl2ZTogcHJpbnRlckN0cmwuaXNJZGxlIHx8IHByaW50ZXJDdHJsLmlzRGlzY29ubmVjdGVkIH1cIj5cXHJcXG4gICAgICAgICAgICA8bWQtYnV0dG9uIGNsYXNzPVwibWQtcmFpc2VkIHdlYi1hY2Nlc3Mgc21hbGwgZGFya1wiIGhyZWY9XCJ7eyBwcmludGVyQ3RybC5tb2RlbC5jb25maWcudXJsIH19XCIgdGFyZ2V0PVwiX2JsYW5rXCIgdGl0bGU9XCJ7eyBcXCdvcGVuV2Vic2l0ZVxcJyB8IHRyYW5zbGF0ZSB9fVwiPlxcclxcbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLWV4dGVybmFsLWxpbmtcIj48L2k+XFxyXFxuICAgICAgICAgICAgPC9tZC1idXR0b24+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb250cm9sc1wiIG5nLWNsYXNzPVwieyBhY3RpdmU6IHByaW50ZXJDdHJsLmlzRGlzYWJsZWQgfVwiPlxcclxcbiAgICAgICAgICAgIDxtZC1idXR0b24gY2xhc3M9XCJtZC1yYWlzZWQgd2ViLWFjY2VzcyBzbWFsbCBkYXJrXCIgaHJlZj1cIi8jIS9jb25maWd1cmF0aW9uL2VkaXQve3twcmludGVyQ3RybC5tb2RlbC5pZH19XCIgdGl0bGU9XCJ7eyBcXCdlZGl0XFwnIHwgdHJhbnNsYXRlIH19XCI+XFxyXFxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtZ2VhclwiPjwvaT5cXHJcXG4gICAgICAgICAgICA8L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cInRlbXBzXCIgbmctaWY9XCIhcHJpbnRlckN0cmwuaXNEaXNjb25uZWN0ZWRcIj5cXHJcXG4gICAgICAgIDx0YWJsZSBjbGFzcz1cInRlbXAtdGFibGVcIiBuZy1yZXBlYXQ9XCJ0b29sIGluIHByaW50ZXJDdHJsLm1vZGVsLmNvbmZpZy50b29sc1wiPlxcclxcbiAgICAgICAgICAgIDx0Ym9keT5cXHJcXG4gICAgICAgICAgICAgICAgPHRyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHRkIG5nLWJpbmQ9XCJ0b29sXCI+PC90ZD5cXHJcXG4gICAgICAgICAgICAgICAgPC90cj5cXHJcXG4gICAgICAgICAgICAgICAgPHRyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHRkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIG5nLWJpbmQ9XCJwcmludGVyQ3RybC5nZXRBY3R1YWxUZW1wKHRvb2wpIHwgbnVtYmVyIDogMFwiPjwvc3Bhbj4gJmRlZztDIC9cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBuZy1iaW5kPVwicHJpbnRlckN0cmwuZ2V0VGFyZ2V0VGVtcCh0b29sKSB8IG51bWJlciA6IDBcIj48L3NwYW4+ICZkZWc7Q1xcclxcbiAgICAgICAgICAgICAgICAgICAgPC90ZD5cXHJcXG4gICAgICAgICAgICAgICAgPC90cj5cXHJcXG4gICAgICAgICAgICA8L3Rib2R5PlxcclxcbiAgICAgICAgPC90YWJsZT5cXHJcXG4gICAgICAgIDx0YWJsZSBjbGFzcz1cInRlbXAtdGFibGVcIiBuZy1pZj1cInByaW50ZXJDdHJsLm1vZGVsLmNvbmZpZy5oZWF0ZWRCZWRcIj5cXHJcXG4gICAgICAgICAgICA8dGJvZHk+XFxyXFxuICAgICAgICAgICAgICAgIDx0cj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDx0ZCB0cmFuc2xhdGU9XCJiZWRcIj48L3RkPlxcclxcbiAgICAgICAgICAgICAgICA8L3RyPlxcclxcbiAgICAgICAgICAgICAgICA8dHI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8dGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gbmctYmluZD1cInByaW50ZXJDdHJsLmdldEFjdHVhbFRlbXAoXFwnYmVkXFwnKSB8IG51bWJlciA6IDBcIj48L3NwYW4+ICZkZWc7QyAvXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gbmctYmluZD1cInByaW50ZXJDdHJsLmdldFRhcmdldFRlbXAoXFwnYmVkXFwnKSB8IG51bWJlciA6IDBcIj48L3NwYW4+ICZkZWc7Q1xcclxcbiAgICAgICAgICAgICAgICAgICAgPC90ZD5cXHJcXG4gICAgICAgICAgICAgICAgPC90cj5cXHJcXG4gICAgICAgICAgICA8L3Rib2R5PlxcclxcbiAgICAgICAgPC90YWJsZT5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9kaXY+Jyk7XG4kdGVtcGxhdGVDYWNoZS5wdXQoJ21vZGFscy90dW5lLmh0bWwnLCc8bWQtZGlhbG9nIGNsYXNzPVwidHVuZVwiIGZsZXgtZ3QtbWQ9XCI0MFwiIGZsZXg9XCI4MFwiPlxcclxcbiAgICA8bWQtdG9vbGJhciBjbGFzcz1cIm1kLWh1ZS0yXCI+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVwibWQtdG9vbGJhci10b29sc1wiPlxcclxcbiAgICAgICAgICAgIDxkaXYgZmxleD5cXHJcXG4gICAgICAgICAgICAgICAgPGgyPnt7IGN0cmwucHJpbnRlci5uYW1lIH19PC9oMj5cXHJcXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzdGF0dXNcIiB0cmFuc2xhdGU9XCJ7eyBjdHJsLnN0YXR1cy5zdGF0ZSB9fVwiPjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8YSBjbGFzcz1cImFjdGlvbi1idXR0b25cIiBuZy1pZj1cImN0cmwucHJpbnRlci5jb25maWcudXJsXCIgaHJlZj1cInt7IGN0cmwucHJpbnRlci5jb25maWcudXJsIH19XCIgdGFyZ2V0PVwiX2JsYW5rXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxzcGFuIHRyYW5zbGF0ZT1cIm9wZW5XZWJzaXRlXCI+PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLWV4dGVybmFsLWxpbmtcIj48L2k+XFxyXFxuICAgICAgICAgICAgPC9hPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgIDwvbWQtdG9vbGJhcj5cXHJcXG4gICAgPG1kLWRpYWxvZy1jb250ZW50PlxcclxcbiAgICAgICAgPGRpdiBsYXlvdXQ9XCJyb3dcIiBjbGFzcz1cInByb2dyZXNzXCI+XFxyXFxuICAgICAgICAgICAgPGRpdiBmbGV4PlxcclxcbiAgICAgICAgICAgICAgICA8aDUgdHJhbnNsYXRlPVwiUHJvZ3Jlc3NcIj48L2g1PlxcclxcbiAgICAgICAgICAgICAgICA8bWQtcHJvZ3Jlc3MtbGluZWFyIG1kLW1vZGU9XCJkZXRlcm1pbmF0ZVwiIHZhbHVlPVwie3sgY3RybC5zdGF0dXMucHJvZ3Jlc3MgfX1cIiB0aXRsZT1cInt7IGN0cmwuc3RhdHVzLnByb2dyZXNzIH19JVwiPjwvbWQtcHJvZ3Jlc3MtbGluZWFyPlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGxheW91dD5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZWxhcHNlZC10aW1lXCIgZmxleD1cIjUwXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0aW1lLWxhYmVsXCI+PHNwYW4gdHJhbnNsYXRlPVwiZWxhcHNlZFwiPjwvc3Bhbj46PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt7IGN0cmwuc3RhdHVzLmVsYXBzZWRQcmludFRpbWUgfCBkdXJhdGlvbiB9fVxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlc3RpbWF0ZWQtdGltZVwiIGZsZXg9XCI1MFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGltZS1sYWJlbFwiPjxzcGFuIHRyYW5zbGF0ZT1cImVzdGltYXRlZFwiPjwvc3Bhbj46IDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICBcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB7eyBjdHJsLnN0YXR1cy5lc3RpbWF0ZWRUaW1lUmVtYWluaW5nIHwgZHVyYXRpb24gfX1cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByaW50LWFjdGlvbnNcIj5cXHJcXG4gICAgICAgICAgICAgICAgPG1kLWJ1dHRvbiBjbGFzcz1cIm1kLXJhaXNlZCBtZC1wcmltYXJ5IHNtYWxsXCIgbmctaWY9XCJjdHJsLnN0YXR1cy5zdGF0ZSA9PT0gXFwnUGF1c2VkXFwnXCIgbmctY2xpY2s9XCJjdHJsLnJlc3VtZSgpXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXBsYXlcIj48L2k+XFxyXFxuICAgICAgICAgICAgICAgIDwvbWQtYnV0dG9uPlxcclxcbiAgICAgICAgICAgICAgICA8bWQtYnV0dG9uIGNsYXNzPVwibWQtcmFpc2VkIG1kLXdhcm4gc21hbGxcIiBuZy1pZj1cImN0cmwuc3RhdHVzLnN0YXRlID09PSBcXCdQcmludGluZ1xcJ1wiIG5nLWNsaWNrPVwiY3RybC5wYXVzZSgpXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXBhdXNlXCI+PC9pPlxcclxcbiAgICAgICAgICAgICAgICA8L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgICAgICAgICAgPG1kLWJ1dHRvbiBjbGFzcz1cIm1kLXJhaXNlZCBzbWFsbCBsaWdodFwiIG5nLWNsaWNrPVwiY3RybC5jYW5jZWwoKVwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1zdG9wXCI+PC9pPlxcclxcbiAgICAgICAgICAgICAgICA8L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBsYXlvdXQtZ3Qtc209XCJyb3dcIiBsYXlvdXQteHM9XCJjb2x1bW5cIj5cXHJcXG4gICAgICAgICAgICA8ZGl2IGZsZXggZmxleC1zbT1cIjEwMFwiPlxcclxcbiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9XCJ0ZW1wLXRhYmxlXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8dGJvZHk+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cInRlbXAgaW4gY3RybC5zdGF0dXMudGVtcGVyYXR1cmVzXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBuZy1iaW5kPVwidGVtcC5uYW1lXCI+PC90aD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwiYWN0dWFsLXRlbXBcIiBuZy1jbGFzcz1cInsgd2FybTogKHRlbXAuYWN0dWFsIC8gdGVtcC50YXJnZXQgPiAwLjUpLCBob3Q6ICh0ZW1wLmFjdHVhbCAvIHRlbXAudGFyZ2V0ID4gMC44NSkgfVwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgdGVtcC5hY3R1YWwgfCBudW1iZXIgOiAxIH19ICZkZWc7Q1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWQtYnV0dG9uIGNsYXNzPVwibWQtcmFpc2VkIHNtYWxsZXJcIiBuZy1jbGljaz1cImN0cmwuZGVjcmVhc2VUZW1wKHRlbXAubmFtZSlcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLW1pbnVzXCI+PC9pPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tZC1idXR0b24+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRhcmdldC10ZW1wXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgdGVtcC50YXJnZXQgfCBudW1iZXIgOiAwIH19ICZkZWc7Q1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPiBcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZC1idXR0b24gY2xhc3M9XCJtZC1yYWlzZWQgc21hbGxlclwiIG5nLWNsaWNrPVwiY3RybC5pbmNyZWFzZVRlbXAodGVtcC5uYW1lKVwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtcGx1c1wiPjwvaT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWQtYnV0dG9uPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxcclxcbiAgICAgICAgICAgICAgICA8L3RhYmxlPlxcclxcbiAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDxkaXYgZmxleCBmbGV4LXNtPVwiMTAwXCIgY2xhc3M9XCJjb250cm9sc1wiPlxcclxcbiAgICAgICAgICAgICAgICA8dGFibGU+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8dGJvZHk+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8dHI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHRyYW5zbGF0ZT1cImZhblNwZWVkXCI+PC90aD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZC1zbGlkZXIgY2xhc3M9XCJtZC1wcmltYXJ5XCIgZmxleCBtZC1kaXNjcmV0ZSBuZy1tb2RlbD1cImN0cmwuZmFuU3BlZWRcIiBuZy1tb2RlbC1vcHRpb25zPVwiY3RybC5uZ01vZGVsT3B0aW9uc1wiIG5nLWNoYW5nZT1cImN0cmwuc2V0RmFuU3BlZWQoKVwiIHN0ZXA9XCIxXCIgbWluPVwiMFwiIG1heD1cIjEwMFwiPjwvbWQtc2xpZGVyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBjdHJsLmZhblNwZWVkIH19JVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCB0cmFuc2xhdGU9XCJmZWVkUmF0ZVwiPjwvdGg+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1kLXNsaWRlciBjbGFzcz1cIm1kLXByaW1hcnlcIiBmbGV4IG1kLWRpc2NyZXRlIG5nLW1vZGVsPVwiY3RybC5mZWVkUmF0ZVwiIG5nLW1vZGVsLW9wdGlvbnM9XCJjdHJsLm5nTW9kZWxPcHRpb25zXCIgbmctY2hhbmdlPVwiY3RybC5zZXRGZWVkUmF0ZSgpXCIgc3RlcD1cIjFcIiBtaW49XCI1MFwiIG1heD1cIjE1MFwiPjwvbWQtc2xpZGVyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBjdHJsLmZlZWRSYXRlIH19JVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cInRvb2wgaW4gY3RybC5wcmludGVyLmNvbmZpZy50b29sc1wiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdHJhbnNsYXRlPVwiZmxvd1JhdGVcIj48L3NwYW4+IDxzcGFuIGNsYXNzPVwidG9vbC1uYW1lXCIgbmctaWY9XCJjdHJsLnByaW50ZXIuY29uZmlnLnRvb2xzLmxlbmd0aCA+IDFcIj5cIiB7e3Rvb2x9fTwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RoPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1kLXNsaWRlciBjbGFzcz1cIm1kLXByaW1hcnlcIiBmbGV4IG1kLWRpc2NyZXRlIG5nLW1vZGVsPVwiY3RybC5mbG93UmF0ZXNbJGluZGV4XVwiIG5nLW1vZGVsLW9wdGlvbnM9XCJjdHJsLm5nTW9kZWxPcHRpb25zXCIgbmctY2hhbmdlPVwiY3RybC5zZXRGbG93UmF0ZSgkaW5kZXgpXCIgc3RlcD1cIjFcIiBtaW49XCI3NVwiIG1heD1cIjEyNVwiPjwvbWQtc2xpZGVyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBjdHJsLmZsb3dSYXRlc1skaW5kZXhdIH19JVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT5cXHJcXG4gICAgICAgICAgICAgICAgPC90YWJsZT5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICA8L21kLWRpYWxvZy1jb250ZW50PlxcclxcbiAgICA8bWQtZGlhbG9nLWFjdGlvbnMgbGF5b3V0PVwicm93XCIgbGF5b3V0LWFsaWduPVwiZW5kIGNlbnRlclwiPlxcclxcbiAgICAgICAgPG1kLWJ1dHRvbiBuZy1jbGljaz1cImN0cmwuaGlkZSgpXCI+XFxyXFxuICAgICAgICAgICAgPHNwYW4gdHJhbnNsYXRlPVwiZGlzbWlzc1wiPjwvc3Bhbj5cXHJcXG4gICAgICAgIDwvbWQtYnV0dG9uPlxcclxcbiAgICA8L21kLWRpYWxvZy1hY3Rpb25zPlxcclxcbjwvbWQtZGlhbG9nPicpO1xuJHRlbXBsYXRlQ2FjaGUucHV0KCd2aWV3cy9pbmRleC5odG1sJywnPGRpdj5cXHJcXG4gICAgPGRpdiBuZy1pZj1cIiFjdHJsLmxvYWRpbmcgJiYgY3RybC5wcmludGVycy5sZW5ndGhcIj5cXHJcXG4gICAgICAgIDxyZXNpemVyIGNvdW50PVwiY3RybC5wcmludGVycy5sZW5ndGhcIiBvdXRwdXQ9XCJjdHJsLnJlc2l6ZXJcIj5cXHJcXG4gICAgICAgICAgICA8cHJpbnRlciBuZy1yZXBlYXQ9XCJwcmludGVyIGluIGN0cmwucHJpbnRlcnNcIiBtb2RlbD1cInByaW50ZXJcIiBzdHlsZT1cIndpZHRoOiB7eyBjdHJsLnJlc2l6ZXIud2lkdGggfX0lOyBoZWlnaHQ6IHt7IGN0cmwucmVzaXplci5oZWlnaHQgfX1weFwiPjwvcHJpbnRlcj5cXHJcXG4gICAgICAgIDwvcmVzaXplcj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XCJuby1wcmludGVyc1wiIG5nLWlmPVwiIWN0cmwubG9hZGluZyAmJiAhY3RybC5wcmludGVycy5sZW5ndGhcIj5cXHJcXG4gICAgICAgIDxwIHRyYW5zbGF0ZT1cIm5vUHJpbnRlclwiPjwvcD5cXHJcXG4gICAgICAgIDxwPlxcclxcbiAgICAgICAgICAgIDxtZC1idXR0b24gaHJlZj1cIi8jIS9jb25maWd1cmF0aW9uL2FkZFwiPlxcclxcbiAgICAgICAgICAgICAgICA8c3BhbiB0cmFuc2xhdGU9XCJub1ByaW50ZXJzQWRkUHJpbnRlclwiPjwvc3Bhbj4gICAgICAgICAgICAgICAgXFxyXFxuICAgICAgICAgICAgPC9tZC1idXR0b24+XFxyXFxuICAgICAgICAgICAgPG1kLWJ1dHRvbiBocmVmPVwiLyMhL2NvbmZpZ3VyYXRpb25cIj5cXHJcXG4gICAgICAgICAgICAgICAgPHNwYW4gdHJhbnNsYXRlPVwibm9QcmludGVyc0VkaXRQcmludGVyc1wiPjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICA8L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgIDwvcD5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9kaXY+Jyk7XG4kdGVtcGxhdGVDYWNoZS5wdXQoJ3ZpZXdzL2NvbmZpZ3VyYXRpb24vYWRkLmh0bWwnLCc8ZGl2PlxcclxcbiAgICA8bWQtY2FyZCBmbGV4LWd0LXNtPVwiNTBcIiBmbGV4LW9mZnNldC1ndC1zbT1cIjI1XCI+XFxyXFxuICAgICAgICA8bWQtY2FyZC10aXRsZT5cXHJcXG4gICAgICAgICAgICA8bWQtY2FyZC10aXRsZS10ZXh0PlxcclxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kLWhlYWRsaW5lXCIgdHJhbnNsYXRlPVwiYWRkUHJpbnRlclwiPjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICA8L21kLWNhcmQtdGl0bGUtdGV4dD5cXHJcXG4gICAgICAgIDwvbWQtY2FyZC10aXRsZT5cXHJcXG4gICAgICAgIDxtZC1jYXJkLWNvbnRlbnQ+IFxcclxcbiAgICAgICAgICAgIDxmb3JtIG5hbWU9XCJjdHJsLmFkZEZvcm1cIiBjbGFzcz1cImZvcm0tdmVydGljYWxcIiBub3ZhbGlkYXRlPlxcclxcbiAgICAgICAgICAgICAgICA8bWQtaW5wdXQtY29udGFpbmVyIGNsYXNzPVwibWQtYmxvY2tcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCB0cmFuc2xhdGU9XCJwcmludGVyVHlwZVwiPjwvbGFiZWw+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8bWQtc2VsZWN0IG5nLW1vZGVsPVwiY3RybC5tb2RlbC5wcmludGVyVHlwZVwiIG5nLWRpc2FibGVkPVwiY3RybC5wcmludGVyVHlwZXMubGVuZ3RoID09PSAxXCIgcmVxdWlyZWQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPG1kLW9wdGlvbiBuZy1yZXBlYXQ9XCJ0eXBlIGluIGN0cmwucHJpbnRlclR5cGVzXCIgdmFsdWU9XCJ7e3R5cGV9fVwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyB0eXBlIHwgdHJhbnNsYXRlIH19XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9tZC1vcHRpb24+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L21kLXNlbGVjdD5cXHJcXG4gICAgICAgICAgICAgICAgPC9tZC1pbnB1dC1jb250YWluZXI+XFxyXFxuICAgICAgICAgICAgICAgIDxtZC1pbnB1dC1jb250YWluZXIgY2xhc3M9XCJtZC1ibG9ja1wiIG5nLWlmPVwiY3RybC5tb2RlbC5wcmludGVyVHlwZVwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIHRyYW5zbGF0ZT1cIm5hbWVcIj48L2xhYmVsPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwiY3RybC5tb2RlbC5uYW1lXCIgcmVxdWlyZWQgLz5cXHJcXG4gICAgICAgICAgICAgICAgPC9tZC1pbnB1dC1jb250YWluZXI+XFxyXFxuICAgICAgICAgICAgICAgIDxuZy1pbmNsdWRlIHNyYz1cImN0cmwuZ2V0Q29uZmlnVGVtcGxhdGVVcmwoKVwiPjwvbmctaW5jbHVkZT5cXHJcXG4gICAgICAgICAgICA8L2Zvcm0+XFxyXFxuICAgICAgICA8L21kLWNhcmQtY29udGVudD5cXHJcXG4gICAgICAgIDxtZC1jYXJkLWFjdGlvbnMgbGF5b3V0PVwicm93XCIgbGF5b3V0LWFsaWduPVwiZW5kIGNlbnRlclwiPlxcclxcbiAgICAgICAgICAgIDxtZC1idXR0b24gaHJlZj1cIi8jIS9jb25maWd1cmF0aW9uXCI+Q2FuY2VsPC9tZC1idXR0b24+XFxyXFxuICAgICAgICAgICAgPG1kLWJ1dHRvbiBjbGFzcz1cIm1kLXByaW1hcnlcIiBuZy1jbGljaz1cImN0cmwuYWRkUHJpbnRlcigpXCIgbmctZGlzYWJsZWQ9XCJjdHJsLmFkZEZvcm0uJHByaXN0aW5lIHx8IGN0cmwuYWRkRm9ybS4kaW52YWxpZFwiPlNhdmU8L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgIDwvbWQtY2FyZC1hY3Rpb25zPlxcclxcbiAgICA8L21kLWNhcmQ+XFxyXFxuPC9kaXY+Jyk7XG4kdGVtcGxhdGVDYWNoZS5wdXQoJ3ZpZXdzL2NvbmZpZ3VyYXRpb24vZWRpdC5odG1sJywnPGRpdj5cXHJcXG4gICAgPG1kLWNhcmQgZmxleC1ndC1zbT1cIjUwXCIgZmxleC1vZmZzZXQtZ3Qtc209XCIyNVwiPlxcclxcbiAgICAgICAgPG1kLWNhcmQtdGl0bGU+XFxyXFxuICAgICAgICAgICAgPG1kLWNhcmQtdGl0bGUtdGV4dD5cXHJcXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZC1oZWFkbGluZVwiPnt7IFxcJ2VkaXRpbmdcXCcgfCB0cmFuc2xhdGUgfX0ge3sgY3RybC5jdXJyZW50TmFtZSB9fTwvc3Bhbj5cXHJcXG4gICAgICAgICAgICA8L21kLWNhcmQtdGl0bGUtdGV4dD5cXHJcXG4gICAgICAgIDwvbWQtY2FyZC10aXRsZT5cXHJcXG4gICAgICAgIDxtZC1jYXJkLWNvbnRlbnQ+XFxyXFxuICAgICAgICAgICAgPGZvcm0gbmFtZT1cImVkaXRGb3JtXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxtZC1pbnB1dC1jb250YWluZXIgY2xhc3M9XCJtZC1ibG9ja1wiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIHRyYW5zbGF0ZT1cIm5hbWVcIj48L2xhYmVsPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwiY3RybC5tb2RlbC5uYW1lXCIgcmVxdWlyZWQgLz5cXHJcXG4gICAgICAgICAgICAgICAgPC9tZC1pbnB1dC1jb250YWluZXI+XFxyXFxuICAgICAgICAgICAgICAgIFxcclxcbiAgICAgICAgICAgICAgICA8bmctaW5jbHVkZSBzcmM9XCJjdHJsLmNvbmZpZ1RlbXBsYXRlVXJsXCI+PC9uZy1pbmNsdWRlPiBcXHJcXG4gICAgICAgICAgICAgICAgPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz1cIm1kLWJsb2NrXCI+ICAgICAgICAgICAgICAgICAgICBcXHJcXG4gICAgICAgICAgICAgICAgICAgIDxtZC1zd2l0Y2ggY2xhc3M9XCJtZC1wcmltYXJ5XCIgbmctbW9kZWw9XCJjdHJsLm1vZGVsLmRpc2FibGVkXCIgdGl0bGU9XCJ7eyBcXCdkaXNhYmxlTW9uaXRvcmluZ1RpdGxlXFwnIHwgdHJhbnNsYXRlIH19XCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdHJhbnNsYXRlPVwiZGlzYWJsZU1vbml0b3JpbmdcIj48L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L21kLXN3aXRjaD5cXHJcXG4gICAgICAgICAgICAgICAgPC9tZC1pbnB1dC1jb250YWluZXI+XFxyXFxuICAgICAgICAgICAgPC9mb3JtPlxcclxcbiAgICAgICAgPC9tZC1jYXJkLWNvbnRlbnQ+XFxyXFxuICAgICAgICA8bWQtY2FyZC1hY3Rpb25zIGxheW91dD1cInJvd1wiIGxheW91dC1hbGlnbj1cImVuZCBjZW50ZXJcIj5cXHJcXG4gICAgICAgICAgICA8ZGl2IGZsZXg+XFxyXFxuICAgICAgICAgICAgICAgIDxtZC1idXR0b24gZmxleCBjbGFzcz1cIm1kLXJhaXNlZCBtZC13YXJuIG1kLWh1ZS0yXCIgbmctY2xpY2s9XCJjdHJsLmRlbGV0ZVByaW50ZXIoKVwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdHJhbnNsYXRlPVwiZGVsZXRlXCI+PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICA8L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8bWQtYnV0dG9uIGhyZWY9XCIvIyEvY29uZmlndXJhdGlvblwiPjxzcGFuIHRyYW5zbGF0ZT1cImNhbmNlbFwiPjwvc3Bhbj48L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgICAgICA8bWQtYnV0dG9uIGNsYXNzPVwibWQtcHJpbWFyeVwiIG5nLWNsaWNrPVwiY3RybC51cGRhdGVQcmludGVyKClcIiBuZy1kaXNhYmxlZD1cImVkaXRGb3JtLiRwcmlzdGluZSB8fCBlZGl0Rm9ybS4kaW52YWxpZFwiPlxcclxcbiAgICAgICAgICAgICAgICA8c3BhbiB0cmFuc2xhdGU9XCJzYXZlXCI+PC9zcGFuPlxcclxcbiAgICAgICAgICAgIDwvbWQtYnV0dG9uPlxcclxcbiAgICAgICAgPC9tZC1jYXJkLWFjdGlvbnM+XFxyXFxuICAgIDwvbWQtY2FyZD4gXFxyXFxuPC9kaXY+Jyk7XG4kdGVtcGxhdGVDYWNoZS5wdXQoJ3ZpZXdzL2NvbmZpZ3VyYXRpb24vaW5kZXguaHRtbCcsJzxkaXY+ICAgIFxcclxcbiAgICA8bWQtY2FyZCBmbGV4LWd0LXNtPVwiNTBcIiBmbGV4LW9mZnNldC1ndC1zbT1cIjI1XCI+XFxyXFxuICAgICAgICA8bWQtY2FyZC10aXRsZT5cXHJcXG4gICAgICAgICAgICA8bWQtY2FyZC10aXRsZS10ZXh0PlxcclxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kLWhlYWRsaW5lXCIgdHJhbnNsYXRlPVwiZ2VuZXJhbFNldHRpbmdzXCI+PC9zcGFuPlxcclxcbiAgICAgICAgICAgIDwvbWQtY2FyZC10aXRsZS10ZXh0PlxcclxcbiAgICAgICAgPC9tZC1jYXJkLXRpdGxlPlxcclxcbiAgICAgICAgPG1kLWNhcmQtY29udGVudD5cXHJcXG4gICAgICAgICAgICA8Zm9ybSBuYW1lPVwic2V0dGluZ3NGb3JtXCIgbmctZGlzYWJsZWQ9XCJzZWxmLmxvYWRpbmdcIj5cXHJcXG4gICAgICAgICAgICAgICAgPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz1cIm1kLWJsb2NrXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgdHJhbnNsYXRlPVwicG9sbEludGVydmFsXCI+PC9sYWJlbD5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxtZC1zZWxlY3QgbmctbW9kZWw9XCJjdHJsLnNldHRpbmdzLmludGVydmFsXCIgcmVxdWlyZWQgdGl0bGU9XCJ7eyBcXCdwb2xsSW50ZXJ2YWxUaXRsZVxcJyB8IHRyYW5zbGF0ZSB9fVwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxtZC1vcHRpb24gbmctcmVwZWF0PVwiaW50ZXJ2YWwgaW4gY3RybC5pbnRlcnZhbHNcIiBuZy12YWx1ZT1cImludGVydmFsXCI+e3sgaW50ZXJ2YWwgLyAxMDAwIH19IHt7IFxcJ3NlY29uZHNcXCcgfCB0cmFuc2xhdGUgfX08L21kLW9wdGlvbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvbWQtc2VsZWN0PlxcclxcbiAgICAgICAgICAgICAgICA8L21kLWlucHV0LWNvbnRhaW5lcj4gXFxyXFxuICAgICAgICAgICAgICAgIDxtZC1pbnB1dC1jb250YWluZXIgY2xhc3M9XCJtZC1ibG9ja1wiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIHRyYW5zbGF0ZT1cImxvY2FsUG9ydFwiPjwvbGFiZWw+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJjdHJsLnNldHRpbmdzLmxvY2FsUG9ydFwiIHRpdGxlPVwie3sgXFwnbG9jYWxQb3J0VGl0bGVcXCcgfCB0cmFuc2xhdGUgfX1cIiAvPlxcclxcbiAgICAgICAgICAgICAgICA8L21kLWlucHV0LWNvbnRhaW5lcj5cXHJcXG4gICAgICAgICAgICAgICAgPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz1cIm1kLWJsb2NrXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8bWQtc3dpdGNoIGNsYXNzPVwibWQtcHJpbWFyeVwiIG5nLW1vZGVsPVwiY3RybC5zZXR0aW5ncy5oaWRlRGlzYWJsZWRQcmludGVyc1wiIHRpdGxlPVwie3sgXFwnaGlkZVVubW9uaXRvcmVkVGl0bGVcXCcgfCB0cmFuc2xhdGUgfX1cIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0cmFuc2xhdGU9XCJoaWRlVW5tb25pdG9yZWRcIj48L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L21kLXN3aXRjaD5cXHJcXG4gICAgICAgICAgICAgICAgPC9tZC1pbnB1dC1jb250YWluZXI+XFxyXFxuICAgICAgICAgICAgPC9mb3JtPlxcclxcbiAgICAgICAgPC9tZC1jYXJkLWNvbnRlbnQ+XFxyXFxuICAgICAgICA8bWQtY2FyZC1hY3Rpb25zIGxheW91dD1cInJvd1wiIGxheW91dC1hbGlnbj1cImVuZCBjZW50ZXJcIj5cXHJcXG4gICAgICAgICAgICA8bWQtYnV0dG9uIGNsYXNzPVwiXCIgbmctY2xpY2s9XCJjdHJsLnJldmVydFNldHRpbmdzKClcIiBuZy1kaXNhYmxlZD1cInNldHRpbmdzRm9ybS4kcHJpc3RpbmVcIj5cXHJcXG4gICAgICAgICAgICAgICAgPHNwYW4gdHJhbnNsYXRlPVwiY2FuY2VsXCI+PC9zcGFuPlxcclxcbiAgICAgICAgICAgIDwvbWQtYnV0dG9uPlxcclxcbiAgICAgICAgICAgIDxtZC1idXR0b24gY2xhc3M9XCJtZC1wcmltYXJ5XCIgbmctY2xpY2s9XCJjdHJsLnVwZGF0ZVNldHRpbmdzKClcIiBuZy1kaXNhYmxlZD1cInNldHRpbmdzRm9ybS4kcHJpc3RpbmUgfHwgc2V0dGluZ3NGb3JtLiRpbnZhbGlkXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxzcGFuIHRyYW5zbGF0ZT1cInNhdmVcIj48L3NwYW4+XFxyXFxuICAgICAgICAgICAgPC9tZC1idXR0b24+XFxyXFxuICAgICAgICA8L21kLWNhcmQtYWN0aW9ucz5cXHJcXG4gICAgPC9tZC1jYXJkPlxcclxcbiAgICA8bWQtY2FyZCBmbGV4LWd0LXNtPVwiNTBcIiBmbGV4LW9mZnNldC1ndC1zbT1cIjI1XCI+XFxyXFxuICAgICAgICA8bWQtY2FyZC10aXRsZT5cXHJcXG4gICAgICAgICAgICA8bWQtY2FyZC10aXRsZS10ZXh0PlxcclxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kLWhlYWRsaW5lXCIgdHJhbnNsYXRlPVwiUHJpbnRlcnNcIj48L3NwYW4+XFxyXFxuICAgICAgICAgICAgPC9tZC1jYXJkLXRpdGxlLXRleHQ+XFxyXFxuICAgICAgICA8L21kLWNhcmQtdGl0bGU+XFxyXFxuICAgICAgICA8bWQtY2FyZC1jb250ZW50PlxcclxcbiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz1cInByaW50ZXJzLXRhYmxlXCI+XFxyXFxuICAgICAgICAgICAgICAgIDx0aGVhZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGggdHJhbnNsYXRlPVwibmFtZVwiPjwvdGg+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHRyYW5zbGF0ZT1cInByaW50ZXJUeXBlXCI+PC90aD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGg+PC90aD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGg+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZC1idXR0b24gaHJlZj1cIi8jIS9jb25maWd1cmF0aW9uL2FkZFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1wbHVzXCI+PC9pPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdHJhbnNsYXRlPVwiYWRkXCI+PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RoPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cXHJcXG4gICAgICAgICAgICAgICAgPC90aGVhZD5cXHJcXG4gICAgICAgICAgICAgICAgPHRib2R5PlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cInByaW50ZXIgaW4gY3RybC5wcmludGVyc1wiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBuZy1iaW5kPVwicHJpbnRlci5uYW1lXCI+PC90ZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgbmctYmluZD1cInByaW50ZXIucHJpbnRlclR5cGVcIj48L3RkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgbmctaWY9XCJwcmludGVyLmRpc2FibGVkXCIgY2xhc3M9XCJmYSBmYS1leGNsYW1hdGlvbi10cmlhbmdsZVwiIHRpdGxlPVwie3sgXFwnbW9uaXRvcmluZ0Rpc2FibGVkXFwnIHwgdHJhbnNsYXRlIH19XCI+PC9pPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIG5nLWlmPVwiIXByaW50ZXIuZGlzYWJsZWRcIiBjbGFzcz1cImZhIGZhLWNoZWNrXCIgdGl0bGU9XCJ7eyBcXCdtb25pdG9yaW5nRW5hYmxlZFxcJyB8IHRyYW5zbGF0ZSB9fVwiPjwvaT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWQtYnV0dG9uIGhyZWY9XCIvIyEvY29uZmlndXJhdGlvbi9lZGl0L3t7cHJpbnRlci5pZH19XCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLWVkaXRcIj48L2k+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0cmFuc2xhdGU9XCJlZGl0XCI+PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21kLWJ1dHRvbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cXHJcXG4gICAgICAgICAgICAgICAgPC90Ym9keT5cXHJcXG4gICAgICAgICAgICA8L3RhYmxlPlxcclxcbiAgICAgICAgPC9tZC1jYXJkLWNvbnRlbnQ+XFxyXFxuICAgIDwvbWQtY2FyZD5cXHJcXG48L2Rpdj4nKTtcbiR0ZW1wbGF0ZUNhY2hlLnB1dCgndmlld3MvY29uZmlndXJhdGlvbi9PY3RvcHJpbnQuaHRtbCcsJzxkaXY+XFxyXFxuICAgIDxtZC1pbnB1dC1jb250YWluZXIgY2xhc3M9XCJtZC1ibG9ja1wiPlxcclxcbiAgICAgICAgPGxhYmVsIHRyYW5zbGF0ZT1cInVybFwiPjwvbGFiZWw+XFxyXFxuICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJjdHJsLm1vZGVsLmNvbmZpZy51cmxcIiByZXF1aXJlZCAvPlxcclxcbiAgICA8L21kLWlucHV0LWNvbnRhaW5lcj5cXHJcXG4gICAgPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz1cIm1kLWJsb2NrXCI+XFxyXFxuICAgICAgICA8bGFiZWwgdHJhbnNsYXRlPVwiYXBpS2V5XCI+PC9sYWJlbD5cXHJcXG4gICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cImN0cmwubW9kZWwuY29uZmlnLmFwaUtleVwiIHJlcXVpcmVkIC8+XFxyXFxuICAgIDwvbWQtaW5wdXQtY29udGFpbmVyPlxcclxcbiAgICA8bWQtaW5wdXQtY29udGFpbmVyIGNsYXNzPVwibWQtYmxvY2tcIiBuZy1pZj1cImN0cmwubW9kZWwuaWRcIj5cXHJcXG4gICAgICAgIDxsYWJlbCB0cmFuc2xhdGU9XCJwcm9maWxlXCI+PC9sYWJlbD5cXHJcXG4gICAgICAgIDxtZC1zZWxlY3QgbmctbW9kZWw9XCJjdHJsLm1vZGVsLmNvbmZpZy5wcm9maWxlXCIgbmctbW9kZWwtb3B0aW9ucz1cInt0cmFja0J5OiBcXCckdmFsdWUuaWRcXCd9XCIgcmVxdWlyZWQgdGl0bGU9XCJ7eyBcXCdwcm9maWxlVGl0bGVcXCcgfCB0cmFuc2xhdGUgfX1cIj5cXHJcXG4gICAgICAgICAgICA8bWQtb3B0aW9uIG5nLXJlcGVhdD1cInByb2ZpbGUgaW4gY3RybC5tb2RlbC5jb25maWcuYXZhaWxhYmxlUHJvZmlsZXNcIiBuZy12YWx1ZT1cInByb2ZpbGVcIj5cXHJcXG4gICAgICAgICAgICAgICAge3sgcHJvZmlsZS5uYW1lIH19XFxyXFxuICAgICAgICAgICAgPC9tZC1vcHRpb24+XFxyXFxuICAgICAgICA8L21kLXNlbGVjdD5cXHJcXG4gICAgPC9tZC1pbnB1dC1jb250YWluZXI+XFxyXFxuPC9kaXY+Jyk7XG4kdGVtcGxhdGVDYWNoZS5wdXQoJ3ZpZXdzL2NvbmZpZ3VyYXRpb24vUmVwUmFwLmh0bWwnLCc8ZGl2PlxcclxcbiAgICA8bWQtaW5wdXQtY29udGFpbmVyIGNsYXNzPVwibWQtYmxvY2tcIj5cXHJcXG4gICAgICAgIDxsYWJlbCB0cmFuc2xhdGU9XCJ1cmxcIj48L2xhYmVsPlxcclxcbiAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwiY3RybC5tb2RlbC5jb25maWcudXJsXCIgcmVxdWlyZWQgLz5cXHJcXG4gICAgPC9tZC1pbnB1dC1jb250YWluZXI+XFxyXFxuICAgIDxtZC1pbnB1dC1jb250YWluZXIgY2xhc3M9XCJtZC1ibG9ja1wiPlxcclxcbiAgICAgICAgPGxhYmVsIHRyYW5zbGF0ZT1cIndlYmNhbVVybFwiPjwvbGFiZWw+XFxyXFxuICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJjdHJsLm1vZGVsLmNvbmZpZy53ZWJDYW1VcmxcIiByZXF1aXJlZCAvPlxcclxcbiAgICA8L21kLWlucHV0LWNvbnRhaW5lcj5cXHJcXG4gICAgPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz1cIm1kLWJsb2NrXCI+XFxyXFxuICAgICAgICA8bGFiZWwgdHJhbnNsYXRlPVwic25hcHNob3RVcmxcIj48L2xhYmVsPlxcclxcbiAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwiY3RybC5tb2RlbC5jb25maWcuc25hcHNob3RVcmxcIiByZXF1aXJlZCAvPlxcclxcbiAgICA8L21kLWlucHV0LWNvbnRhaW5lcj5cXHJcXG4gICAgPCEtLTxtZC1pbnB1dC1jb250YWluZXIgbmctaWY9XCJjdHJsLnJlcXVpcmVzUmVwUmFwUGFzc3dvcmRcIiBjbGFzcz1cIm1kLWJsb2NrXCI+XFxyXFxuICAgICAgICA8bGFiZWwgdHJhbnNsYXRlPVwicGFzc3dvcmRcIj48L2xhYmVsPlxcclxcbiAgICAgICAgPGlucHV0IHR5cGU9XCJwYXNzd29yZFwiIG5nLW1vZGVsPVwiY3RybC5tb2RlbC5jb25maWcucGFzc3dvcmRcIiByZXF1aXJlZCAvPlxcclxcbiAgICA8L21kLWlucHV0LWNvbnRhaW5lcj5cXHJcXG4gICAgPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz1cIm1kLWJsb2NrXCI+XFxyXFxuICAgICAgICA8bWQtc3dpdGNoIGNsYXNzPVwibWQtcHJpbWFyeVwiIG5nLW1vZGVsPVwiY3RybC5yZXF1aXJlc1JlcFJhcFBhc3N3b3JkXCI+XFxyXFxuICAgICAgICAgICAgPHNwYW4gdHJhbnNsYXRlPVwicmVxdWlyZXNQYXNzd29yZFwiPjwvc3Bhbj5cXHJcXG4gICAgICAgIDwvbWQtc3dpdGNoPlxcclxcbiAgICA8L21kLWlucHV0LWNvbnRhaW5lcj4tLT5cXHJcXG48L2Rpdj4nKTt9XSk7Il19
